[

   {

      "sha": "1c5b03fb8ce862b9f69375937becdb07fa210e17",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:05:26Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:20:29Z"

         },

         "message": "changesets: only require lively.ChangeSet when \"LivelyChangesets\" are in localstorage",

         "tree": {

            "sha": "199ab7051973dc94c0ca536a391dab0be6367d5e",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/199ab7051973dc94c0ca536a391dab0be6367d5e"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/1c5b03fb8ce862b9f69375937becdb07fa210e17",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/1c5b03fb8ce862b9f69375937becdb07fa210e17",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/1c5b03fb8ce862b9f69375937becdb07fa210e17",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/1c5b03fb8ce862b9f69375937becdb07fa210e17/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "11a5af1ff80a56d84da7e911a848e6fcb6f8ea1a",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/11a5af1ff80a56d84da7e911a848e6fcb6f8ea1a",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/11a5af1ff80a56d84da7e911a848e6fcb6f8ea1a"

         }

      ],

      "stats": {

         "total": 9,

         "additions": 6,

         "deletions": 3

      },

      "files": [

         {

            "sha": "2da8d314a775300fd609c4ce176d9098fd28666a",

            "filename": "core/lively/ModuleSystem.js",

            "status": "modified",

            "additions": 6,

            "deletions": 3,

            "changes": 9,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/1c5b03fb8ce862b9f69375937becdb07fa210e17/core/lively/ModuleSystem.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/1c5b03fb8ce862b9f69375937becdb07fa210e17/core/lively/ModuleSystem.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ModuleSystem.js?ref=1c5b03fb8ce862b9f69375937becdb07fa210e17",

            "patch": "@@ -636,8 +636,11 @@ Object.extend(lively.Module, {\n })(lively);\n \n (function testModuleLoad() {\n-    if (Config.changesetsExperiment && Global.localStorage && \n-        localStorage.getItem(\"LivelyChangesets:\" + location.pathname))\n-            lively.ChangeSet.loadAndcheckVsSystem();\n+    if (Config.changesetsExperiment\n+     && Global.localStorage\n+     && localStorage.getItem(\"LivelyChangesets:\" + location.pathname)) {\n+            require('lively.ChangeSets').toRun(function() {\n+                ChangeSet.loadAndcheckVsSystem(); })\n+    }\n     lively.Module.checkModuleLoadStates();\n }).delay((Global.location && location.hostname === \"localhost\") ? 3 : 14);"

         }

      ]

   },

   {

      "sha": "3bf5e06bb892476886f31807cf82f2fcc3f02ab4",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:06:09Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:20:51Z"

         },

         "message": "worker: Functions.forkInWorker has better logging",

         "tree": {

            "sha": "90901f172840f933073760c339db9e80be04e747",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/90901f172840f933073760c339db9e80be04e747"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/3bf5e06bb892476886f31807cf82f2fcc3f02ab4",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/3bf5e06bb892476886f31807cf82f2fcc3f02ab4",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/3bf5e06bb892476886f31807cf82f2fcc3f02ab4",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/3bf5e06bb892476886f31807cf82f2fcc3f02ab4/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "1c5b03fb8ce862b9f69375937becdb07fa210e17",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/1c5b03fb8ce862b9f69375937becdb07fa210e17",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/1c5b03fb8ce862b9f69375937becdb07fa210e17"

         }

      ],

      "stats": {

         "total": 12,

         "additions": 9,

         "deletions": 3

      },

      "files": [

         {

            "sha": "243d14cdc17e3882b7c8ce8ef44c7ac599638016",

            "filename": "core/lively/lang/Function.js",

            "status": "modified",

            "additions": 9,

            "deletions": 3,

            "changes": 12,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/3bf5e06bb892476886f31807cf82f2fcc3f02ab4/core/lively/lang/Function.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/3bf5e06bb892476886f31807cf82f2fcc3f02ab4/core/lively/lang/Function.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/lang/Function.js?ref=3bf5e06bb892476886f31807cf82f2fcc3f02ab4",

            "patch": "@@ -472,11 +472,17 @@ Global.Functions = {\n         var worker = lively.Worker.createInPool(null, Config.get('lively.Worker.idleTimeOfPoolWorker'));\n         worker.onMessage = function(evt) {\n             switch (evt.data.type) {\n-                case 'warning': console.warn(evt.data.message); break;\n-                case 'runResponse': options.whenDone && options.whenDone(evt.data.error, evt.data.result);\n+                case 'warning':\n+                    console.warn(\"[WORKER warn] %s\", evt.data.message);\n+                    break;\n+                case 'runResponse':\n+                    options.whenDone && options.whenDone(evt.data.error, evt.data.result);\n+                    break;\n+                case 'evalResponse':\n+                    console.log(\"[WORKER evalResponse] %s\", evt.data.value);\n                     break;\n                 default:\n-                    console.log(\"unknown message from worker %s\", evt.data.type);\n+                    console.log(\"[WORKER unknown message] %s\", evt.data.type || evt.data);\n             }\n         }\n         worker.basicRun({func: workerFunc, args: options.args || [], useWhenDone: true});"

         }

      ]

   },

   {

      "sha": "709cb5429776bdff24057bd635cd1875c4aca80c",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:07:25Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:20:53Z"

         },

         "message": "ide, code snippets: state network dependency",

         "tree": {

            "sha": "260d7fe4b283f48a886d67d6b8fd8ecf2ecc0d9f",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/260d7fe4b283f48a886d67d6b8fd8ecf2ecc0d9f"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/709cb5429776bdff24057bd635cd1875c4aca80c",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/709cb5429776bdff24057bd635cd1875c4aca80c",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/709cb5429776bdff24057bd635cd1875c4aca80c",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/709cb5429776bdff24057bd635cd1875c4aca80c/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "3bf5e06bb892476886f31807cf82f2fcc3f02ab4",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/3bf5e06bb892476886f31807cf82f2fcc3f02ab4",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/3bf5e06bb892476886f31807cf82f2fcc3f02ab4"

         }

      ],

      "stats": {

         "total": 2,

         "additions": 1,

         "deletions": 1

      },

      "files": [

         {

            "sha": "032918232fc15bdc63494e89ed8b70a5f8dfff03",

            "filename": "core/lively/ide/codeeditor/Snippets.js",

            "status": "modified",

            "additions": 1,

            "deletions": 1,

            "changes": 2,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/709cb5429776bdff24057bd635cd1875c4aca80c/core/lively/ide/codeeditor/Snippets.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/709cb5429776bdff24057bd635cd1875c4aca80c/core/lively/ide/codeeditor/Snippets.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/codeeditor/Snippets.js?ref=709cb5429776bdff24057bd635cd1875c4aca80c",

            "patch": "@@ -1,4 +1,4 @@\n-module('lively.ide.codeeditor.Snippets').requires('lively.ide.codeeditor.ace').toRun(function() {\n+module('lively.ide.codeeditor.Snippets').requires('lively.ide.codeeditor.ace', 'lively.Network').toRun(function() {\n \n Object.subclass('lively.morphic.CodeEditorSnippets',\n 'accessing', {"

         }

      ]

   },

   {

      "sha": "a06c6f68b196a6e72d16d585c41a49907a72fc6c",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:50:12Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:50:12Z"

         },

         "message": "canvasmorph: add tests to default test files",

         "tree": {

            "sha": "c13e6ce70a32877d23e73fc3114005e686f5ace1",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/c13e6ce70a32877d23e73fc3114005e686f5ace1"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/a06c6f68b196a6e72d16d585c41a49907a72fc6c",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a06c6f68b196a6e72d16d585c41a49907a72fc6c",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/a06c6f68b196a6e72d16d585c41a49907a72fc6c",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a06c6f68b196a6e72d16d585c41a49907a72fc6c/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/0bca47a3fd60a09db93a6dd49b77c8e547ad911f"

         }

      ],

      "stats": {

         "total": 1,

         "additions": 1,

         "deletions": 0

      },

      "files": [

         {

            "sha": "1a0d5df44ab59f60cae488d956def363784291a5",

            "filename": "run_tests.js",

            "status": "modified",

            "additions": 1,

            "deletions": 0,

            "changes": 1,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/a06c6f68b196a6e72d16d585c41a49907a72fc6c/run_tests.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/a06c6f68b196a6e72d16d585c41a49907a72fc6c/run_tests.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/run_tests.js?ref=a06c6f68b196a6e72d16d585c41a49907a72fc6c",

            "patch": "@@ -116,6 +116,7 @@ var browserTests = [\n     'lively.ide.tools.tests.CommandLine',\n \n     // morphic\n+    \"lively.morphic.tests.Canvas\",\n     \"lively.morphic.tests.Connectors\",\n     \"lively.morphic.tests.CoreToolsTests\",\n     \"lively.morphic.tests.DataGridTests\","

         }

      ]

   },

   {

      "sha": "3376e25424e5db8ab7b68d687f64e698320465f6",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T22:44:52Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T22:44:52Z"

         },

         "message": "new shortcuts: gotoNextParagraph (Ctrl-Down), gotoPrevParagraph (Ctrl-Up), moveCursorToScreenTop (Ctrl-Alt-,), moveCursorToScreenBottom (Ctrl-Alt-.)",

         "tree": {

            "sha": "2c02e4245503afa08bdf06c00b97d8cb37182b29",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/2c02e4245503afa08bdf06c00b97d8cb37182b29"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/3376e25424e5db8ab7b68d687f64e698320465f6",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/3376e25424e5db8ab7b68d687f64e698320465f6",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/3376e25424e5db8ab7b68d687f64e698320465f6",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/3376e25424e5db8ab7b68d687f64e698320465f6/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "a06c6f68b196a6e72d16d585c41a49907a72fc6c",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a06c6f68b196a6e72d16d585c41a49907a72fc6c",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/a06c6f68b196a6e72d16d585c41a49907a72fc6c"

         }

      ],

      "stats": {

         "total": 68,

         "additions": 64,

         "deletions": 4

      },

      "files": [

         {

            "sha": "de7f069acbfbe51ceec99a62df20daffcbf93ec5",

            "filename": "core/lively/ide/codeeditor/Keyboard.js",

            "status": "modified",

            "additions": 64,

            "deletions": 4,

            "changes": 68,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/3376e25424e5db8ab7b68d687f64e698320465f6/core/lively/ide/codeeditor/Keyboard.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/3376e25424e5db8ab7b68d687f64e698320465f6/core/lively/ide/codeeditor/Keyboard.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/codeeditor/Keyboard.js?ref=3376e25424e5db8ab7b68d687f64e698320465f6",

            "patch": "@@ -348,11 +348,64 @@ Object.subclass('lively.ide.CodeEditor.KeyboardShortcuts',\n                 multiSelectAction: \"forEach\",\n                 readOnly: true\n             }, {\n-                name: \"selectAllLikeThis\",\n-                bindKey: \"Ctrl-Shift-/\",\n+                name: 'moveCursorToScreenTop',\n+                bindKey: 'Alt-Ctrl-,'/*Alt-Ctrl-<*/,\n                 exec: function(ed) {\n-                    ed.pushEmacsMark && ed.pushEmacsMark(ed.getCursorPosition());\n-                    ed.findAll(ed.$morph.getTextRange()); },\n+                    var currentPos = ed.getCursorPosition(),\n+                        firstRow = ed.renderer.getFirstFullyVisibleRow(),\n+                        lastRow = ed.renderer.getLastFullyVisibleRow(),\n+                        middleRow = firstRow+Math.floor((lastRow - firstRow)/2),\n+                        newPos = currentPos;\n+                    if (currentPos.row <= firstRow) return;\n+                    if (currentPos.row <= middleRow) newPos.row = firstRow;\n+                    else if (currentPos.row <= lastRow) newPos.row = middleRow;\n+                    else newPos.row = lastRow;\n+                    ed.selection.moveCursorToPosition(newPos)\n+                },\n+                readOnly: true\n+            }, {\n+                name: 'moveCursorToScreenBottom',\n+                bindKey: 'Alt-Ctrl-.'/*Alt-Ctrl->*/,\n+                exec: function(ed) {\n+                    var currentPos = ed.getCursorPosition(),\n+                        firstRow = ed.renderer.getFirstFullyVisibleRow(),\n+                        lastRow = ed.renderer.getLastFullyVisibleRow(),\n+                        middleRow = firstRow+Math.floor((lastRow - firstRow)/2),\n+                        newPos = currentPos;\n+                    if (currentPos.row < firstRow) newPos.row = firstRow;\n+                    else if (currentPos.row < middleRow) newPos.row = middleRow;\n+                    else if (currentPos.row < lastRow) newPos.row = lastRow;\n+                    else return;\n+                    ed.selection.moveCursorToPosition(newPos);\n+                },\n+                readOnly: true\n+            }, {\n+                name: 'gotoNextParagraph',\n+                bindKey: 'Ctrl-Up',\n+                exec: function(ed) {\n+                    var pos = ed.getCursorPosition(), found = -1;\n+                    function isEmptyLine(line) { return /^\\s*$/.test(line); }\n+                    var lines = ed.session.getLines(pos.row, ed.session.getLength()), found = -1;\n+                    for (var i = 1; i < lines.length; i++) {\n+                        found = i;\n+                        if (!isEmptyLine(lines[i-1]) && isEmptyLine(lines[i])) break;\n+                    }\n+                    ed.selection.moveCursorToPosition({row: pos.row+found, column: 0});\n+                },\n+                readOnly: true\n+            }, {\n+                name: 'gotoPrevParagraph',\n+                bindKey: 'Ctrl-Down',\n+                exec: function(ed) {\n+                    function isEmptyLine(line) { return /^\\s*$/.test(line); }\n+                    var pos = ed.getCursorPosition(), found = -1,\n+                        lines = ed.session.getLines(0, pos.row);\n+                    for (var i = lines.length-2; i >= 0; i--) {\n+                        found = i;\n+                        if (!isEmptyLine(lines[i+1]) && isEmptyLine(lines[i])) break;\n+                    }\n+                    ed.selection.moveCursorToPosition({row: found, column: 0});\n+                },\n                 readOnly: true\n             }, {\n                 bindKey: {mac: \"©\"},\n@@ -413,6 +466,13 @@ Object.subclass('lively.ide.CodeEditor.KeyboardShortcuts',\n                 bindKey: \"Ctrl-Shift-,\",\n                 exec: function(ed) { ed.$morph.multiSelectPrev(); },\n                 readOnly: true\n+            }, {\n+                name: \"selectAllLikeThis\",\n+                bindKey: \"Ctrl-Shift-/\",\n+                exec: function(ed) {\n+                    ed.pushEmacsMark && ed.pushEmacsMark(ed.getCursorPosition());\n+                    ed.findAll(ed.$morph.getTextRange()); },\n+                readOnly: true\n             }]);\n     },\n "

         }

      ]

   },

   {

      "sha": "0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:49:57Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T16:49:57Z"

         },

         "message": "Merge branch 'vwf-compat'\n\nConflicts:\n\tcore/lively/ChangeSets.js\n\tcore/lively/ModuleSystem.js\n\tcore/lively/persistence/BuildSpec.js",

         "tree": {

            "sha": "949006a45bbf19332686ed52d3755b00c165ae77",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/949006a45bbf19332686ed52d3755b00c165ae77"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "709cb5429776bdff24057bd635cd1875c4aca80c",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/709cb5429776bdff24057bd635cd1875c4aca80c",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/709cb5429776bdff24057bd635cd1875c4aca80c"

         },

         {

            "sha": "ce829c260e4cbf3fc1cebfe3172daa6719d7e8c1",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/ce829c260e4cbf3fc1cebfe3172daa6719d7e8c1",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/ce829c260e4cbf3fc1cebfe3172daa6719d7e8c1"

         }

      ],

      "stats": {

         "total": 1037,

         "additions": 564,

         "deletions": 473

      },

      "files": [

         {

            "sha": "2a53a798b1469b21b7132c0a234f0a7ccf721c15",

            "filename": "core/lib/lively-libs-debug.js",

            "status": "modified",

            "additions": 9,

            "deletions": 9,

            "changes": 18,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lib/lively-libs-debug.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lib/lively-libs-debug.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lib/lively-libs-debug.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -8929,16 +8929,16 @@ if ( typeof window === \"object\" && typeof window.document === \"object\" ) {\n \n // Module systems magic dance\n (function (definition) {\n-    // RequireJS\n-    if (typeof define == \"function\") {\n-        define(definition);\n-    // YUI3\n-    } else if (typeof YUI == \"function\") {\n-        YUI.add(\"es5\", definition);\n-    // CommonJS and <script>\n-    } else {\n+//     // RequireJS\n+//     if (typeof define == \"function\") {\n+//         define(definition);\n+//     // YUI3\n+//     } else if (typeof YUI == \"function\") {\n+//         YUI.add(\"es5\", definition);\n+//     // CommonJS and <script>\n+    // } else {\n         definition();\n-    }\n+    // }\n })(function () {\n \n /**"

         },

         {

            "sha": "6ca5f20e536c76cbfd5f4560fd08402af2663968",

            "filename": "core/lively/ChangeSets.js",

            "status": "modified",

            "additions": 7,

            "deletions": 3,

            "changes": 10,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/ChangeSets.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/ChangeSets.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ChangeSets.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -1,4 +1,4 @@\n-module('lively.ChangeSets').requires('lively.Traits', 'lively.persistence.BuildSpec').requiresLib({url: Config.codeBase + 'lib/jsdiff/jsdiff.js', loadTest: function() { return typeof JsDiff !== 'undefined'; }}).toRun(function() {\n+module('lively.ChangeSets').requires('lively.Traits', 'lively.persistence.BuildSpec', 'lively.morphic.MorphAddons'/*for lively.morphic.Panel*/).requiresLib({url: Config.codeBase + 'lib/jsdiff/jsdiff.js', loadTest: function() { return typeof JsDiff !== 'undefined'; }}).toRun(function() {\n \n Object.extend(Global, {\n \n@@ -3332,11 +3332,15 @@ alignSubmorphs: function alignSubmorphs() {\n }\n });\n \n-(function openChangesetsFlap() {\n+(function loadChangeSets() {\n+    if (!lively.Config.get(\"changesetsExperiment\")\n+     || !lively.LocalStorage.isAvailable()) return;\n+    var hasChangeSet = Global.localStorage.getItem(\"LivelyChangesets:\" + Global.location.pathname);\n+    if (hasChangeSet) ChangeSet.loadAndcheckVsSystem();\n     lively.whenLoaded(function(world) {\n         if (Config.changesetsExperiment)\n             lively.BuildSpec('ChangesetsFlap').createMorph().openInWorld();\n     });\n-})();\n+}).delay((Global.location && location.hostname === \"localhost\") ? 3 : 14);\n \n }) // end of module"

         },

         {

            "sha": "ed87c94cf587573bbc351afd6d8b07504b9629ba",

            "filename": "core/lively/Main.js",

            "status": "modified",

            "additions": 18,

            "deletions": 8,

            "changes": 26,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/Main.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/Main.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/Main.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -43,6 +43,11 @@ Object.subclass('lively.Main.WorldDataAccessor',\n });\n \n Object.extend(lively.Main.WorldDataAccessor, {\n+\n+    fromScratch: function(doc) {\n+        return new lively.Main.WorldBuilder(doc);\n+    },\n+\n     forDoc: function(doc) {\n         return doc.xmlVersion ? this.forXMLDoc(doc) : this.forHTMLDoc(doc);\n     },\n@@ -61,13 +66,6 @@ Object.extend(lively.Main.WorldDataAccessor, {\n     }\n });\n \n-lively.Main.WorldDataAccessor.subclass('lively.Main.NewWorldData',\n-'accessing and creation', {\n-    getWorld: function() {\n-        return this.world ? this.world : this.world = new lively.morphic.World(this.getDoc());\n-    }\n-});\n-\n lively.Main.WorldDataAccessor.subclass('lively.Main.JSONMorphicData',\n 'initializing', {\n     initialize: function($super, doc, json) {\n@@ -93,6 +91,16 @@ lively.Main.WorldDataAccessor.subclass('lively.Main.JSONMorphicData',\n \n });\n \n+lively.Main.WorldDataAccessor.subclass('lively.Main.WorldBuilder',\n+'accessing and creation', {\n+    getWorld: function() {\n+        if (this.world) return this.world;\n+        var d = this.getDoc(),\n+            bounds = lively.morphic.World.prototype.windowBounds(d);\n+        return this.world = lively.morphic.World.createOn(d.body, bounds);\n+    }\n+});\n+\n // The loader defines what should happen after the bootstrap phase to get a\n // lively.morphic.World running\n Object.subclass('lively.Main.Loader',\n@@ -103,7 +111,9 @@ Object.subclass('lively.Main.Loader',\n     getDoc: function() { return this.doc },\n     getWorldData: function() {\n         if (!this.worldData) {\n-            this.worldData = lively.Main.WorldDataAccessor.forDoc(this.getDoc());\n+            this.worldData = lively.Main.WorldDataAccessor[\n+                    Config.get(\"manuallyCreateWorld\") ?\n+                        'fromScratch' : 'forDoc'](this.getDoc());\n         }\n         return this.worldData;\n     }"

         },

         {

            "sha": "ee4f884699de812955224521d1270b4154978249",

            "filename": "core/lively/ModuleSystem.js",

            "status": "modified",

            "additions": 3,

            "deletions": 7,

            "changes": 10,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/ModuleSystem.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/ModuleSystem.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ModuleSystem.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -636,11 +636,7 @@ Object.extend(lively.Module, {\n })(lively);\n \n (function testModuleLoad() {\n-    if (Config.changesetsExperiment\n-     && Global.localStorage\n-     && localStorage.getItem(\"LivelyChangesets:\" + location.pathname)) {\n-            require('lively.ChangeSets').toRun(function() {\n-                ChangeSet.loadAndcheckVsSystem(); })\n-    }\n+    // note that with slow network connections it is possible that the module load\n+    // test will fail although the modules will load eventually\n     lively.Module.checkModuleLoadStates();\n-}).delay((Global.location && location.hostname === \"localhost\") ? 3 : 14);\n+}).delay(10);"

         },

         {

            "sha": "8dbd05dd7bb87cf9d8d94932005b7e53fccdc9f5",

            "filename": "core/lively/Network.js",

            "status": "modified",

            "additions": 18,

            "deletions": 16,

            "changes": 34,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/Network.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/Network.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/Network.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -1687,27 +1687,29 @@ Object.subclass('WebResource',\n \n     pvtProcessPropfindForSubElements: function(doc) {\n         if (!this.status.isSuccess()) {\n-            throw new Error('Cannot access subElements of ' + this.getURL());\n+            console.warn('Cannot access subElements of ' + this.getURL());\n+            this.subCollections = [];\n+            this.subDocuments = [];\n+        } else {\n+            this.pvtProcessPropfindResults(doc);\n         }\n-        this.pvtProcessPropfindResults(doc);\n     },\n \n     pvtProcessPropfindResults: function(doc) {\n         var result = [];\n-        if (this.status.isSuccess()) {\n-            var davNs = this.ensureDavXmlNs(doc);\n-            var nodes = new Query(\"/\" + davNs + \":multistatus/\" + davNs + \":response\").findAll(doc.documentElement);\n-            var urlQ = new Query(davNs + ':href');\n-            nodes.shift(); // remove first since it points to this WebResource\n-            for (var i = 0; i < nodes.length; i++) {\n-                var urlNode = urlQ.findFirst(nodes[i]),\n-                    url = urlNode.textContent || urlNode.text; // text is FIX for IE9+\n-                if (/!svn/.test(url)) continue;// ignore svn dirs\n-                var child = new WebResource(this.getURL().withPath(url)),\n-                    revNode = nodes[i].getElementsByTagName('version-name')[0];\n-                if (revNode) child.headRevision = Number(revNode.textContent);\n-                result.push(child);\n-            }\n+        if (!this.status.isSuccess()) return;\n+        var davNs = this.ensureDavXmlNs(doc),\n+            nodes = new Query(\"/\" + davNs + \":multistatus/\" + davNs + \":response\").findAll(doc.documentElement),\n+            urlQ = new Query(davNs + ':href');\n+        nodes.shift(); // remove first since it points to this WebResource\n+        for (var i = 0; i < nodes.length; i++) {\n+            var urlNode = urlQ.findFirst(nodes[i]),\n+                url = urlNode.textContent || urlNode.text; // text is FIX for IE9+\n+            if (/!svn/.test(url)) continue;// ignore svn dirs\n+            var child = new WebResource(this.getURL().withPath(url)),\n+                revNode = nodes[i].getElementsByTagName('version-name')[0];\n+            if (revNode) child.headRevision = Number(revNode.textContent);\n+            result.push(child);\n         }\n         this.subCollections = result.select(function(ea) { return ea.isCollection() });\n         this.subDocuments = result.select(function(ea) { return !ea.isCollection() });"

         },

         {

            "sha": "f2f89cd6dd96fcbf2db9b9f8359484dc5794ebd6",

            "filename": "core/lively/ast/acorn.js",

            "status": "modified",

            "additions": 33,

            "deletions": 16,

            "changes": 49,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/ast/acorn.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/ast/acorn.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ast/acorn.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -1,23 +1,40 @@\n // FIXME rk 2013-06-10\n // we need the right order of libs to be loaded, this should eventually be\n // supported by lively.Module>>requireLib\n-var allDependenciesLoaded = false;\n-var dependencies = [\n-    {url: Config.codeBase + 'lib/acorn/acorn.js', loadTest: function() { return typeof acorn !== 'undefined'; }},\n-    {url: Config.codeBase + 'lib/acorn/acorn-loose.js', loadTest: function() { return typeof acorn !== 'undefined' && typeof acorn.parse_dammit !== 'undefined'; }},\n-    {url: Config.codeBase + 'lib/acorn/acorn-walk.js', loadTest: function() { return typeof acorn !== 'undefined' && typeof acorn.walk !== 'undefined'; }}\n-];\n-\n-dependencies.doAndContinue(function(next, lib) {\n-    JSLoader.loadJs(lib.url);\n-    var interval = Global.setInterval(function() {\n-        if (!lib.loadTest()) return;\n-        Global.clearInterval(interval);\n-        next();\n-    }, 50);\n-}, function() { allDependenciesLoaded = true; });\n+// also: when requirejs is present the acorn library files try to use it for\n+// loading and don't expose the acorn global. the current solution for this\n+// right now is to support both schemes here\n+var acornLibsLoaded = false;\n+(function loadAcornLibs() {\n+    if (typeof requirejs !== \"undefined\") loadAcornWithRequireJS()\n+    else loadAcornManually();\n+    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n+    function loadAcornManually() {\n+        var dependencies = [\n+            {url: Config.codeBase + 'lib/acorn/acorn.js',       loadTest: function() { return typeof acorn !== 'undefined'; }},\n+            {url: Config.codeBase + 'lib/acorn/acorn-loose.js', loadTest: function() { return typeof acorn !== 'undefined' && typeof acorn.parse_dammit !== 'undefined'; }},\n+            {url: Config.codeBase + 'lib/acorn/acorn-walk.js',  loadTest: function() { return typeof acorn !== 'undefined' && typeof acorn.walk !== 'undefined'; }}\n+        ];\n+        dependencies.doAndContinue(function(next, lib) {\n+            JSLoader.loadJs(lib.url);\n+            var interval = Global.setInterval(function() {\n+                if (!lib.loadTest()) return;\n+                Global.clearInterval(interval);\n+                next();\n+            }, 50);\n+        }, function() { acornLibsLoaded = true; });\n+    }\n+    function loadAcornWithRequireJS() {\n+        // FIXME how to access requirejs' require cleanly?\n+        requirejs.s.contexts._.require(['core/lib/acorn/acorn.js', 'core/lib/acorn/acorn-loose.js', 'core/lib/acorn/acorn-walk.js'], function(acorn, acornLoose, acornWalk) {\n+            Global.acorn = acorn;\n+            Object.extend(acorn, acornLoose);\n+            acorn.walk = acornWalk;\n+            acornLibsLoaded = true; });\n+    }\n+})();\n \n-module(\"lively.ast.acorn\").requires(\"lively.ide.SourceDatabase\").requiresLib({loadTest: function() { return !!allDependenciesLoaded; }}).toRun(function() {\n+module(\"lively.ast.acorn\").requires(\"lively.ide.SourceDatabase\").requiresLib({loadTest: function() { return !!acornLibsLoaded; }}).toRun(function() {\n \n (function extendAcorn() {\n "

         },

         {

            "sha": "17378496d8f604856212e2cc5165de00e3e3b298",

            "filename": "core/lively/bootstrap.js",

            "status": "modified",

            "additions": 13,

            "deletions": 12,

            "changes": 25,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/bootstrap.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/bootstrap.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/bootstrap.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -956,21 +956,18 @@\n         loadMain: function(doc, startupFunc) {\n             LoadingScreen.add('Loading');\n             var bootstrapModules = [\n+                'lively.ChangeSets',\n                 'lively.lang.Closure',\n                 'lively.lang.UUID',\n                 'lively.bindings',\n-                'lively.Main'\n-            ];\n-            require(bootstrapModules).toRun(function() {\n+                'lively.Main'];\n+            lively.require(bootstrapModules).toRun(function() {\n                 lively.Config.loadUserConfigModule();\n                 var loader = lively.Main.getLoader(doc);\n-                lively.bindings.connect(loader, 'finishLoading',\n-                                        LoadingScreen, 'remove');\n-                if (startupFunc) {\n-                    loader.startupFunc = startupFunc;\n-                    lively.bindings.connect(loader, 'finishLoading',\n-                                            loader, 'startupFunc');\n-                }\n+                lively.whenLoaded(function() {\n+                    LoadingScreen.remove();\n+                    startupFunc && startupFunc();\n+                });\n                 loader.systemStart(doc);\n             });\n         },\n@@ -1183,7 +1180,8 @@\n     if (browserDetector.isNodejs()) {\n         domLoaded = true;\n     } else {\n-        domLoaded = false;\n+        domLoaded = document.readyState === \"complete\"\n+                 || document.readyState == \"loaded\";\n         Global.addEventListener('DOMContentLoaded', function() { domLoaded = true; }, true);\n     }\n \n@@ -1234,7 +1232,7 @@\n                 loader.systemStart(document);\n                 console.log('bootstrap done');\n             } + ')');\n-            Global.require(bootstrapModules).toRun(finished);\n+            lively.require(bootstrapModules).toRun(finished);\n         });\n         module.exports.Global = Global;\n     }\n@@ -1368,6 +1366,9 @@\n     // let it run\n     // -=-=-=-=-=-=-=-\n     (function startWorld(startupFunc) {\n+        // don't load twice\n+        if (lively.wasStarted) return;\n+        lively.wasStarted = true;\n         if (browserDetector.isNodejs()) {\n             initNodejsBootstrap();\n         } else if (lively.ApplicationCache.isActive) {"

         },

         {

            "sha": "99ec0000ffb329b976aa8cd4b0930256b4a7ed43",

            "filename": "core/lively/defaultconfig.js",

            "status": "modified",

            "additions": 3,

            "deletions": 1,

            "changes": 4,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/defaultconfig.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/defaultconfig.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/defaultconfig.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -363,7 +363,9 @@ Config.addOptions(\n     [\"ignoreLoadingErrors\", true],\n     [\"ignoreMissingModules\", false],\n     [\"keepSerializerIds\", false],\n-    [\"createWorldPreview\", true, \"Whether to store an HTML document showing a static version of the serialized world.\"]\n+    [\"createWorldPreview\", true, \"Whether to store an HTML document showing a static version of the serialized world.\"],\n+    [\"manuallyCreateWorld\", false, \"Loads up Lively and creates a complete new world from scratch instead of using a serialized one.\"],\n+    [\"removeDOMContentBeforeWorldLoad\", true, \"Whether to remove all the DOM child nodes of the DOM element that is used to display the World.\"]\n ],\n \n 'lively.bindings', ["

         },

         {

            "sha": "10f66f153ad8d513d503b4ed506815044bbe47d5",

            "filename": "core/lively/morphic/Core.js",

            "status": "modified",

            "additions": 11,

            "deletions": 5,

            "changes": 16,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/morphic/Core.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/morphic/Core.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/morphic/Core.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -664,10 +664,9 @@ lively.morphic.Morph.subclass('lively.morphic.World',\n 'accessing', {\n     world: function() { return this },\n     firstHand: function() { return this.hands && this.hands[0] },\n-    windowBounds:  function () {\n+    windowBounds: function(optWorldDOMNode) {\n         if (this.cachedWindowBounds) return this.cachedWindowBounds;\n-\n-        var canvas = this.renderContext().getMorphNode(),\n+        var canvas = optWorldDOMNode || this.renderContext().getMorphNode(),\n             topmost = document.documentElement,\n             body = document.body,\n             scale = 1 / this.getScale(),\n@@ -695,7 +694,9 @@ lively.morphic.Morph.subclass('lively.morphic.World',\n     },\n \n     displayOnElement: function(el) {\n-        this.renderContext().domInterface.removeAllChildrenOf(el);\n+        if (lively.Config.get(\"removeDOMContentBeforeWorldLoad\")) {\n+            this.renderContext().domInterface.removeAllChildrenOf(el);\n+        }\n         this.renderContext().setParentNode(el);\n         this.renderContextDispatch('append');\n         this.withAllSubmorphsDo(function(ea) {\n@@ -765,6 +766,11 @@ Object.extend(lively.morphic.World, {\n \n     current: function() { return this.currentWorld },\n \n+    registerWorld: function(world) {\n+        // make it THE world\n+        return this.currentWorld = world;\n+    },\n+\n     createOn: function(domElement, bounds) {\n         var world = new this();\n         bounds = bounds || new Rectangle(0,0,400,400);\n@@ -772,7 +778,7 @@ Object.extend(lively.morphic.World, {\n         world.displayOnElement(domElement)\n         world.applyStyle({fill: Color.gray.lighter()})\n         world.addHandMorph();\n-        this.currentWorld = world;\n+        this.registerWorld(world);\n         return world;\n     }\n });"

         },

         {

            "sha": "c5827a14f575f2d82e41943f18c1caee2fc19df8",

            "filename": "core/lively/morphic/Serialization.js",

            "status": "modified",

            "additions": 1,

            "deletions": 1,

            "changes": 2,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/morphic/Serialization.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/morphic/Serialization.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/morphic/Serialization.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -381,7 +381,7 @@ Object.extend(lively.morphic.World, {\n             isDoc = !domElementOrDocument.ownerDocument;\n         if (isDoc) world.displayOnDocument(domElementOrDocument);\n         else world.displayOnElement(domElementOrDocument);\n-        this.currentWorld = world;\n+        this.registerWorld(world)\n         return world;\n     },\n     fromJSO: function(jso) {"

         },

         {

            "sha": "935f694c22829d147de8259a6499e23a5def2063",

            "filename": "core/lively/persistence/BuildSpec.js",

            "status": "modified",

            "additions": 3,

            "deletions": 395,

            "changes": 398,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/persistence/BuildSpec.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/persistence/BuildSpec.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/persistence/BuildSpec.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -1,4 +1,4 @@\n-module('lively.persistence.BuildSpec').requires(\"lively.morphic.Widgets\", \"lively.morphic.Serialization\", \"lively.morphic.AdditionalMorphs\").toRun(function() {\n+module('lively.persistence.BuildSpec').requires(\"lively.morphic.Widgets\", \"lively.morphic.Serialization\", \"lively.morphic.AdditionalMorphs\", \"lively.morphic.Lists\").toRun(function() {\n \n Object.subclass('lively.persistence.SpecObject',\n 'properties', {\n@@ -335,401 +335,9 @@ Object.extend(lively.persistence.BuildSpec, {\n     Registry: new lively.persistence.SpecObjectRegistry()\n });\n \n-lively.morphic.Morph.addMethods(\n-'UI builder', {\n-\n-    buildSpecProperties: {\n-        name: {},\n-        doNotSerialize: {defaultValue: [], getter: function(morph, val) { if (!morph.hasOwnProperty(\"doNotSerialize\")) return []; return val && val.reject(function(ea) { return !Object.isString(ea) || ea.startsWith('$$'); }) }},\n-        doNotCopyProperties: {defaultValue: [], getter: function(morph, val) { if (!morph.hasOwnProperty(\"doNotCopyProperties\")) return []; return val && val.reject(function(ea) { return !Object.isString(ea) || ea.startsWith('$$'); }) }},\n-        grabbingEnabled: {defaultValue: undefined},\n-        draggingEnabled: {defaultValue: undefined},\n-        droppingEnabled: {defaultValue: undefined},\n-        halosEnabled: {defaultValue: true},\n-        _ClipMode: {defaultValue: 'visible'},\n-        _StyleSheet: {getter: function(morph, val) { return !val || Object.isString(val) ? val : val.getText(); }},\n-        _StyleClassNames: {},\n-        _Position: {defaultValue: lively.pt(0.0,0.0)},\n-        _Extent: {getter: function(morph) { return morph.getExtent(); }},\n-        _Fill: {defaultValue: null, getter: function(morph) { return morph.getFill(); }},\n-        _BorderColor: {defaultValue: Color.rgb(0,0,0), getter: function(morph) { return morph.getBorderColor(); }},\n-        _BorderWidth: {defaultValue: 0, getter: function(morph) { return morph.getBorderWidth(); }},\n-        _BorderStyle: {defaultValue: 'solid', getter: function(morph) { return morph.getBorderStyle(); }},\n-        _BorderRadius: {defaultValue: 0, getter: function(morph) { return morph.getBorderRadius(); }},\n-        _Opacity: {defaultValue: 1, getter: function(morph) { return morph.getOpacity(); }},\n-        _Rotation: {defaultValue: 0},\n-        _Scale: {defaultValue: 1},\n-        // excludes:\n-        submorphs: {exclude: true},\n-        showsHalos: {exclude: true},\n-        scripts: {exclude: true},\n-        id: {exclude: true},\n-        shape: {exclude: true},\n-        registeredForMouseEvents: {exclude: true},\n-        partsBinMetaInfo: {exclude: true},\n-        eventHandler: {exclude: true},\n-        derivationIds: {exclude: true},\n-        partTests: {exclude: true},\n-        moved: {exclude: true},\n-        _renderContext: {exclude: true},\n-        _isRendered: {exclude: true},\n-        owner: {exclude: true},\n-        cachedBounds: {exclude: true},\n-        isBeingDragged: {exclude: true},\n-        halos: {exclude: true},\n-        priorExtent: {exclude: true},\n-        distanceToDragEvent: {exclude: true},\n-        prevScroll: {exclude: true},\n-        _PreviousBorderWidth: {exclude: true},\n-        attributeConnections: {exclude: true},\n-        isLockOwner: {exclude: true},\n-        isInLayoutCycle: {exclude: true},\n-        modalMorph: {exclude: true},\n-        currentMenu: {exclude: true},\n-        layout: {\n-            defaultValue: {},\n-            getter: function(morph, val) {\n-                // FIXME this code should go into the layouter!\n-                var result = {};\n-                if (!val) return result;\n-                if (Object.isString(val)) { return val; }\n-                    Properties.forEachOwn(val, function(name, prop) {\n-                    if (name === \"layouter\" && prop.constructor) {\n-                        result.type = prop.constructor.type;\n-                        result.borderSize = prop.borderSize;\n-                        result.spacing = prop.spacing;\n-                        return;\n-                    }\n-                    result[name] = prop;\n-                });\n-                return result;\n-            },\n-            recreate: function(instance, spec) {\n-                var layout = instance.layout = {};\n-                if (!spec.layout) return;\n-                var layouterKlassName = Object.isString(spec.layout) ? spec.layout : spec.layout.type;\n-                if (layouterKlassName) {\n-                    var layouterKlass = lively.lookup(layouterKlassName);\n-                    layout.layouter = new layouterKlass();\n-                    layout.layouter.spacing = spec.layout.spacing;\n-                    layout.layouter.borderSize = spec.layout.borderSize;\n-                }\n-                var excludes = ['type', 'borderSize', 'spacing']\n-                Properties.forEachOwn(spec.layout, function(name, prop) {\n-                    if (!excludes.include(name)) layout[name] = prop; });\n-            }\n-        }\n-    },\n-\n-    getBuildSpecProperties: function(rawProps) {\n-        rawProps = rawProps || Object.mergePropertyInHierarchy(this, \"buildSpecProperties\");\n-        var props = Object.keys(rawProps).groupBy(function(key) {\n-                return rawProps[key].exclude ? 'excludes' : 'includes'; }),\n-            scripts = Functions.own(this).select(function(sel) {\n-                return this[sel].hasLivelyClosure; }, this),\n-            ownProps = Properties.own(this)\n-                       .withoutAll(props.excludes)\n-                       .reject(function(key) { return key.startsWith('$$'); });\n-        return props.includes.concat(ownProps).concat(scripts).uniq();\n-    },\n-\n-    buildSpec: function() {\n-        return lively.persistence.SpecObject.fromMorph(this);\n-    },\n-\n-    onFromBuildSpecCreated: Functions.Null\n-});\n-\n-lively.morphic.List.addMethods(\n-'UI builder', {\n-    buildSpecProperties: {\n-        itemList: {defaultValue: []},\n-        selectedIndexes: {defaultValue: []}\n-    },\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.setList(this.itemList || []);\n-    }\n-});\n-\n-lively.morphic.OldList.addMethods(\n-'UI builder', {\n-    buildSpecProperties: {\n-        itemList: {defaultValue: []}\n-    },\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.setList(this.itemList || []);\n-    }\n-});\n-\n-\n-lively.morphic.Text.addMethods(\n-'UI builder', {\n \n-    buildSpecProperties: {\n-        textString: {\n-            defaultValue: '',\n-            getter: function(morph, val) { return val || '' },\n-            recreate: function(instance, spec) {\n-                instance.textString = spec.textString;\n-                // important: emphasis after textString!\n-                if (spec.emphasis) instance.emphasizeRanges(spec.emphasis);\n-            }\n-        },\n-        emphasis: {\n-            getter: function(morph, val) {\n-                var styles = morph.getChunkStyles(),\n-                    ranges = morph.getChunkRanges();\n-                return ranges.collect(function(range, i) {\n-                        return [range[0], range[1], styles[i].asSpec()]; });\n-            },\n-            recreate: function(instance, spec) { /*see textString*/ }\n-        },\n-        isLabel: {defaultValue: false, recreate: function(instance, spec) { if (spec.isLabel) instance.beLabel(); }},\n-        _FontSize: {defaultValue: 10},\n-        fixedWidth: {defaultValue: false},\n-        fixedHeight: {defaultValue: false},\n-        allowsInput: {defaultValue: true},\n-        _FontFamily: {defaultValue: 'Arial'},\n-        _MaxTextWidth: {defaultValue: null},\n-        _MaxTextHeight: {defaultValue: null},\n-        textColor: {defaultValue: Color.rgb(0,0,0)},\n-        _Padding: {defaultValue: lively.Rectangle.inset(0)},\n-        _WhiteSpaceHandling: {defaultValue: \"pre-wrap\"},\n-        _MinTextWidth: {defaultValue: null},\n-        _MinTextHeight: {defaultValue: null},\n-        _WordBreak: {defaultValue: 'normal'},\n-        // excludes:\n-        cachedTextString: {exclude: true},\n-        savedTextString: {exclude: true},\n-        charsReplaced: {exclude: true},\n-        charsTyped: {exclude: true},\n-        lastFindLoc: {exclude: true},\n-        parseErrors: {exclude: true},\n-        textChunks: {exclude: true},\n-        priorSelectionRange: {exclude: true},\n-        previousSelection: {exclude: true},\n-        undoSelectionRange: {exclude: true}\n-    }\n-\n-});\n-\n-(function setupCodeEditor() {\n-    require('lively.ide.CodeEditor').toRun(function() {\n-        lively.morphic.CodeEditor.addMethods(\n-            'UI builder', {\n-                buildSpecProperties: {\n-                    textString: {defaultValue: '', getter: function(morph) { return morph.textString }},\n-                    theme: {\n-                        defaultValue: 'chrome',\n-                        getter: function(morph) { return morph.getTheme(); },\n-                        recreate: function(morph, spec) { morph.setTheme(spec.theme); }\n-                    },\n-                    textMode: {\n-                        defaultValue: 'text',\n-                        getter: function(morph) { return morph.getTextMode(); },\n-                        recreate: function(morph, spec) { morph.setTextMode(spec.textMode); }\n-                    },\n-                    // excludes\n-                    _isFocused: {exclude: true},\n-                    savedTextString: {exclude: true},\n-                    aceEditor: {exclude: true}\n-                }\n-            });\n-    });\n+(function loadBuildSpecMorphExtensions() {\n+    module('lively.persistence.BuildSpecMorphExtensions').load();\n })();\n \n-lively.morphic.Button.addMethods(\n-'UI builder', {\n-    buildSpecProperties: {\n-        submorphs: {\n-            exclude: true,\n-            filter: function(morph, submorphs) { return submorphs.without(morph.label); }\n-        },\n-        isActive: {defaultValue: true},\n-        label: {\n-            defaultValue: '',\n-            getter: function(morph, val) { return val.textString || ''; },\n-            recreate: function(instance, spec) { instance.ensureLabel(spec.label); }\n-        },\n-        style: {defaultValue: lively.morphic.Button.prototype.style}\n-    }\n-});\n-\n-lively.morphic.Window.addMethods(\n-'UI builder', {\n-    buildSpecProperties: {\n-        submorphs: {\n-            exclude: true,\n-            filter: function(morph, submorphs) {\n-                var handles = [morph.reframeHandle, morph.bottomReframeHandle, morph.rightReframeHandle];\n-                return submorphs.withoutAll(handles).without(morph.titleBar);\n-            }\n-        },\n-        titleBar: {\n-            getter: function(morph, val) { return val ? val.getTitle() : ''; },\n-            recreate: function(instance, spec) { instance.titleBar = instance.makeTitleBar(spec.titleBar, instance.getExtent().x); }\n-        },\n-        grabbingEnabled: {defaultValue: false},\n-        reframeHandle: {exclude: true},\n-        bottomReframeHandle: {exclude: true},\n-        rightReframeHandle: {exclude: true},\n-        targetMorph: {exclude: true}\n-    },\n-\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.makeReframeHandles();\n-        this.addMorph(this.titleBar);\n-        this.targetMorph = this.submorphs[0];\n-    }\n-\n-});\n-\n-\n-lively.morphic.MorphList.addMethods(\n-'buildspec', {\n-    onFromBuildSpecCreated: function() {\n-        this.setList(this.itemList || []);\n-    },\n-    buildSpecProperties: {\n-        itemList: {}\n-    }\n-});\n-\n-lively.morphic.Tree.addMethods(\n-'buildSpec', {\n-    buildSpecProperties: {\n-        childNodes: {exclude: true},\n-        icon: {exclude: true},\n-        isInLayoutCycle: false,\n-        item: {exclude: true},\n-        label: {exclude: true},\n-        node: {exclude: true}\n-    },\n-\n-    onBuildSpecCreated: function(buildSpec) {\n-        if (this.item && Object.isFunction(this.item.serializeExpr)) {\n-            buildSpec.item = item;\n-        }\n-    },\n-\n-    onFromBuildSpecCreated: function() {\n-        this.initializeLayout();\n-        this.disableDragging();\n-        this.setItem(this.item || {name: \"tree with no item\"});\n-    }\n-});\n-lively.morphic.Image.addMethods(\n-'buildSpec', {\n-    buildSpecProperties: {\n-        url: {getter: function(morph) { return morph.getImageURL(); }},\n-        useNativeExtent: {defaultValue: false}\n-    },\n-\n-    onFromBuildSpecCreated: function() {\n-        this.setImageURL(this.url, this.useNativeExtent);\n-    }\n-});\n-\n-Object.extend(lively.morphic.Morph, {\n-    fromSpec: function(object) {\n-        return lively.persistence.SpecObject.fromPlainObject(object).createMorph();\n-    },\n-\n-    fromSpecString: function(string) {\n-        return lively.persistence.SpecObject.fromString(object).createMorph();\n-    }\n-});\n-\n-lively.morphic.TabBar.addMethods(\n-'UI builder', {\n-    buildSpecProperties: {\n-        tabContainer: {exclude: true},\n-        tabs: {exclude: true}\n-    },\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.tabContainer = this.owner;\n-        this.tabs = this.submorphs.clone();\n-    }\n-});\n-lively.morphic.TabContainer.addMethods(\n-'UI builder', {\n-    buildSpecProperties: {\n-        tabBarStrategy: {\n-            getter: function(morph, val) { return morph.tabBarStrategy.constructor.type; },\n-            recreate: function(instance, spec) { instance.tabBarStrategy = new (lively.lookup(spec.tabBarStrategy))(); }\n-        }\n-    },\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.tabBar = this.submorphs.detect(function(ea) { return ea.isTabBar; });\n-    }\n-});\n-lively.morphic.Tab.addMethods(\n-'UI builder', {\n-    buildSpecProperties: {\n-        label: {\n-            defaultValue: '',\n-            getter: function(morph, val) { return val.textString || ''; },\n-            exclude: true\n-        },\n-        pane: { // index of the pane in tabContainer.submorphs\n-            defaultValue: -1,\n-            getter: function(morph, val) { \n-                return morph.tabContainer.submorphs.indexOf(val); }\n-        },\n-        tabBar: {exclude: true},\n-        tabContainer: {exclude: true}\n-    },\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.tabContainer = this.ownerChain().detect(function(ea) { return ea.isTabContainer; });\n-        this.pane = this.tabContainer.submorphs[this.pane];\n-        this.tabBar = this.tabContainer.tabBar\n-        this.initializeLabel(this.label); \n-    }\n-});\n-lively.morphic.TabPane.addMethods(\n-'UI builder', {\n-    buildSpecProperties: {\n-        tab: { // index of the tab in tabBar.submorphs\n-            defaultValue: -1,\n-            getter: function(morph, val) { return morph.tabBar.submorphs.indexOf(val); }\n-        },\n-        tabContainer: {exclude: true},\n-        tabBar: {exclude: true}\n-    },\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.tabContainer = this.ownerChain().detect(function(ea) { return ea.isTabContainer; })\n-        this.tabBar = this.tabContainer.getTabBar();\n-        this.tab = this.tabBar.submorphs[this.tab];\n-    }\n-});\n-lively.morphic.Slider.addMethods(\n-'UI builder', {\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.sliderKnob = this.submorphs.detect(function(ea) { return ea.isSliderKnob; });\n-    }\n-});\n-lively.morphic.SliderKnob.addMethods(\n-'UI builder', {\n-    onFromBuildSpecCreated: function($super) {\n-        $super();\n-        this.slider = this.ownerChain().detect(function(ea) { return ea.isSlider; });\n-    }\n-});\n-\n-lively.morphic.HorizontalDivider.addMethods(\n-'buildSpec', {\n-    buildSpecProperties: {\n-        scalingAbove: {defaultValue: []},\n-        scalingBelow: {defaultValue: []}\n-    }\n-});\n-\n }) // end of moduled of module"

         },

         {

            "sha": "a9e929c02dc45dcd385b2c02fa784e7e249053f6",

            "filename": "core/lively/persistence/BuildSpecMorphExtensions.js",

            "status": "added",

            "additions": 399,

            "deletions": 0,

            "changes": 399,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/persistence/BuildSpecMorphExtensions.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/core/lively/persistence/BuildSpecMorphExtensions.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively…e/BuildSpecMorphExtensions.js?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -0,0 +1,399 @@\n+module('lively.persistence.BuildSpecMorphExtensions').requires(\"lively.morphic.Widgets\", \"lively.morphic.Serialization\", \"lively.morphic.AdditionalMorphs\", \"lively.morphic.Lists\").toRun(function() {\n+\n+lively.morphic.Morph.addMethods(\n+'UI builder', {\n+\n+    buildSpecProperties: {\n+        name: {},\n+        doNotSerialize: {defaultValue: [], getter: function(morph, val) { if (!morph.hasOwnProperty(\"doNotSerialize\")) return []; return val && val.reject(function(ea) { return !Object.isString(ea) || ea.startsWith('$$'); }) }},\n+        doNotCopyProperties: {defaultValue: [], getter: function(morph, val) { if (!morph.hasOwnProperty(\"doNotCopyProperties\")) return []; return val && val.reject(function(ea) { return !Object.isString(ea) || ea.startsWith('$$'); }) }},        grabbingEnabled: {defaultValue: undefined},\n+        draggingEnabled: {defaultValue: undefined},\n+        droppingEnabled: {defaultValue: undefined},\n+        halosEnabled: {defaultValue: true},\n+        _ClipMode: {defaultValue: 'visible'},\n+        _StyleSheet: {getter: function(morph, val) { return !val || Object.isString(val) ? val : val.getText(); }},\n+        _StyleClassNames: {},\n+        _Position: {defaultValue: lively.pt(0.0,0.0)},\n+        _Extent: {getter: function(morph) { return morph.getExtent(); }},\n+        _Fill: {defaultValue: null, getter: function(morph) { return morph.getFill(); }},\n+        _BorderColor: {defaultValue: Color.rgb(0,0,0), getter: function(morph) { return morph.getBorderColor(); }},\n+        _BorderWidth: {defaultValue: 0, getter: function(morph) { return morph.getBorderWidth(); }},\n+        _BorderStyle: {defaultValue: 'solid', getter: function(morph) { return morph.getBorderStyle(); }},\n+        _BorderRadius: {defaultValue: 0, getter: function(morph) { return morph.getBorderRadius(); }},\n+        _Opacity: {defaultValue: 1, getter: function(morph) { return morph.getOpacity(); }},\n+        _Rotation: {defaultValue: 0},\n+        _Scale: {defaultValue: 1},\n+        // excludes:\n+        submorphs: {exclude: true},\n+        showsHalos: {exclude: true},\n+        scripts: {exclude: true},\n+        id: {exclude: true},\n+        shape: {exclude: true},\n+        registeredForMouseEvents: {exclude: true},\n+        partsBinMetaInfo: {exclude: true},\n+        eventHandler: {exclude: true},\n+        derivationIds: {exclude: true},\n+        partTests: {exclude: true},\n+        moved: {exclude: true},\n+        _renderContext: {exclude: true},\n+        _isRendered: {exclude: true},\n+        owner: {exclude: true},\n+        cachedBounds: {exclude: true},\n+        isBeingDragged: {exclude: true},\n+        halos: {exclude: true},\n+        priorExtent: {exclude: true},\n+        distanceToDragEvent: {exclude: true},\n+        prevScroll: {exclude: true},\n+        _PreviousBorderWidth: {exclude: true},\n+        attributeConnections: {exclude: true},\n+        isLockOwner: {exclude: true},\n+        isInLayoutCycle: {exclude: true},\n+        modalMorph: {exclude: true},\n+        currentMenu: {exclude: true},\n+        layout: {\n+            defaultValue: {},\n+            getter: function(morph, val) {\n+                // FIXME this code should go into the layouter!\n+                var result = {};\n+                if (!val) return result;\n+                if (Object.isString(val)) { return val; }\n+                    Properties.forEachOwn(val, function(name, prop) {\n+                    if (name === \"layouter\" && prop.constructor) {\n+                        result.type = prop.constructor.type;\n+                        result.borderSize = prop.borderSize;\n+                        result.spacing = prop.spacing;\n+                        return;\n+                    }\n+                    result[name] = prop;\n+                });\n+                return result;\n+            },\n+            recreate: function(instance, spec) {\n+                var layout = instance.layout = {};\n+                if (!spec.layout) return;\n+                var layouterKlassName = Object.isString(spec.layout) ? spec.layout : spec.layout.type;\n+                if (layouterKlassName) {\n+                    var layouterKlass = lively.lookup(layouterKlassName);\n+                    layout.layouter = new layouterKlass();\n+                    layout.layouter.spacing = spec.layout.spacing;\n+                    layout.layouter.borderSize = spec.layout.borderSize;\n+                }\n+                var excludes = ['type', 'borderSize', 'spacing']\n+                Properties.forEachOwn(spec.layout, function(name, prop) {\n+                    if (!excludes.include(name)) layout[name] = prop; });\n+            }\n+        }\n+    },\n+\n+    getBuildSpecProperties: function(rawProps) {\n+        rawProps = rawProps || Object.mergePropertyInHierarchy(this, \"buildSpecProperties\");\n+        var props = Object.keys(rawProps).groupBy(function(key) {\n+                return rawProps[key].exclude ? 'excludes' : 'includes'; }),\n+            scripts = Functions.own(this).select(function(sel) {\n+                return this[sel].hasLivelyClosure; }, this),\n+            ownProps = Properties.own(this)\n+                       .withoutAll(props.excludes)\n+                       .reject(function(key) { return key.startsWith('$$'); });\n+        return props.includes.concat(ownProps).concat(scripts).uniq();\n+    },\n+\n+    buildSpec: function() {\n+        return lively.persistence.SpecObject.fromMorph(this);\n+    },\n+\n+    onFromBuildSpecCreated: Functions.Null\n+});\n+\n+lively.morphic.List.addMethods(\n+'UI builder', {\n+    buildSpecProperties: {\n+        itemList: {defaultValue: []},\n+        selectedIndexes: {defaultValue: []}\n+    },\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.setList(this.itemList || []);\n+    }\n+});\n+\n+lively.morphic.OldList.addMethods(\n+'UI builder', {\n+    buildSpecProperties: {\n+        itemList: {defaultValue: []}\n+    },\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.setList(this.itemList || []);\n+    }\n+});\n+\n+\n+lively.morphic.Text.addMethods(\n+'UI builder', {\n+\n+    buildSpecProperties: {\n+        textString: {\n+            defaultValue: '',\n+            getter: function(morph, val) { return val || '' },\n+            recreate: function(instance, spec) {\n+                instance.textString = spec.textString;\n+                // important: emphasis after textString!\n+                if (spec.emphasis) instance.emphasizeRanges(spec.emphasis);\n+            }\n+        },\n+        emphasis: {\n+            getter: function(morph, val) {\n+                var styles = morph.getChunkStyles(),\n+                    ranges = morph.getChunkRanges();\n+                return ranges.collect(function(range, i) {\n+                        return [range[0], range[1], styles[i].asSpec()]; });\n+            },\n+            recreate: function(instance, spec) { /*see textString*/ }\n+        },\n+        isLabel: {defaultValue: false, recreate: function(instance, spec) { if (spec.isLabel) instance.beLabel(); }},\n+        _FontSize: {defaultValue: 10},\n+        fixedWidth: {defaultValue: false},\n+        fixedHeight: {defaultValue: false},\n+        allowsInput: {defaultValue: true},\n+        _FontFamily: {defaultValue: 'Arial'},\n+        _MaxTextWidth: {defaultValue: null},\n+        _MaxTextHeight: {defaultValue: null},\n+        textColor: {defaultValue: Color.rgb(0,0,0)},\n+        _Padding: {defaultValue: lively.Rectangle.inset(0)},\n+        _WhiteSpaceHandling: {defaultValue: \"pre-wrap\"},\n+        _MinTextWidth: {defaultValue: null},\n+        _MinTextHeight: {defaultValue: null},\n+        _WordBreak: {defaultValue: 'normal'},\n+        // excludes:\n+        cachedTextString: {exclude: true},\n+        savedTextString: {exclude: true},\n+        charsReplaced: {exclude: true},\n+        charsTyped: {exclude: true},\n+        lastFindLoc: {exclude: true},\n+        parseErrors: {exclude: true},\n+        textChunks: {exclude: true},\n+        priorSelectionRange: {exclude: true},\n+        previousSelection: {exclude: true},\n+        undoSelectionRange: {exclude: true}\n+    }\n+\n+});\n+\n+(function setupCodeEditor() {\n+    require('lively.ide.CodeEditor').toRun(function() {\n+        lively.morphic.CodeEditor.addMethods(\n+            'UI builder', {\n+                buildSpecProperties: {\n+                    textString: {defaultValue: '', getter: function(morph) { return morph.textString }},\n+                    theme: {\n+                        defaultValue: 'chrome',\n+                        getter: function(morph) { return morph.getTheme(); },\n+                        recreate: function(morph, spec) { morph.setTheme(spec.theme); }\n+                    },\n+                    textMode: {\n+                        defaultValue: 'text',\n+                        getter: function(morph) { return morph.getTextMode(); },\n+                        recreate: function(morph, spec) { morph.setTextMode(spec.textMode); }\n+                    },\n+                    // excludes\n+                    _isFocused: {exclude: true},\n+                    savedTextString: {exclude: true},\n+                    aceEditor: {exclude: true}\n+                }\n+            });\n+    });\n+})();\n+\n+lively.morphic.Button.addMethods(\n+'UI builder', {\n+    buildSpecProperties: {\n+        submorphs: {\n+            exclude: true,\n+            filter: function(morph, submorphs) { return submorphs.without(morph.label); }\n+        },\n+        isActive: {defaultValue: true},\n+        label: {\n+            defaultValue: '',\n+            getter: function(morph, val) { return val.textString || ''; },\n+            recreate: function(instance, spec) { instance.ensureLabel(spec.label); }\n+        },\n+        style: {defaultValue: lively.morphic.Button.prototype.style}\n+    }\n+});\n+\n+lively.morphic.Window.addMethods(\n+'UI builder', {\n+    buildSpecProperties: {\n+        submorphs: {\n+            exclude: true,\n+            filter: function(morph, submorphs) {\n+                var handles = [morph.reframeHandle, morph.bottomReframeHandle, morph.rightReframeHandle];\n+                return submorphs.withoutAll(handles).without(morph.titleBar);\n+            }\n+        },\n+        titleBar: {\n+            getter: function(morph, val) { return val ? val.getTitle() : ''; },\n+            recreate: function(instance, spec) { instance.titleBar = instance.makeTitleBar(spec.titleBar, instance.getExtent().x); }\n+        },\n+        grabbingEnabled: {defaultValue: false},\n+        reframeHandle: {exclude: true},\n+        bottomReframeHandle: {exclude: true},\n+        rightReframeHandle: {exclude: true},\n+        targetMorph: {exclude: true}\n+    },\n+\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.makeReframeHandles();\n+        this.addMorph(this.titleBar);\n+        this.targetMorph = this.submorphs[0];\n+    }\n+\n+});\n+\n+\n+lively.morphic.MorphList.addMethods(\n+'buildspec', {\n+    onFromBuildSpecCreated: function() {\n+        this.setList(this.itemList || []);\n+    },\n+    buildSpecProperties: {\n+        itemList: {}\n+    }\n+});\n+\n+lively.morphic.Tree.addMethods(\n+'buildSpec', {\n+    buildSpecProperties: {\n+        childNodes: {exclude: true},\n+        icon: {exclude: true},\n+        isInLayoutCycle: false,\n+        item: {exclude: true},\n+        label: {exclude: true},\n+        node: {exclude: true}\n+    },\n+\n+    onBuildSpecCreated: function(buildSpec) {\n+        if (this.item && Object.isFunction(this.item.serializeExpr)) {\n+            buildSpec.item = item;\n+        }\n+    },\n+\n+    onFromBuildSpecCreated: function() {\n+        this.initializeLayout();\n+        this.disableDragging();\n+        this.setItem(this.item || {name: \"tree with no item\"});\n+    }\n+});\n+lively.morphic.Image.addMethods(\n+'buildSpec', {\n+    buildSpecProperties: {\n+        url: {getter: function(morph) { return morph.getImageURL(); }},\n+        useNativeExtent: {defaultValue: false}\n+    },\n+\n+    onFromBuildSpecCreated: function() {\n+        this.setImageURL(this.url, this.useNativeExtent);\n+    }\n+});\n+\n+Object.extend(lively.morphic.Morph, {\n+    fromSpec: function(object) {\n+        return lively.persistence.SpecObject.fromPlainObject(object).createMorph();\n+    },\n+\n+    fromSpecString: function(string) {\n+        return lively.persistence.SpecObject.fromString(object).createMorph();\n+    }\n+});\n+\n+lively.morphic.TabBar.addMethods(\n+'UI builder', {\n+    buildSpecProperties: {\n+        tabContainer: {exclude: true},\n+        tabs: {exclude: true}\n+    },\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.tabContainer = this.owner;\n+        this.tabs = this.submorphs.clone();\n+    }\n+});\n+lively.morphic.TabContainer.addMethods(\n+'UI builder', {\n+    buildSpecProperties: {\n+        tabBarStrategy: {\n+            getter: function(morph, val) { return morph.tabBarStrategy.constructor.type; },\n+            recreate: function(instance, spec) { instance.tabBarStrategy = new (lively.lookup(spec.tabBarStrategy))(); }\n+        }\n+    },\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.tabBar = this.submorphs.detect(function(ea) { return ea.isTabBar; });\n+    }\n+});\n+lively.morphic.Tab.addMethods(\n+'UI builder', {\n+    buildSpecProperties: {\n+        label: {\n+            defaultValue: '',\n+            getter: function(morph, val) { return val.textString || ''; },\n+            exclude: true\n+        },\n+        pane: { // index of the pane in tabContainer.submorphs\n+            defaultValue: -1,\n+            getter: function(morph, val) { \n+                return morph.tabContainer.submorphs.indexOf(val); }\n+        },\n+        tabBar: {exclude: true},\n+        tabContainer: {exclude: true}\n+    },\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.tabContainer = this.ownerChain().detect(function(ea) { return ea.isTabContainer; });\n+        this.pane = this.tabContainer.submorphs[this.pane];\n+        this.tabBar = this.tabContainer.tabBar\n+        this.initializeLabel(this.label); \n+    }\n+});\n+lively.morphic.TabPane.addMethods(\n+'UI builder', {\n+    buildSpecProperties: {\n+        tab: { // index of the tab in tabBar.submorphs\n+            defaultValue: -1,\n+            getter: function(morph, val) { return morph.tabBar.submorphs.indexOf(val); }\n+        },\n+        tabContainer: {exclude: true},\n+        tabBar: {exclude: true}\n+    },\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.tabContainer = this.ownerChain().detect(function(ea) { return ea.isTabContainer; })\n+        this.tabBar = this.tabContainer.getTabBar();\n+        this.tab = this.tabBar.submorphs[this.tab];\n+    }\n+});\n+lively.morphic.Slider.addMethods(\n+'UI builder', {\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.sliderKnob = this.submorphs.detect(function(ea) { return ea.isSliderKnob; });\n+    }\n+});\n+lively.morphic.SliderKnob.addMethods(\n+'UI builder', {\n+    onFromBuildSpecCreated: function($super) {\n+        $super();\n+        this.slider = this.ownerChain().detect(function(ea) { return ea.isSlider; });\n+    }\n+});\n+\n+lively.morphic.HorizontalDivider.addMethods(\n+'buildSpec', {\n+    buildSpecProperties: {\n+        scalingAbove: {defaultValue: []},\n+        scalingBelow: {defaultValue: []}\n+    }\n+});\n+\n+}) // end of moduled of module"

         },

         {

            "sha": "164165a622fae53a6326c3af99618ae4e4882dcc",

            "filename": "index.vwf.config.yaml",

            "status": "added",

            "additions": 18,

            "deletions": 0,

            "changes": 18,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/index.vwf.config.yaml",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/index.vwf.config.yaml",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/index.vwf.config.yaml?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -0,0 +1,18 @@\n+# Copyright 2013 United States Government, as represented by the Secretary of Defense, Under\n+# Secretary of Defense (Personnel & Readiness).\n+# \n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+# in compliance with the License. You may obtain a copy of the License at\n+# \n+#   http://www.apache.org/licenses/LICENSE-2.0\n+# \n+# Unless required by applicable law or agreed to in writing, software distributed under the License\n+# is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+# or implied. See the License for the specific language governing permissions and limitations under\n+# the License.\n+\n+---\n+info:\n+  title: \"VWF meets Lively\"\n+model:\n+  vwf/model/morph:"

         },

         {

            "sha": "c90eb498bd53ff840893405e0c76e10e458b24c6",

            "filename": "index.vwf.html",

            "status": "added",

            "additions": 11,

            "deletions": 0,

            "changes": 11,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/index.vwf.html",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/index.vwf.html",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/index.vwf.html?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -0,0 +1,11 @@\n+<!DOCTYPE html><html>\n+<head><title>blank.html<\/title><\/head>\n+<body>\n+  <script type=\"text/javascript\">\n+      window.Config = window.Config || {\n+        codeBase: document.URL + 'core/',\n+        rootPath: document.URL\n+      }\n+  <\/script>\n+  <script type=\"text/javascript\" src=\"core/lively/bootstrap.js\"><\/script>\n+<\/body><\/html>"

         },

         {

            "sha": "f5d515a408e95a14dacbec5868943795246a1adf",

            "filename": "index.vwf.yaml",

            "status": "added",

            "additions": 17,

            "deletions": 0,

            "changes": 17,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/index.vwf.yaml",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/0bca47a3fd60a09db93a6dd49b77c8e547ad911f/index.vwf.yaml",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/index.vwf.yaml?ref=0bca47a3fd60a09db93a6dd49b77c8e547ad911f",

            "patch": "@@ -0,0 +1,17 @@\n+--- \n+extends: http://vwf.example.com/node.vwf\n+properties:\n+  p: \"test\"\n+children:\n+  morph:\n+    extends: http://vwf.example.com/morph.vwf\n+    properties:\n+      classname: \"lively.morphic.Box\"\n+      position: \"lively.pt(10,10)\"\n+      rotation: 0\n+      opacity: 1\n+      extent: \"lively.pt(100,50)\"\n+      fill: \"Color.blue\"\n+      borderWidth: 2\n+scripts:\n+- |"

         }

      ]

   },

   {

      "sha": "fe8537b62f2d37d082985429e9eaffcc61216017",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T22:46:26Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-27T22:46:26Z"

         },

         "message": "prev/next paragraph shortcut fix",

         "tree": {

            "sha": "68e37557539cf4912dba1fb4f9cbcb0137b6265b",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/68e37557539cf4912dba1fb4f9cbcb0137b6265b"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/fe8537b62f2d37d082985429e9eaffcc61216017",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/fe8537b62f2d37d082985429e9eaffcc61216017",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/fe8537b62f2d37d082985429e9eaffcc61216017",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/fe8537b62f2d37d082985429e9eaffcc61216017/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "3376e25424e5db8ab7b68d687f64e698320465f6",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/3376e25424e5db8ab7b68d687f64e698320465f6",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/3376e25424e5db8ab7b68d687f64e698320465f6"

         }

      ],

      "stats": {

         "total": 4,

         "additions": 2,

         "deletions": 2

      },

      "files": [

         {

            "sha": "ee60a3e3d6c0854cac7f40bda239c3d2b0d69672",

            "filename": "core/lively/ide/codeeditor/Keyboard.js",

            "status": "modified",

            "additions": 2,

            "deletions": 2,

            "changes": 4,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/fe8537b62f2d37d082985429e9eaffcc61216017/core/lively/ide/codeeditor/Keyboard.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/fe8537b62f2d37d082985429e9eaffcc61216017/core/lively/ide/codeeditor/Keyboard.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/codeeditor/Keyboard.js?ref=fe8537b62f2d37d082985429e9eaffcc61216017",

            "patch": "@@ -381,7 +381,7 @@ Object.subclass('lively.ide.CodeEditor.KeyboardShortcuts',\n                 readOnly: true\n             }, {\n                 name: 'gotoNextParagraph',\n-                bindKey: 'Ctrl-Up',\n+                bindKey: 'Ctrl-Down',\n                 exec: function(ed) {\n                     var pos = ed.getCursorPosition(), found = -1;\n                     function isEmptyLine(line) { return /^\\s*$/.test(line); }\n@@ -395,7 +395,7 @@ Object.subclass('lively.ide.CodeEditor.KeyboardShortcuts',\n                 readOnly: true\n             }, {\n                 name: 'gotoPrevParagraph',\n-                bindKey: 'Ctrl-Down',\n+                bindKey: 'Ctrl-Up',\n                 exec: function(ed) {\n                     function isEmptyLine(line) { return /^\\s*$/.test(line); }\n                     var pos = ed.getCursorPosition(), found = -1,"

         }

      ]

   },

   {

      "sha": "453e2601cf2ed3c2213e9deffe88488cbc21f11a",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-28T14:02:49Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-28T14:02:49Z"

         },

         "message": "network: some cleanup",

         "tree": {

            "sha": "4d77a5f2b5c8c1b9957f432f89ee517731a031bc",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/4d77a5f2b5c8c1b9957f432f89ee517731a031bc"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/453e2601cf2ed3c2213e9deffe88488cbc21f11a",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/453e2601cf2ed3c2213e9deffe88488cbc21f11a",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/453e2601cf2ed3c2213e9deffe88488cbc21f11a",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/453e2601cf2ed3c2213e9deffe88488cbc21f11a/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "fe8537b62f2d37d082985429e9eaffcc61216017",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/fe8537b62f2d37d082985429e9eaffcc61216017",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/fe8537b62f2d37d082985429e9eaffcc61216017"

         }

      ],

      "stats": {

         "total": 34,

         "additions": 17,

         "deletions": 17

      },

      "files": [

         {

            "sha": "846df990214068494209aef44fd17b0a88c393ef",

            "filename": "core/lively/Network.js",

            "status": "modified",

            "additions": 17,

            "deletions": 17,

            "changes": 34,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/453e2601cf2ed3c2213e9deffe88488cbc21f11a/core/lively/Network.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/453e2601cf2ed3c2213e9deffe88488cbc21f11a/core/lively/Network.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/Network.js?ref=453e2601cf2ed3c2213e9deffe88488cbc21f11a",

            "patch": "@@ -232,7 +232,6 @@ Object.subclass('URL', {\n         return this.hostname === url.hostname ? this.relativePathFrom(url) : this.pathname.replace(/^\\/?/, '');\n     },\n \n-\n     svnWorkspacePath: function() {\n         // heuristics to figure out the Subversion path\n         var path = this.pathname;\n@@ -295,6 +294,7 @@ Object.subclass('URL', {\n     },\n \n     asWebResource: function() { return new WebResource(this) },\n+\n     asModuleName: function() {\n         var urlString = this.withRelativePartsResolved().toString(),\n             basePrefix = urlString.substring(0, Config.codeBase.length),\n@@ -418,6 +418,7 @@ Object.extend(URL, {\n         Global.URL[name] = Global._URL[name];\n     });\n })();\n+\n Object.subclass('NetRequestStatus',\n 'documentation', {\n     documentation: \"nice parsed status information, returned by NetRequest.getStatus when request done\",\n@@ -1004,8 +1005,6 @@ Resource.subclass('SVNResource', {\n         }\n     },\n \n-\n-\n     withBaselineUriDo: function(rev, doFunc) {\n         var tempUrl = this.getURL();\n         this.setURL(this.createVersionURLString(rev));\n@@ -1015,7 +1014,7 @@ Resource.subclass('SVNResource', {\n \n     createVersionURLString: function(rev) {\n         return this.repoUrl + '/!svn/bc/' + rev + '/' + this.getLocalUrl();\n-    },\n+    }\n \n });\n \n@@ -1073,9 +1072,10 @@ Object.subclass('SVNVersionInfo', {\n         return Strings.format('new SVNVersionInfo({rev: %s, url: %s, date: %s, author: %s, change: %s, fileSize: %s})',\n         this.rev, toExpression(this.url), toExpression(this.date),\n         toExpression(this.author), toExpression(this.change), toExpression(this.fileSize));\n-    },\n+    }\n \n });\n+\n Object.extend(SVNVersionInfo, {\n     fromPropfindNode: function(node) {\n         // FIXME cleanup --> Similar code exists  in lively.Network -> pvtSetMeta...sth\n@@ -1256,16 +1256,16 @@ Object.subclass('WebResource',\n \n         function onProgress(evt) {\n             webR.progressEvent = evt;\n-            // var percentComplete = (e.position / e.totalSize)*100;\n+            // var percentComplete = (e.position / e.totalSize)*100;\n         };\n         // register event handlers\n         req.onreadystatechange = onReadyStateChange;\n \n         if (method === 'PUT' || method === 'POST') {\n             req.upload.addEventListener(\"progress\", onProgress, false);\n-            // req.upload.addEventListener(\"load\", transferComplete, false);\n-            // req.upload.addEventListener(\"error\", transferFailed, false);\n-            // req.upload.addEventListener(\"abort\", transferCanceled, false);\n+            // req.upload.addEventListener(\"load\", transferComplete, false);\n+            // req.upload.addEventListener(\"error\", transferFailed, false);\n+            // req.upload.addEventListener(\"abort\", transferCanceled, false);\n         } else {\n             req.addEventListener(\"progress\", onProgress, false);\n         }\n@@ -1366,9 +1366,9 @@ Object.subclass('WebResource',\n         // var labelFunc = Object.isString(labelOrFunc) ?\n             // function() { return labelOrFunc } : labelOrFunc;\n         var progressBar = lively.morphic.World.current().addStatusProgress(label);\n-        connect(this, 'progressEvent', progressBar, 'setValue',\n+        lively.bindings.connect(this, 'progressEvent', progressBar, 'setValue',\n             {converter: function(rpe) { return (rpe.loaded / rpe.total) }});\n-        connect(this, 'status', progressBar, 'remove', {\n+        lively.bindings.connect(this, 'status', progressBar, 'remove', {\n             updater: function($upd, status) { if (status.isDone()) $upd() }});\n         return this;\n     }\n@@ -1453,7 +1453,7 @@ Object.subclass('WebResource',\n         // location XML is written to content/contentDocument\n         var helper = new WebResource(this.getURL());\n         helper.setSync(this.isSync())\n-        connect(helper, 'revAndLocations', this, 'get', {\n+        lively.bindings.connect(helper, 'revAndLocations', this, 'get', {\n             updater: function($upd, revAndPath) { $upd(rev, contentType, revAndPath[rev]) },\n             varMapping: {rev: rev, contentType: contentType}});\n         helper.getLocationInRev(rev, this.headRevision);\n@@ -1478,7 +1478,7 @@ Object.subclass('WebResource',\n         // location XML is written to content/contentDocument\n         var helper = new WebResource(this.getURL());\n         helper.setSync(this.isSync())\n-        connect(helper, 'revAndLocations', this, 'get', {\n+        lively.bindings.connect(helper, 'revAndLocations', this, 'get', {\n             updater: function($upd, revAndPath) { $upd(rev, contentType, revAndPath[rev]) },\n             varMapping: {rev: rev, contentType: contentType}});\n         helper.getLocationInRev(rev, this.headRevision);\n@@ -1590,8 +1590,8 @@ Object.subclass('WebResource',\n                 // would not be updated but its URL would not point to the file in the\n                 // history. Using the global headRev fixes this.\n                 var repoWebR = new WebResource(res.repoUrl);\n-                connect(repoWebR, 'headRevision', this, 'headRevision', {removeAfterUpdate: true});\n-                connect(this, 'headRevision', this, 'getVersions', {removeAfterUpdate: true});\n+                lively.bindings.connect(repoWebR, 'headRevision', this, 'headRevision', {removeAfterUpdate: true});\n+                lively.bindings.connect(this, 'headRevision', this, 'getVersions', {removeAfterUpdate: true});\n                 repoWebR.getHeadRevision();\n                 return this;\n             }\n@@ -1636,7 +1636,7 @@ Object.subclass('WebResource',\n                             '<S:peg-revision>%s<\/S:peg-revision>' +\n                             '<S:location-revision>%s<\/S:location-revision>' +\n                         '<\/S:get-locations>', headRev, rev);\n-                    connect(self, 'contentDocument', self, 'pvtProcessForLocationRequest', {\n+                    lively.bindings.connect(self, 'contentDocument', self, 'pvtProcessForLocationRequest', {\n                         removeAfterUpdate: true});\n                     self.report(content);\n                 }\n@@ -1644,7 +1644,7 @@ Object.subclass('WebResource',\n         if (this.headRevision) {\n             reportRequester.action(this.headRevision)\n         } else {\n-            connect(self, 'headRevision', reportRequester, 'action', {removeAfterUpdate: true});\n+            lively.bindings.connect(self, 'headRevision', reportRequester, 'action', {removeAfterUpdate: true});\n             this.getHeadRevision();\n         }\n         return this;"

         }

      ]

   },

   {

      "sha": "65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-28T14:11:47Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-28T14:18:28Z"

         },

         "message": "worker: Firefox compatibility",

         "tree": {

            "sha": "9746d4dff08293e4c1386fd206b61a5edc743850",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/9746d4dff08293e4c1386fd206b61a5edc743850"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "453e2601cf2ed3c2213e9deffe88488cbc21f11a",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/453e2601cf2ed3c2213e9deffe88488cbc21f11a",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/453e2601cf2ed3c2213e9deffe88488cbc21f11a"

         }

      ],

      "stats": {

         "total": 77,

         "additions": 56,

         "deletions": 21

      },

      "files": [

         {

            "sha": "8ef7cce438d44dd7656f3f9aea43042cf1149486",

            "filename": "core/lively/defaultconfig.js",

            "status": "modified",

            "additions": 7,

            "deletions": 2,

            "changes": 9,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/defaultconfig.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/defaultconfig.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/defaultconfig.js?ref=65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

            "patch": "@@ -67,7 +67,9 @@ Global.UserAgent = {\n     touchIsMouse: false,\n \n     isNodejs: (Global.process && !!Global.process.versions.node)\n-        || Global.navigator.userAgent.indexOf(\"Node.js\") !== -1\n+            || Global.navigator.userAgent.indexOf(\"Node.js\") !== -1,\n+\n+    isWorker: typeof importScripts !== 'undefined'\n }\n \n })(typeof Global !== 'undefined' ? Global : window);\n@@ -307,6 +309,9 @@ Global.Config = {\n (function addConfigOptions(Config, UserAgent, ExistingConfig) {\n \n // support for loading from blob urls, e.g. in workers\n+// note that workers can also get the location spec passed in as an option so\n+// that blob parsing shouldn't be necessary. Also, in Firefox blob parsing\n+// doesn't work.\n if (Config.location.protocol.indexOf('blob') > -1) {\n     var isEncoded = !!Config.location.pathname.match(/https?%3A/);\n     var decoded = Config.location.pathname;\n@@ -354,7 +359,7 @@ Config.addOptions(\n \n 'server.nodejs', [\n     [\"nodeJSURL\", Config.location.protocol + '//' + Config.location.host + '/nodejs'],\n-    [\"nodeJSPath\", '/home/nodejs/']\n+    [/*This is deprecated*/\"nodeJSPath\", '/home/nodejs/']\n ],\n \n 'lively.persistence', ["

         },

         {

            "sha": "f08f06ba38dcb9515f2402c6e7917e54cf02b626",

            "filename": "core/lively/ide/CommandLineInterface.js",

            "status": "modified",

            "additions": 7,

            "deletions": 4,

            "changes": 11,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/ide/CommandLineInterface.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/ide/CommandLineInterface.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/CommandLineInterface.js?ref=65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

            "patch": "@@ -314,7 +314,11 @@ Object.extend(lively.ide.CommandLineInterface, {\n     },\n     // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n \n-    commandLineServerURL: URL.create(Config.nodeJSURL).asDirectory().withFilename('CommandLineServer/'),\n+    commandLineServerURL: (function() {\n+        try {\n+            return URL.create(Config.nodeJSURL).asDirectory().withFilename('CommandLineServer/');\n+        } catch (e) { console.error(e + '\\n' + e.stack); }\n+    })(),\n \n     parseCommandIntoCommandAndArgs: function(cmd) {\n         // lively.ide.CommandLineInterface.parseCommandIntoCommandAndArgs('grep o -')\n@@ -581,7 +585,7 @@ Object.extend(lively.ide.CommandLineInterface, {\n \n // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n // file search related\n-module(\"lively.ide.CommandLineSearch\");\n+lively.module(\"lively.ide.CommandLineSearch\");\n \n Object.subclass(\"lively.ide.CommandLineSearch.FileInfo\",\n // see lively.ide.CommandLineSearch.parseDirectoryList\n@@ -1058,7 +1062,6 @@ Object.extend(lively.ide.FilePatchHunk, {\n     read: function(patchString) { return new this().read(patchString); }\n });\n \n-\n lively.ide.CommandLineInterface.GitSupport = {\n     getScriptBaseName: function(sessionId) {\n         return 'git-askpass_' + sessionId.split(':').last();\n@@ -1189,4 +1192,4 @@ lively.ide.CommandLineInterface.SpellChecker = {\n     }\n }\n \n-}) // end of module\n\\ No newline at end of file\n+}) // end of module"

         },

         {

            "sha": "3ce083f07fa6de373bee7793a99f37bc3343deb8",

            "filename": "core/lively/lang/Function.js",

            "status": "modified",

            "additions": 7,

            "deletions": 3,

            "changes": 10,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/lang/Function.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/lang/Function.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/lang/Function.js?ref=65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

            "patch": "@@ -472,8 +472,8 @@ Global.Functions = {\n         var worker = lively.Worker.createInPool(null, Config.get('lively.Worker.idleTimeOfPoolWorker'));\n         worker.onMessage = function(evt) {\n             switch (evt.data.type) {\n-                case 'warning':\n-                    console.warn(\"[WORKER warn] %s\", evt.data.message);\n+                case 'log': case 'error': case 'warn':\n+                    console[evt.data.type](\"[WORKER] %s\", evt.data.message);\n                     break;\n                 case 'runResponse':\n                     options.whenDone && options.whenDone(evt.data.error, evt.data.result);\n@@ -485,7 +485,11 @@ Global.Functions = {\n                     console.log(\"[WORKER unknown message] %s\", evt.data.type || evt.data);\n             }\n         }\n-        worker.basicRun({func: workerFunc, args: options.args || [], useWhenDone: true});\n+        worker.basicRun({\n+            func: workerFunc,\n+            args: options.args || [],\n+            useWhenDone: true\n+        });\n         return worker;\n     },\n "

         },

         {

            "sha": "ecb803242bfe1139d934e54cec1458caa3f54cd4",

            "filename": "core/lively/lang/Worker.js",

            "status": "modified",

            "additions": 35,

            "deletions": 11,

            "changes": 46,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/lang/Worker.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/lang/Worker.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/lang/Worker.js?ref=65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

            "patch": "@@ -43,8 +43,15 @@ lively.Worker = {\n                 options: {\n                     locationDirectory: JSLoader.currentDir(),\n                     bootstrapFiles: bootstrapFiles,\n-                    codeBase: Config.codeBase,\n-                    rootPath: Config.rootPath\n+                    codeBase: lively.Config.codeBase,\n+                    rootPath: lively.Config.rootPath,\n+                    nodeJSURL: lively.Config.nodeJSURL,\n+                    location: (function() {\n+                        var loc = {};\n+                        [\"hash\",\"host\",\"hostname\",\"href\",\"origin\",\"pathname\",\"port\",\"protocol\",\"search\"].forEach(function(name) {\n+                            loc[name] = lively.Config.location[name]; });\n+                        return loc;\n+                    })()\n                 }\n             });\n             worker.onmessage = function(evt) {\n@@ -98,21 +105,38 @@ lively.Worker = {\n                         Global.Config.finishLoadingCallbacks.push(callback);\n                     }\n                 };\n-                Global.console = Global.console || {\n-                    log: function() {}, error: function() {}, warn: function() {}\n-                }\n-                if (!Global.Config) Global.Config = {codeBase: options.codeBase, rootPath: options.rootPath, finishLoadingCallbacks: []};\n-                if (!Global.document) Global.document = {location: self.location, URL: self.location.toString()}\n+                Global.console = Global.console || (function() {\n+                    var c = {};\n+                    ['log', 'error', 'warn'].forEach(function(name) {\n+                        c[name] = function(/*args*/) {\n+                            var string = arguments[0];\n+                            for (var i = 1; i < arguments.length; i++)\n+                                string = string.replace('%s', arguments[i]);\n+                            postMessage({\n+                                type: name,\n+                                message: ['[', name.toUpperCase(), '] ', string].join('')\n+                            });\n+                        };\n+                    });\n+                    return c;\n+                })();\n+                if (!Global.Config) Global.Config = lively.Config = {\n+                    codeBase: options.codeBase,\n+                    rootPath: options.rootPath,\n+                    nodeJSURL: options.nodeJSURL,\n+                    location: options.location,\n+                    finishLoadingCallbacks: []\n+                };\n+                Config.location.toString = function() { return this.href; }\n+                if (!Global.document) Global.document = {location: Config.location, URL: Config.location.toString()}\n                 var loadedURLs = [];\n                 Global.JSLoader = {\n                     loadJs: function(url, callback) {\n                         // var match = url.match(/http:\\/\\/[^\\/]+(\\/?.*)/);\n                         // if (match && match[1]) url = match[1];\n                         loadedURLs.push(url);\n-                        try {\n-                            importScripts(url);\n-                        } catch(e) {\n-                            postMessage({type: 'warning', message: url + ' could not be loaded in worker: '+ e});\n+                        try { importScripts(url); } catch(e) {\n+                            console.error(url + ' could not be loaded in worker: ' + e);\n                         }\n                     },\n                     currentDir: function () { return options.locationDirectory; },"

         },

         {

            "sha": "015d7e9cead22b24dd31b1d6e4c721a546e681b5",

            "filename": "core/lively/lang/tests/WorkerTests.js",

            "status": "modified",

            "additions": 0,

            "deletions": 1,

            "changes": 1,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/lang/tests/WorkerTests.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/65c4ad10b3ff70b561dfd4f2bb3031decdab603b/core/lively/lang/tests/WorkerTests.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/lang/tests/WorkerTests.js?ref=65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

            "patch": "@@ -82,7 +82,6 @@ AsyncTestCase.subclass('lively.lang.tests.WorkerTests.FunctionInterface',\n                 test.assertEquals('3 true', whenDoneResult);\n                 this.assertEquals(1, lively.Worker.pool.length, 'worker pool size with worker running.');\n                 this.delay(function() {\n-    show('...'+lively.Worker.pool[0] === worker)\n                     this.assertEquals(0, lively.Worker.pool.length, 'worker pool size with worker stopped.');\n                     this.done();\n                 }, 200);"

         }

      ]

   },

   {

      "sha": "a60c880d99e76017ef9e7120defc9601616624e2",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:00:55Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:00:55Z"

         },

         "message": "bootstrap: cleaning script load logic",

         "tree": {

            "sha": "533dcc93bb93f76914c67bca2e805e5566fcbc9e",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/533dcc93bb93f76914c67bca2e805e5566fcbc9e"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/a60c880d99e76017ef9e7120defc9601616624e2",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a60c880d99e76017ef9e7120defc9601616624e2",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/a60c880d99e76017ef9e7120defc9601616624e2",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a60c880d99e76017ef9e7120defc9601616624e2/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "941da40cf39ff506df83a9ee86532fcfd904ea91",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/941da40cf39ff506df83a9ee86532fcfd904ea91",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/941da40cf39ff506df83a9ee86532fcfd904ea91"

         }

      ],

      "stats": {

         "total": 162,

         "additions": 69,

         "deletions": 93

      },

      "files": [

         {

            "sha": "9a03e6cc493123122136a7b72ca89a9ca22edde0",

            "filename": "core/lively/bootstrap.js",

            "status": "modified",

            "additions": 69,

            "deletions": 93,

            "changes": 162,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/a60c880d99e76017ef9e7120defc9601616624e2/core/lively/bootstrap.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/a60c880d99e76017ef9e7120defc9601616624e2/core/lively/bootstrap.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/bootstrap.js?ref=a60c880d99e76017ef9e7120defc9601616624e2",

            "patch": "@@ -507,6 +507,8 @@\n         XLINKNamespace: 'http:\\/\\/www.w3.org/1999/xlink',\n         LIVELYNamespace: 'http:\\/\\/www.experimentalstuff.com/Lively',\n \n+        loadedURLs: [],\n+\n         require: function(relPath) {\n             // for use with NodeJS\n             var pathLib = require('path'),\n@@ -535,24 +537,21 @@\n                 }\n             };\n         },\n+\n         loadJs: browserDetector.isNodejs() ?\n             function(url, onLoadCb, loadSync, okToUseCache, cacheQuery) {\n+                if (this.isLoading(url)) return null;\n+                this.markAsLoading(url);\n                 console.log('loading ' + url);\n                 var path = url;\n                 //var path = url.match(/(^http|^file):\\/\\/(.*)/)[2];\n                 var scriptEl = window.document.createElement(\"script\");\n                 scriptEl.src = path;\n                 window.document.body.appendChild(scriptEl);\n-                if (onLoadCb) {\n-                    scriptEl.onload = onLoadCb;\n-                }\n+                if (onLoadCb) scriptEl.onload = onLoadCb;\n                 return Global;\n             } :\n             function(url, onLoadCb, loadSync, okToUseCache, cacheQuery) {\n-                if (okToUseCache === undefined) okToUseCache = true;\n-                if (this.scriptInDOM(url)) {\n-                    var msg = 'script ' + url + ' already loaded or loading';\n-                    console.log(msg);\n                 // Deprecation: loading css files via loadJs is no longer\n                 // supported\n                 if (url.match(/\\.css$/) || url.match(/\\.css\\?/)) {\n@@ -560,75 +559,74 @@\n                     return null;\n                 }\n \n-                // adapt URL\n+                if (this.isLoading(url)) return null;\n+                this.markAsLoading(url);\n+\n+                if (okToUseCache === undefined) okToUseCache = true;\n+\n+                // DEPRECATED: adapt URL, for SVN-WebDAV support\n                 var exactUrl = url;\n                 if ((exactUrl.indexOf('!svn') <= 0) && !okToUseCache) {\n                     exactUrl = this.makeUncached(exactUrl, cacheQuery);\n                 }\n \n+                return this.loadViaXHR(loadSync, exactUrl, onLoadCb);\n+                // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n+                // FIXME script loading currently not used\n                 // create and configure script tag\n-                var parentNode = this.findParentScriptNode(),\n-                    xmlNamespace = parentNode.namespaceURI, el;\n-\n-                if (css) {\n-                    el = document.createElementNS(xmlNamespace, 'link');\n-                    el.setAttributeNS(null, \"rel\", \"stylesheet\");\n-                    el.setAttributeNS(null, \"type\", \"text/css\");\n-                } else { //assuming js\n+                /*var parentNode = this.findParentScriptNode(),\n+                    xmlNamespace = parentNode.namespaceURI,\n                     el = document.createElementNS(xmlNamespace, 'script');\n-                    el.setAttributeNS(null, 'type', 'text/ecmascript');\n-                }\n+                el.setAttributeNS(null, 'type', 'text/ecmascript');\n                 parentNode.appendChild(el);\n                 el.setAttributeNS(null, 'id', url);\n-                console.log(exactUrl);\n                 return loadSync ?\n-                    this.loadSync(exactUrl, onLoadCb, el) :\n-                    this.loadAsync(exactUrl, onLoadCb, el);\n+                    this.loadSync(, el) :\n+                    this.loadAsync(exactUrl, onLoadCb, el);*/\n             },\n \n-        loadSync: function(url, onLoadCb, script) {\n-            if (this.isCSS(url)) {\n-                console.log('skipping eval for css: ' + url);\n-                if (typeof onLoadCb === 'function') onLoadCb();\n-                return;\n+        loadViaXHR: function(beSync, url, onLoadCb) {\n+            this.getViaXHR(beSync, url, function(err, content) {\n+                if (err) {\n+                    console.error('error loading %s: %s', url, err);\n+                } else {\n+                    JSLoader.evalJavaScriptFromURL(url, content, onLoadCb);\n+                }\n+            });\n+            return null;\n+        },\n+\n+        loadViaScript: function(url, onLoadCb, script) {\n+            // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n+            // FIXME script loading currently not used\n+            /*if (script.namespaceURI === this.SVGNamespace) {\n+                script.setAttributeNS(this.XLINKNamespace, 'href', url);\n+            } else {\n+                //...\n             }\n-            this.doLoadJS(url, onLoadCb, this.getSync(url));\n+            if (onLoadCb) script.onload = onLoadCb;\n+            script.setAttributeNS(null, 'async', true);*/\n         },\n \n-        doLoadJS: function(url, onLoadCb, source) {\n+        evalJavaScriptFromURL: function(url, source, onLoadCb) {\n             if (!source) { console.warn('Could not load %s', url); return; }\n             Global.livelySources[url] = source;\n             try {\n                 eval.call(Global, source + \"\\n//# sourceURL=\" + url);\n             } catch (e) {\n-                console.error('Error when loading %s: %s\\n%s', url, e, e.stack);\n+                console.error('Error when evaluating %s: %s\\n%s', url, e, e.stack);\n             }\n             if (typeof onLoadCb === 'function') onLoadCb();\n         },\n-        \n-        loadAsync: function(url, onLoadCb, script) {\n-            if (script.namespaceURI === this.SVGNamespace) {\n-                script.setAttributeNS(this.XLINKNamespace, 'href', url);\n-            } else if (this.isCSS(url)) {\n-                script.setAttribute(\"href\", url);\n-                if (typeof onLoadCb === 'function') onLoadCb(); // huh?\n-            } else\n-                return this.getAsync(url, onLoadCb, this.doLoadJS);\n-                \n-            if (onLoadCb) script.onload = onLoadCb;\n-            script.setAttributeNS(null, 'async', true);\n-        },\n \n         loadCombinedModules: function(combinedFileUrl, callback, hash) {\n             // If several modules are combined in one file they can be loaded\n             // with this method. The method will ensure that all included\n             // modules are loaded. If they have required modules that are not\n             // included in the combined file, those will be loaded as well.\n-\n             var lively = Global.lively,\n                 originalLoader = this,\n                 combinedLoader = {\n-\n                     expectToLoadModules: function(relativePaths) {\n                         // urls like http://foo.org/lively/Text.js\n                         var i, len = relativePaths.length;\n@@ -694,8 +692,7 @@\n \n             // while loading the combined file we replace the loader\n             Global.JSLoader = combinedLoader;\n-            this.loadJs(combinedFileUrl, callCallback,\n-                        false, false, hash);\n+            this.loadJs(combinedFileUrl, callCallback, false, false, hash);\n         },\n \n         loadAll: function(urls, cb) {\n@@ -726,18 +723,25 @@\n             return document.getElementsByTagName('script');\n         },\n \n+        isLoading: function(url) {\n+            url = this.makeAbsolute(url);\n+            return this.loadedURLs.indexOf(url) > -1\n+                || this.scriptInDOM(url);\n+        },\n+\n+        markAsLoading: function(url) {\n+            this.loadedURLs.push(this.makeAbsolute(url));\n+        },\n+\n         scriptInDOM: function(url) {\n             return this.scriptsThatLinkTo(url).length > 0;\n         },\n \n         scriptsThatLinkTo: function(url) {\n-            var scriptsFound = [],\n-                allScripts = this.getScripts();\n-            for (var i = 0; i < allScripts.length; i++) {\n-                if (this.scriptElementLinksTo(allScripts[i], url)) {\n+            var scriptsFound = [], allScripts = this.getScripts();\n+            for (var i = 0; i < allScripts.length; i++)\n+                if (this.scriptElementLinksTo(allScripts[i], url))\n                     scriptsFound.push(allScripts[i]);\n-                }\n-            }\n             return scriptsFound;\n         },\n \n@@ -782,10 +786,12 @@\n \n         dirOfURL: function(url) {\n             return this.removeQueries(url)\n-                       .substring(0, url.lastIndexOf('/') + 1);\n+               .substring(0, url.lastIndexOf('/') + 1);\n         },\n \n         makeAbsolute: function(urlString) {\n+            // if urlString points to a relative resource then prepend the\n+            // current protocol, port, path to it to make it absolute\n             urlString = this.removeQueries(urlString);\n             if (!urlString.match(/^http|^file/)) {\n                 // make absolute\n@@ -795,6 +801,7 @@\n         },\n \n         makeUncached: function(urlString, cacheQuery) {\n+            // append a timestamp to the url to force a reload\n             cacheQuery = cacheQuery || new Date().getTime();\n             return urlString\n                  + (urlString.indexOf('?') === -1 ? '?' : '&')\n@@ -808,50 +815,19 @@\n             }\n         },\n \n-        getAsync: function(url, onLoadCb, onSuccess) {\n+        getViaXHR: function(beSync, url, callback) {\n             var xhr = new XMLHttpRequest();\n-            xhr.open(\"GET\", url, true);\n-            xhr.onload = function (e) {\n-              if (xhr.readyState === 4) {\n-                if (xhr.status === 200) {\n-                    onSuccess(url, onLoadCb, xhr.responseText);\n-                } else {\n-                  console.error(xhr.statusText);\n-                }\n-              }\n+            xhr.open(\"GET\", url, !beSync);\n+            xhr.onload = function() {\n+                if (xhr.readyState !== 4) return;\n+                callback(\n+                    xhr.status >= 400 ? xhr.statusText : null,\n+                    xhr.responseText)\n             };\n-            xhr.onerror = function (e) {\n-              console.error(xhr.statusText);\n+            xhr.onerror = function(e) {\n+                callback(xhr.statusText, null);\n             };\n             xhr.send(null);\n-        },\n-        \n-        getSyncReq: function(url, forceUncached) {\n-            if (typeof WebResource !== \"undefined\") {\n-                var webR = new WebResource(url);\n-                if (forceUncached) webR.forceUncached();\n-                var webRGet = webR.get();\n-                return {\n-                    status: webRGet.status.code(),\n-                    responseText: webRGet.content\n-                };\n-            }\n-\n-            var req = new XMLHttpRequest();\n-            if (forceUncached) url = this.makeUncached(url);\n-            req.open('GET', url, false/*sync*/);\n-            req.send();\n-            return req;\n-        },\n-\n-        getSync: function(url, forceUncached) {\n-            var req = this.getSyncReq(url, forceUncached);\n-            return req.status < 400 ? req.responseText : null;\n-        },\n-\n-        getSyncStatus: function(url, forceUncached) {\n-            return this.getSyncReq(url, forceUncached).status;\n-        },\n         }\n \n     };"

         }

      ]

   },

   {

      "sha": "941da40cf39ff506df83a9ee86532fcfd904ea91",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T17:58:36Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T17:58:36Z"

         },

         "message": "bootstrap: remove css load nonsense",

         "tree": {

            "sha": "9f37908ae9165f0a388c03debd3aaf78403c1de2",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/9f37908ae9165f0a388c03debd3aaf78403c1de2"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/941da40cf39ff506df83a9ee86532fcfd904ea91",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/941da40cf39ff506df83a9ee86532fcfd904ea91",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/941da40cf39ff506df83a9ee86532fcfd904ea91",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/941da40cf39ff506df83a9ee86532fcfd904ea91/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/65c4ad10b3ff70b561dfd4f2bb3031decdab603b",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/65c4ad10b3ff70b561dfd4f2bb3031decdab603b"

         }

      ],

      "stats": {

         "total": 10,

         "additions": 5,

         "deletions": 5

      },

      "files": [

         {

            "sha": "ed59a9506c9b9e485b8039d640d71eafb868b402",

            "filename": "core/lively/bootstrap.js",

            "status": "modified",

            "additions": 5,

            "deletions": 5,

            "changes": 10,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/941da40cf39ff506df83a9ee86532fcfd904ea91/core/lively/bootstrap.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/941da40cf39ff506df83a9ee86532fcfd904ea91/core/lively/bootstrap.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/bootstrap.js?ref=941da40cf39ff506df83a9ee86532fcfd904ea91",

            "patch": "@@ -553,10 +553,12 @@\n                 if (this.scriptInDOM(url)) {\n                     var msg = 'script ' + url + ' already loaded or loading';\n                     console.log(msg);\n+                // Deprecation: loading css files via loadJs is no longer\n+                // supported\n+                if (url.match(/\\.css$/) || url.match(/\\.css\\?/)) {\n+                    console.error('JSLoader.loadJs called with css URL?! %s', url);\n                     return null;\n                 }\n-                // it's called loadJs, not loadCSS !!!\n-                var css = this.isCSS(url);\n \n                 // adapt URL\n                 var exactUrl = url;\n@@ -850,10 +852,8 @@\n         getSyncStatus: function(url, forceUncached) {\n             return this.getSyncReq(url, forceUncached).status;\n         },\n-\n-        isCSS: function(url) {\n-            return url.match(/\\.css$/) || url.match(/\\.css\\?/);\n         }\n+\n     };\n \n     // TODO: Something is wrong with the lively-libs, use debug only to"

         }

      ]

   },

   {

      "sha": "39617f270ca93ff12f7722a32a9ccb66bdecf15d",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:17:18Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:17:18Z"

         },

         "message": "ide: completions are again computed in worker code. This won't prolong loading and will use all avaiable sources for word completion computation. Eventually this will be moved into a subserver.\n\nreverts part of #9d131d7 and #1fc1ba3",

         "tree": {

            "sha": "b57083d046ebf356a9d3b9834b432fb6cf1dca9f",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/b57083d046ebf356a9d3b9834b432fb6cf1dca9f"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/39617f270ca93ff12f7722a32a9ccb66bdecf15d",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/39617f270ca93ff12f7722a32a9ccb66bdecf15d",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/39617f270ca93ff12f7722a32a9ccb66bdecf15d",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/39617f270ca93ff12f7722a32a9ccb66bdecf15d/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "e985068119eff5aa971a2a7db1c909899fb43ca0",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/e985068119eff5aa971a2a7db1c909899fb43ca0",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/e985068119eff5aa971a2a7db1c909899fb43ca0"

         }

      ],

      "stats": {

         "total": 102,

         "additions": 59,

         "deletions": 43

      },

      "files": [

         {

            "sha": "302d0ca5b0fc68a1e3ad9658bda607d68b05545d",

            "filename": "core/lively/ide/codeeditor/Completions.js",

            "status": "modified",

            "additions": 59,

            "deletions": 43,

            "changes": 102,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/39617f270ca93ff12f7722a32a9ccb66bdecf15d/core/lively/ide/codeeditor/Completions.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/39617f270ca93ff12f7722a32a9ccb66bdecf15d/core/lively/ide/codeeditor/Completions.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/codeeditor/Completions.js?ref=39617f270ca93ff12f7722a32a9ccb66bdecf15d",

            "patch": "@@ -1,55 +1,71 @@\n-module('lively.ide.codeeditor.Completions').requires('lively.ide.CodeEditor').toRun(function() {\n+module('lively.ide.codeeditor.Completions').requires('lively.ide.codeeditor.ace').toRun(function() {\n+\n+module('lively.ide');\n \n (function setupCompletions() {\n-    if (UserAgent.isNodejs) return;\n+    if (UserAgent.isNodejs || UserAgent.isWorker) return;\n+\n+    var words = {};\n+    function wordsFromFiles(next) {\n+        Functions.forkInWorker(\n+            function(whenDone, options) {\n+                module('lively.lang.Closure').load();\n+                module('lively.ide.CommandLineInterface').load();\n+                function wordsFromFiles() {\n+                    var files = lively.ide.CommandLineSearch.findFiles('*js', {sync:true}),\n+                        livelyJSFiles = files.grep('core/'),\n+                        urls = livelyJSFiles.map(function(fn) { return URL.root.withFilename(fn).withRelativePartsResolved(); }),\n+                        splitRegex = /[^a-zA-Z_0-9\\$\\-]+/,\n+                        words = {}, parseTimes = {};\n+                    urls.forEach(function(url) {\n+                        var t1 = new Date(),\n+                            content = url.asWebResource().get().content,\n+                            wordsInFile = content.split(splitRegex);\n+                        wordsInFile.forEach(function(word) {\n+                            if (word.length === 0) return;\n+                            var first = word[0].toLowerCase();\n+                            if (!words[first]) words[first] = {};\n+                            if (!words[first][word]) words[first][word] = 0;\n+                            words[first][word]++;\n+                        });\n+                        parseTimes[url] = (new Date() - t1);\n+                    });\n+                    return words;\n+                }\n+                try { whenDone(null, wordsFromFiles()); } catch(e) { whenDone(e.stack, null); }\n+            }, {args: [], whenDone: function(err, result) { if (err) show(err); words = result; next(); }\n+        });\n+    }\n \n-    lively.whenLoaded(function(world) {\n-        var sources = Object.values(Global.livelySources),\n-            splitRegex = /[^a-zA-Z_0-9\\$\\-]+/,\n-            words = {};\n-        for (var i = -1; i < sources.length; i++) {\n-            var source = sources[i];\n-            if(!source)\n-                continue;\n-            var wordsInFile = source.split(splitRegex);\n-            wordsInFile.forEach(function(word) {\n-                if (word.length === 0) return;\n-                var first = word[0].toLowerCase(),\n-                    bucketForFirst = words[first];\n-                if (!bucketForFirst) {\n-                    bucketForFirst = words[first] = {};\n-                    bucketForFirst[word] = 1;\n-                } else\n-                    if(bucketForFirst[word])\n-                        bucketForFirst[word]++;\n-                    else\n-                        bucketForFirst[word] = 1;\n-            });\n-        }\n-    \n+    function installCompleter(next) {\n         // 1) define completer\n         lively.ide.WordCompleter = {wordsFromFiles: words};\n-        lively.ide.WordCompleter.getCompletions = function(editor, session, pos, prefix, callback) {\n-            if (prefix.length === 0) { callback(null, []); return }\n-            var startLetter = prefix[0].toLowerCase(),\n-                wordList = this.wordsFromFiles[startLetter], result = [];\n-            for (var word in wordList) {\n-                if (word.lastIndexOf(prefix, 0) !== 0) continue;\n-                result.push({\n-                    name: word,\n-                    value: word,\n-                    score: wordList[word],\n-                    meta: \"lively\"\n-                });\n+        Object.extend(lively.ide.WordCompleter, {\n+            getCompletions: function(editor, session, pos, prefix, callback) {\n+                if (prefix.length === 0) { callback(null, []); return }\n+                var startLetter = prefix[0].toLowerCase(),\n+                    wordList = this.wordsFromFiles[startLetter], result = [];\n+                for (var word in wordList) {\n+                    if (word.lastIndexOf(prefix, 0) !== 0) continue;\n+                    result.push({\n+                        name: word,\n+                        value: word,\n+                        score: wordList[word],\n+                        meta: \"lively\"\n+                    });\n+                }\n+                callback(null, result);\n             }\n-            callback(null, result);\n-        }\n+        });\n         // 2) register completer\n         var langTools = lively.ide.ace.require('ace/ext/language_tools');\n         langTools.addCompleter(lively.ide.WordCompleter);\n-\t\talertOK('Word completion installed!');\n-\t});\n+        next();\n+    }\n+\n+    function done(next) { alertOK('Word completion installed!'); next(); }\n \n+    [wordsFromFiles, installCompleter, done].doAndContinue()\n })();\n \n-}) // end of module\n\\ No newline at end of file\n+}) // end of module"

         }

      ]

   },

   {

      "sha": "f9e662e26c16314870dc5c9d2965c8f726e6cd01",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:27:49Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:27:49Z"

         },

         "message": "bootstrap: allow JS scripts to be loaded via script tags again. This fixes cross-domain code loading and JSONP support. Also remove Global.livelySources as it is not used by completions anymore",

         "tree": {

            "sha": "0c8c351237c9e0ebcd0d64358d5e46bda9c1da38",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/0c8c351237c9e0ebcd0d64358d5e46bda9c1da38"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/f9e662e26c16314870dc5c9d2965c8f726e6cd01",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/f9e662e26c16314870dc5c9d2965c8f726e6cd01",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/f9e662e26c16314870dc5c9d2965c8f726e6cd01",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/f9e662e26c16314870dc5c9d2965c8f726e6cd01/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "39617f270ca93ff12f7722a32a9ccb66bdecf15d",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/39617f270ca93ff12f7722a32a9ccb66bdecf15d",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/39617f270ca93ff12f7722a32a9ccb66bdecf15d"

         }

      ],

      "stats": {

         "total": 35,

         "additions": 16,

         "deletions": 19

      },

      "files": [

         {

            "sha": "f670cc79091a58f04a0e574a029224278733d8c7",

            "filename": "core/lively/bootstrap.js",

            "status": "modified",

            "additions": 16,

            "deletions": 19,

            "changes": 35,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/f9e662e26c16314870dc5c9d2965c8f726e6cd01/core/lively/bootstrap.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/f9e662e26c16314870dc5c9d2965c8f726e6cd01/core/lively/bootstrap.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/bootstrap.js?ref=f9e662e26c16314870dc5c9d2965c8f726e6cd01",

            "patch": "@@ -500,7 +500,6 @@\n         }\n     };\n \n-    Global.livelySources = {};\n     Global.JSLoader = {\n \n         SVGNamespace: 'http:\\/\\/www.w3.org/2000/svg',\n@@ -570,19 +569,9 @@\n                     exactUrl = this.makeUncached(exactUrl, cacheQuery);\n                 }\n \n-                return this.loadViaXHR(loadSync, exactUrl, onLoadCb);\n-                // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n-                // FIXME script loading currently not used\n-                // create and configure script tag\n-                /*var parentNode = this.findParentScriptNode(),\n-                    xmlNamespace = parentNode.namespaceURI,\n-                    el = document.createElementNS(xmlNamespace, 'script');\n-                el.setAttributeNS(null, 'type', 'text/ecmascript');\n-                parentNode.appendChild(el);\n-                el.setAttributeNS(null, 'id', url);\n                 return loadSync ?\n-                    this.loadSync(, el) :\n-                    this.loadAsync(exactUrl, onLoadCb, el);*/\n+                    this.loadViaXHR(loadSync, exactUrl, onLoadCb) :\n+                    this.loadViaScript(exactUrl, onLoadCb);\n             },\n \n         loadViaXHR: function(beSync, url, onLoadCb) {\n@@ -596,22 +585,30 @@\n             return null;\n         },\n \n-        loadViaScript: function(url, onLoadCb, script) {\n-            // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n-            // FIXME script loading currently not used\n-            /*if (script.namespaceURI === this.SVGNamespace) {\n+        loadViaScript: function(url, onLoadCb) {\n+            // load JS code by inserting a <script src=\"...\" /> tag into the\n+            // DOM. This allows cross domain script loading and JSONP\n+            var parentNode = this.findParentScriptNode(),\n+                xmlNamespace = parentNode.namespaceURI,\n+                script = document.createElementNS(xmlNamespace, 'script');\n+            script.setAttributeNS(null, 'type', 'text/ecmascript');\n+            parentNode.appendChild(script);\n+            script.setAttributeNS(null, 'id', url);\n+            if (script.namespaceURI === this.SVGNamespace) {\n                 script.setAttributeNS(this.XLINKNamespace, 'href', url);\n             } else {\n-                //...\n+                script.setAttribute('src', url);\n             }\n             if (onLoadCb) script.onload = onLoadCb;\n-            script.setAttributeNS(null, 'async', true);*/\n+            script.setAttributeNS(null, 'async', true);\n         },\n \n         evalJavaScriptFromURL: function(url, source, onLoadCb) {\n             if (!source) { console.warn('Could not load %s', url); return; }\n             Global.livelySources[url] = source;\n             try {\n+                // adding sourceURL improves debugging as it will be used\n+                // in stack traces by some debuggers\n                 eval.call(Global, source + \"\\n//# sourceURL=\" + url);\n             } catch (e) {\n                 console.error('Error when evaluating %s: %s\\n%s', url, e, e.stack);"

         }

      ]

   },

   {

      "sha": "e985068119eff5aa971a2a7db1c909899fb43ca0",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:13:18Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:13:18Z"

         },

         "message": "ide: config setting to control whether to use codeeditor completions",

         "tree": {

            "sha": "08223a53b663ad4ccf5ad60a7fd141190de2e7f2",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/08223a53b663ad4ccf5ad60a7fd141190de2e7f2"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/e985068119eff5aa971a2a7db1c909899fb43ca0",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/e985068119eff5aa971a2a7db1c909899fb43ca0",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/e985068119eff5aa971a2a7db1c909899fb43ca0",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/e985068119eff5aa971a2a7db1c909899fb43ca0/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "a60c880d99e76017ef9e7120defc9601616624e2",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a60c880d99e76017ef9e7120defc9601616624e2",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/a60c880d99e76017ef9e7120defc9601616624e2"

         }

      ],

      "stats": {

         "total": 10,

         "additions": 9,

         "deletions": 1

      },

      "files": [

         {

            "sha": "5a11baccd8cd74ad1804201b2f12c6c988ea0c20",

            "filename": "core/lively/defaultconfig.js",

            "status": "modified",

            "additions": 2,

            "deletions": 1,

            "changes": 3,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/e985068119eff5aa971a2a7db1c909899fb43ca0/core/lively/defaultconfig.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/e985068119eff5aa971a2a7db1c909899fb43ca0/core/lively/defaultconfig.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/defaultconfig.js?ref=e985068119eff5aa971a2a7db1c909899fb43ca0",

            "patch": "@@ -407,7 +407,7 @@ Config.addOptions(\n \n     // Modules\n     [\"modulesBeforeWorldLoad\", [\"lively.morphic.HTML\"], \"evaluated before all changes\"],\n-    [\"modulesOnWorldLoad\", [\"lively.ide\", \"lively.IPad\", \"lively.net.SessionTracker\", \"lively.net.Wiki\", \"lively.ide.codeeditor.Completions\", \"lively.ChangeSets\"], \"evaluated before world is setup\"],\n+    [\"modulesOnWorldLoad\", [\"lively.ide\", \"lively.IPad\", \"lively.net.SessionTracker\", \"lively.net.Wiki\", \"lively.ChangeSets\"], \"evaluated before world is setup\"],\n     [\"codeBase\", Config.codeBase && Config.codeBase != '' ? Config.codeBase : Config.getDocumentDirectory()],\n     [\"showModuleDefStack\", true, \"so modules know where they were required from\"],\n     [\"loadUserConfig\", true, \"for sth like jens/config.js, used in lively.bootstrap\"],\n@@ -492,6 +492,7 @@ Config.addOptions(\n     ['aceDefaultEnableAutocompletion', true, \"Should autocompletion be enabled?\"],\n     ['aceDefaultShowWarnings', true, \"Should autocompletion be enabled?\"],\n     ['aceDefaultShowErrors', true, \"Show syntax errors in programming language mode?\"],\n+    ['computeCodeEditorCompletionsOnStartup', true, 'when enabled all JS files udner core/ are read on startup nd their content is used to compute word completions'],\n     ['showDoitErrorMessages', true, \"When a doit eval results in an error a error message pops up.\"],\n     ['improvedJavaScriptEval', false, \"Eval that changes semantics of how object literals and if statements are evaluated.\"],\n ],"

         },

         {

            "sha": "5143d7736545bb80a0d75cf8afcc31a09ed51b2d",

            "filename": "core/lively/ide/CodeEditor.js",

            "status": "modified",

            "additions": 7,

            "deletions": 0,

            "changes": 7,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/e985068119eff5aa971a2a7db1c909899fb43ca0/core/lively/ide/CodeEditor.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/e985068119eff5aa971a2a7db1c909899fb43ca0/core/lively/ide/CodeEditor.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/CodeEditor.js?ref=e985068119eff5aa971a2a7db1c909899fb43ca0",

            "patch": "@@ -1598,4 +1598,11 @@ Object.extend(lively.ide, {\n     });\n })();\n \n+// startup hooks\n+(function setupCodeEditorCompletions() {\n+    if (lively.Config.get('computeCodeEditorCompletionsOnStartup')) {\n+        module(\"lively.ide.codeeditor.Completions\").load();\n+    }\n+})();\n+\n }); // end of module"

         }

      ]

   },

   {

      "sha": "ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:36:45Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T18:36:45Z"

         },

         "message": "bootstrap: remove forgotten livelySources",

         "tree": {

            "sha": "fc827705bdf4a23b829ddc432991b144fd89b970",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/fc827705bdf4a23b829ddc432991b144fd89b970"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "f9e662e26c16314870dc5c9d2965c8f726e6cd01",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/f9e662e26c16314870dc5c9d2965c8f726e6cd01",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/f9e662e26c16314870dc5c9d2965c8f726e6cd01"

         }

      ],

      "stats": {

         "total": 1,

         "additions": 0,

         "deletions": 1

      },

      "files": [

         {

            "sha": "91052ae98390724d467c00fa3f3ebf41023a90c6",

            "filename": "core/lively/bootstrap.js",

            "status": "modified",

            "additions": 0,

            "deletions": 1,

            "changes": 1,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f/core/lively/bootstrap.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f/core/lively/bootstrap.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/bootstrap.js?ref=ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f",

            "patch": "@@ -605,7 +605,6 @@\n \n         evalJavaScriptFromURL: function(url, source, onLoadCb) {\n             if (!source) { console.warn('Could not load %s', url); return; }\n-            Global.livelySources[url] = source;\n             try {\n                 // adding sourceURL improves debugging as it will be used\n                 // in stack traces by some debuggers"

         }

      ]

   },

   {

      "sha": "f1c3e43204c6c0b03e5ff08774925a0814ffac19",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T23:55:58Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-29T23:55:58Z"

         },

         "message": "firefox compat: improve key recognition of Firefox",

         "tree": {

            "sha": "454b06823ee5e9244cba0c6ea23e325efd0d595a",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/454b06823ee5e9244cba0c6ea23e325efd0d595a"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/f1c3e43204c6c0b03e5ff08774925a0814ffac19",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/f1c3e43204c6c0b03e5ff08774925a0814ffac19",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/f1c3e43204c6c0b03e5ff08774925a0814ffac19",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/f1c3e43204c6c0b03e5ff08774925a0814ffac19/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/ba40f0eed05ca88f25d82790ee35c0a54c5c6e3f"

         }

      ],

      "stats": {

         "total": 87,

         "additions": 87,

         "deletions": 0

      },

      "files": [

         {

            "sha": "22a19e41cfbf9aba8e9c505a77bcc62455262129",

            "filename": "core/lively/morphic/Events.js",

            "status": "modified",

            "additions": 87,

            "deletions": 0,

            "changes": 87,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/f1c3e43204c6c0b03e5ff08774925a0814ffac19/core/lively/morphic/Events.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/f1c3e43204c6c0b03e5ff08774925a0814ffac19/core/lively/morphic/Events.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/morphic/Events.js?ref=f1c3e43204c6c0b03e5ff08774925a0814ffac19",

            "patch": "@@ -392,6 +392,85 @@ Object.extend(Event, {\n             function(evt) { return evt.which === 3 }\n     })(),\n \n+    manualKeyIdentifierLookup: (function() {\n+        // this is a fallback for browsers whose key events do not have a\n+        // \"keyIdentifier\" property.\n+        // FIXME: as of 12/30/2013 this is only tested on MacOS\n+        var keyCodeIdentifiers = {\n+            8: {identifier: \"Backspace\"},\n+            9: {identifier: \"Tab\"},\n+            13: {identifier: \"Enter\"},\n+            16: {identifier: \"Shift\"},\n+            17: {identifier: \"Control\"},\n+            18: {identifier: \"Alt\"},\n+            27: {identifier: \"Esc\"},\n+            32: {identifier: \"Space\"},\n+            37: {identifier: \"Left\"},\n+            38: {identifier: \"Up\"},\n+            39: {identifier: \"Right\"},\n+            40: {identifier: \"Down\"},\n+            46: {identifier: \"Del\"},\n+            48: {identifier: \"0\", shifted: \")\"},\n+            49: {identifier: \"1\", shifted: \"!\"},\n+            50: {identifier: \"2\", shifted: \"@\"},\n+            51: {identifier: \"3\", shifted: \"#\"},\n+            52: {identifier: \"4\", shifted: \"$\"},\n+            53: {identifier: \"5\", shifted: \"%\"},\n+            54: {identifier: \"6\", shifted: \"^\"},\n+            55: {identifier: \"7\", shifted: \"&\"},\n+            56: {identifier: \"8\", shifted: \"*\"},\n+            57: {identifier: \"9\", shifted: \"(\"},\n+            91: {identifier: \"Command\"},\n+            93: {identifier: \"Command\"},\n+            112: {identifier: \"F1\"},\n+            113: {identifier: \"F2\"},\n+            114: {identifier: \"F3\"},\n+            115: {identifier: \"F4\"},\n+            116: {identifier: \"F5\"},\n+            117: {identifier: \"F6\"},\n+            118: {identifier: \"F7\"},\n+            119: {identifier: \"F8\"},\n+            120: {identifier: \"F9\"},\n+            121: {identifier: \"F10\"},\n+            122: {identifier: \"F11\"},\n+            123: {identifier: \"F12\"},\n+            186: {identifier: \";\", shifted:\":\"},\n+            187: {identifier: \"=\", shifted:\"+\"},\n+            188: {identifier: \",\", shifted:\"<\"},\n+            189: {identifier: \"-\", shifted:\"_\"},\n+            190: {identifier: \".\", shifted:\">\"},\n+            191: {identifier: \"/\", shifted:\"?\"},\n+            192: {identifier: \"`\", shifted:\"~\"},\n+            219: {identifier: \"[\", shifted:\"{\"},\n+            220: {identifier: \"\\\\\", shifted:\"|\"},\n+            221: {identifier: \"]\", shifted:\"}\"},\n+            222: {identifier: \"'\", shifted:\"\\\"\"},\n+            224: {identifier: \"Command\"},\n+        }\n+        return function(evt) {\n+            var id, c = evt.keyCode,\n+                shifted = evt.isShiftDown(),\n+                ctrl = evt.isCtrlDown(),\n+                cmd = evt.isCommandKey(),\n+                alt = evt.isAltDown();\n+            if ((c >= 65 && c <= 90)) {\n+                id = String.fromCharCode(c).toUpperCase();\n+            } else {\n+                var codeId = keyCodeIdentifiers[c];\n+                if (codeId === undefined) id = \"???\";\n+                else {\n+                    id = shifted && codeId.shifted ?\n+                        codeId.shifted : codeId.identifier\n+                }\n+            }\n+            if (shifted && c !== 16) id = 'Shift-' + id;\n+            if (alt && c !== 18) id = 'Alt-' + id;\n+            if (ctrl) id = 'Control-' + id;\n+            if (cmd && c !== 91 && c !== 93 && c !== 224) id = 'Command-' + id;\n+            return id\n+        }\n+    })(),\n+\n     decodeKeyIdentifier: function(keyEvt) {\n         // trying to find out what the String representation of the key pressed\n         // in key event is.\n@@ -414,6 +493,14 @@ Object.extend(Event, {\n         //   ignoreKeys: Array // list of strings -- key(combos) to ignore\n         // }\n         options = options || {};\n+        if (evt.keyIdentifier === undefined) {\n+            var id = this.manualKeyIdentifierLookup(evt);\n+            if (options.ignoreModifiersIfNoCombo\n+             && [16,17,18,91,93,224].include(evt.keyCode)\n+             && !id.include('-')) return \"\";\n+            if (options.ignoreKeys && options.ignoreKeys.include(id)) return '';\n+            return id;\n+        }\n         var keyParts = [];\n         // modifiers\n         if (evt.metaKey || evt.keyIdentifier === 'Meta') keyParts.push('Command');"

         }

      ]

   },

   {

      "sha": "bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2013-12-26T17:52:51Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2014-01-03T22:15:16Z"

         },

         "message": "dialogs: when multiple dialogs are chained remember last focused morph correctly",

         "tree": {

            "sha": "a297273bac0586827edb0da0001302064ab1a177",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/a297273bac0586827edb0da0001302064ab1a177"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "f1c3e43204c6c0b03e5ff08774925a0814ffac19",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/f1c3e43204c6c0b03e5ff08774925a0814ffac19",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/f1c3e43204c6c0b03e5ff08774925a0814ffac19"

         }

      ],

      "stats": {

         "total": 24,

         "additions": 20,

         "deletions": 4

      },

      "files": [

         {

            "sha": "65be79bec8053d9cc71171db9a2d7d405ef7497a",

            "filename": "core/lively/ide/codeeditor/Keyboard.js",

            "status": "modified",

            "additions": 1,

            "deletions": 0,

            "changes": 1,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1/core/lively/ide/codeeditor/Keyboard.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1/core/lively/ide/codeeditor/Keyboard.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/codeeditor/Keyboard.js?ref=bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

            "patch": "@@ -415,6 +415,7 @@ Object.subclass('lively.ide.CodeEditor.KeyboardShortcuts',\n                     // Alt-G = gotoline will insert © in Mac OS, this prevents it\n                 }\n             }]);\n+            kbd.bindKey(\"Alt-Shift-.\", 'gotoend');\n     },\n \n     setupSearchBindings: function(kbd) {"

         },

         {

            "sha": "71d183722146f23252f2790adbceff6c179709b5",

            "filename": "core/lively/ide/tools/SelectionNarrowing.js",

            "status": "modified",

            "additions": 2,

            "deletions": 2,

            "changes": 4,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1/core/lively/ide/tools/SelectionNarrowing.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1/core/lively/ide/tools/SelectionNarrowing.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively…e/tools/SelectionNarrowing.js?ref=bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

            "patch": "@@ -239,8 +239,8 @@ lively.BuildSpec('lively.ide.tools.NarrowingList', {\n         state = state || this.state;\n         candidate = candidate || this.getSelecteddCandidate(state);\n         actionIndex = actionIndex || 0;\n-        var action = this.runAction(state, actionIndex, candidate);\n         lively.bindings.signal(this, 'confirmedSelection', candidate);\n+        this.runAction(state, actionIndex, candidate);\n     },\n     valueFromListItem: function valueFromListItem(item) {\n         return item && typeof item.value !== \"undefined\" ? item.value : item;\n@@ -319,7 +319,7 @@ lively.BuildSpec('lively.ide.tools.NarrowingList', {\n                 completeInputOnRightArrow: spec.completeInputOnRightArrow,\n                 filters: [],\n                 focusedMorph: focusedMorph,\n-                refocusOnClose: spec.refocusOnClose || false\n+                refocusOnClose: spec.refocusOnClose || true\n             });\n         }\n         if (spec.init) spec.init(this, run); else run();"

         },

         {

            "sha": "821d7f498a7120bd90f17fc85f1cdf862244951c",

            "filename": "core/lively/morphic/Widgets.js",

            "status": "modified",

            "additions": 17,

            "deletions": 2,

            "changes": 19,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1/core/lively/morphic/Widgets.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1/core/lively/morphic/Widgets.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/morphic/Widgets.js?ref=bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

            "patch": "@@ -1850,6 +1850,7 @@ openReferencingMethodFinder: function () {\n             modalBounds = modalOwner.innerBounds(),\n             blockMorph = lively.morphic.Morph.makeRectangle(modalBounds),\n             transparentMorph = lively.morphic.Morph.makeRectangle(blockMorph.innerBounds());\n+        blockMorph.isModalMorph = true;\n         blockMorph.isEpiMorph = true;\n         blockMorph.applyStyle({\n             fill: null,\n@@ -1871,6 +1872,7 @@ openReferencingMethodFinder: function () {\n             modalOwner.visibleBounds() : modalOwner.innerBounds();\n         morph.align(morph.bounds().center(), alignBounds.center());\n         modalOwner.modalMorph = modalOwner.addMorph(blockMorph);\n+        blockMorph.modalTarget = morph;\n         lively.bindings.connect(morph, 'remove', blockMorph, 'remove');\n         morph.focus();\n         return morph;\n@@ -2761,10 +2763,23 @@ lively.morphic.App.subclass('lively.morphic.AbstractDialog',\n         lively.bindings.connect(this, 'result', this, 'triggerCallback');\n     },\n     triggerCallback: function(resultBool) {\n+        var nextFocus = this.lastFocusedMorph,\n+            modal = this.panel.ownerChain().detect(function(ea) { return ea.isModalMorph; }),\n+            modalOwner = modal && modal.owner;\n         this.removeTopLevel();\n         if (this.callback && this.callbackCount === 0) this.callback(resultBool);\n-        if (this.lastFocusedMorph) this.lastFocusedMorph.focus();\n-    },\n+        // when multiple dialogs are chained: test whether there is a new modal\n+        // morph after this dialog was closed. If so, remember the original morph\n+        // that was focused (this.lastFocusedMorph), focus the new dialog and pass\n+        // the lastFocusedMorph along. Otherwise just focus on lastFocusedMorph.\n+        var modalTarget = modalOwner && modalOwner.modalMorph && modalOwner.modalMorph.modalTarget;\n+        if (modalTarget && modalTarget != this.panel) {\n+            if (modalTarget.ownerApp) modalTarget.ownerApp.lastFocusedMorph = this.lastFocusedMorph;\n+            nextFocus = modalTarget;\n+        }\n+        nextFocus && nextFocus.show()\n+        if (nextFocus) nextFocus.focus.bind(nextFocus).delay(0);\n+    }\n });\n \n lively.morphic.AbstractDialog.subclass('lively.morphic.ConfirmDialog',"

         }

      ]

   },

   {

      "sha": "7fa8a629cf353f70b5110217d185ac4e90238608",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2014-01-03T22:17:12Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2014-01-03T22:18:12Z"

         },

         "message": "shell: fix persistent command escape",

         "tree": {

            "sha": "6576d9b9831ca3f8d32c68d0b41a541fff676211",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/6576d9b9831ca3f8d32c68d0b41a541fff676211"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/7fa8a629cf353f70b5110217d185ac4e90238608",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/7fa8a629cf353f70b5110217d185ac4e90238608",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/7fa8a629cf353f70b5110217d185ac4e90238608",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/7fa8a629cf353f70b5110217d185ac4e90238608/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/bfebf9418d3e9405c4ddc19f3f854ebe30dd6cd1"

         }

      ],

      "stats": {

         "total": 4,

         "additions": 1,

         "deletions": 3

      },

      "files": [

         {

            "sha": "6712877a5940cdeb5f3364cc108cf9017b8c645f",

            "filename": "core/lively/ide/CommandLineInterface.js",

            "status": "modified",

            "additions": 1,

            "deletions": 3,

            "changes": 4,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/7fa8a629cf353f70b5110217d185ac4e90238608/core/lively/ide/CommandLineInterface.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/7fa8a629cf353f70b5110217d185ac4e90238608/core/lively/ide/CommandLineInterface.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/CommandLineInterface.js?ref=7fa8a629cf353f70b5110217d185ac4e90238608",

            "patch": "@@ -267,9 +267,7 @@ lively.ide.CommandLineInterface.Command.subclass('lively.ide.CommandLineInterfac\n },\n 'internal', {\n     getCommand: function() {\n-        return [\n-            \"/usr/bin/env\", \"bash\", \"-c\",\n-            this._commandString.replace(/'/g, \"\\\\'\")];\n+        return [\"/usr/bin/env\", \"bash\", \"-c\", this._commandString];\n     }\n },\n 'compatibility', {"

         }

      ]

   },

   {

      "sha": "aaba8334a82a56adb59c9c0e2387529889967c53",

      "commit": {

         "author": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2014-01-03T22:17:44Z"

         },

         "committer": {

            "name": "Robert Krahn",

            "email": "robert.krahn@gmail.com",

            "date": "2014-01-03T22:18:12Z"

         },

         "message": "ide/directory viewer: fix menu item invocation",

         "tree": {

            "sha": "aac3c308eaa2883f3a93ef9c76ba3c2858016beb",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/aac3c308eaa2883f3a93ef9c76ba3c2858016beb"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/aaba8334a82a56adb59c9c0e2387529889967c53",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/aaba8334a82a56adb59c9c0e2387529889967c53",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/aaba8334a82a56adb59c9c0e2387529889967c53",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/aaba8334a82a56adb59c9c0e2387529889967c53/comments",

      "author": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "rksm",

         "id": 467450,

         "avatar_url": "https://gravatar.com/avatar/7e0fc9769fc4ec9b23b85da1639d5f31?d=https%3A%2F%2Fidenticons.github.com%2Ff5790be82a84c28f0e1fadaed4826b78.png&r=x",

         "gravatar_id": "7e0fc9769fc4ec9b23b85da1639d5f31",

         "url": "https://api.github.com/users/rksm",

         "html_url": "https://github.com/rksm",

         "followers_url": "https://api.github.com/users/rksm/followers",

         "following_url": "https://api.github.com/users/rksm/following{/other_user}",

         "gists_url": "https://api.github.com/users/rksm/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/rksm/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/rksm/subscriptions",

         "organizations_url": "https://api.github.com/users/rksm/orgs",

         "repos_url": "https://api.github.com/users/rksm/repos",

         "events_url": "https://api.github.com/users/rksm/events{/privacy}",

         "received_events_url": "https://api.github.com/users/rksm/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "7fa8a629cf353f70b5110217d185ac4e90238608",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/7fa8a629cf353f70b5110217d185ac4e90238608",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/7fa8a629cf353f70b5110217d185ac4e90238608"

         }

      ],

      "stats": {

         "total": 5,

         "additions": 3,

         "deletions": 2

      },

      "files": [

         {

            "sha": "e86cb424306cf29124415cca7cad44824e184d5a",

            "filename": "core/lively/ide/tools/DirViewer.js",

            "status": "modified",

            "additions": 3,

            "deletions": 2,

            "changes": 5,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/aaba8334a82a56adb59c9c0e2387529889967c53/core/lively/ide/tools/DirViewer.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/aaba8334a82a56adb59c9c0e2387529889967c53/core/lively/ide/tools/DirViewer.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/tools/DirViewer.js?ref=aaba8334a82a56adb59c9c0e2387529889967c53",

            "patch": "@@ -5464,9 +5464,10 @@ lively.BuildSpec('lively.ide.tools.DirViewer', {\n             }\n         };\n     // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n+    if (!item) return [];\n     var j = lively.ide.CommandLineInterface.path.join;\n     var fullPath = j(this.dirState.path, item.path);\n-    if (!item || item.isDirectory) return [copyPath];\n+    if (item.isDirectory) return [copyPath];\n     return [copyPath, openInSCB, openInTextEditor];\n },\n     execItemAction: function execItemAction(item, n) {\n@@ -5475,7 +5476,7 @@ lively.BuildSpec('lively.ide.tools.DirViewer', {\n     action.exec();\n },\n         getMenuItemsFor: function getMenuItemsFor(fileItem) {\n-        this.getItemActionsFor(fileItem).map(function(ac) {\n+        return this.getItemActionsFor(fileItem).map(function(ac) {\n             return [ac.description, ac.exec]; })\n     },\n         goto: function goto(dir) {"

         }

      ]

   },

   {

      "sha": "053574759a9344a50451112a50a3a740906e85c6",

      "commit": {

         "author": {

            "name": "Bert Freudenberg",

            "email": "bert@freudenbergs.de",

            "date": "2014-01-07T20:19:06Z"

         },

         "committer": {

            "name": "Bert Freudenberg",

            "email": "bert@freudenbergs.de",

            "date": "2014-01-07T20:19:06Z"

         },

         "message": "persistence: deal with typed arrays",

         "tree": {

            "sha": "a99ce0a170710fe846bac9103fb66d6a23bec172",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/a99ce0a170710fe846bac9103fb66d6a23bec172"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/053574759a9344a50451112a50a3a740906e85c6",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/053574759a9344a50451112a50a3a740906e85c6",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/053574759a9344a50451112a50a3a740906e85c6",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/053574759a9344a50451112a50a3a740906e85c6/comments",

      "author": {

         "login": "bertfreudenberg",

         "id": 733388,

         "avatar_url": "https://gravatar.com/avatar/2cf3dd6bc0a56573bd8e0c041bc86846?d=https%3A%2F%2Fidenticons.github.com%2F873909d1878f7099c4471c357edd1b0b.png&r=x",

         "gravatar_id": "2cf3dd6bc0a56573bd8e0c041bc86846",

         "url": "https://api.github.com/users/bertfreudenberg",

         "html_url": "https://github.com/bertfreudenberg",

         "followers_url": "https://api.github.com/users/bertfreudenberg/followers",

         "following_url": "https://api.github.com/users/bertfreudenberg/following{/other_user}",

         "gists_url": "https://api.github.com/users/bertfreudenberg/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/bertfreudenberg/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/bertfreudenberg/subscriptions",

         "organizations_url": "https://api.github.com/users/bertfreudenberg/orgs",

         "repos_url": "https://api.github.com/users/bertfreudenberg/repos",

         "events_url": "https://api.github.com/users/bertfreudenberg/events{/privacy}",

         "received_events_url": "https://api.github.com/users/bertfreudenberg/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "bertfreudenberg",

         "id": 733388,

         "avatar_url": "https://gravatar.com/avatar/2cf3dd6bc0a56573bd8e0c041bc86846?d=https%3A%2F%2Fidenticons.github.com%2F873909d1878f7099c4471c357edd1b0b.png&r=x",

         "gravatar_id": "2cf3dd6bc0a56573bd8e0c041bc86846",

         "url": "https://api.github.com/users/bertfreudenberg",

         "html_url": "https://github.com/bertfreudenberg",

         "followers_url": "https://api.github.com/users/bertfreudenberg/followers",

         "following_url": "https://api.github.com/users/bertfreudenberg/following{/other_user}",

         "gists_url": "https://api.github.com/users/bertfreudenberg/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/bertfreudenberg/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/bertfreudenberg/subscriptions",

         "organizations_url": "https://api.github.com/users/bertfreudenberg/orgs",

         "repos_url": "https://api.github.com/users/bertfreudenberg/repos",

         "events_url": "https://api.github.com/users/bertfreudenberg/events{/privacy}",

         "received_events_url": "https://api.github.com/users/bertfreudenberg/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "aaba8334a82a56adb59c9c0e2387529889967c53",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/aaba8334a82a56adb59c9c0e2387529889967c53",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/aaba8334a82a56adb59c9c0e2387529889967c53"

         }

      ],

      "stats": {

         "total": 15,

         "additions": 14,

         "deletions": 1

      },

      "files": [

         {

            "sha": "728f0c15e54614f93269318d9c9f58bb05be538a",

            "filename": "core/lively/persistence/Serializer.js",

            "status": "modified",

            "additions": 14,

            "deletions": 1,

            "changes": 15,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/053574759a9344a50451112a50a3a740906e85c6/core/lively/persistence/Serializer.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/053574759a9344a50451112a50a3a740906e85c6/core/lively/persistence/Serializer.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/persistence/Serializer.js?ref=053574759a9344a50451112a50a3a740906e85c6",

            "patch": "@@ -323,7 +323,8 @@ Object.extend(ObjectGraphLinearizer, {\n             new DoWeakSerializePlugin(),\n             new StoreAndRestorePlugin(),\n             new LayerPlugin(),\n-            new lively.persistence.DatePlugin()\n+            new lively.persistence.DatePlugin(),\n+            new lively.persistence.TypedArrayPlugin(),\n         ]);\n     },\n     forLivelyCopy: function() {\n@@ -1135,6 +1136,17 @@ ObjectLinearizerPlugin.subclass('lively.persistence.ExprPlugin', {\n     }\n });\n \n+ObjectLinearizerPlugin.subclass('lively.persistence.TypedArrayPlugin',\n+'interface', {\n+    serializeObj: function(obj) {\n+        return obj && obj.buffer && obj.buffer instanceof ArrayBuffer && obj.constructor.name.match(/Array$/) ?\n+            {isTypedArray: true, arrayClass: obj.constructor.name, array: Array.from(obj)} : null;\n+    },\n+    deserializeObj: function(copy) {\n+        return copy && copy.isTypedArray ? new window[copy.arrayClass](copy.array) : null;\n+    },\n+});\n+\n Object.extend(lively.persistence.Serializer, {\n \n     jsonWorldId: 'LivelyJSONWorld',\n@@ -1412,6 +1424,7 @@ Object.extend(lively.persistence, {\n         IgnoreDOMElementsPlugin,\n         LayerPlugin,\n         lively.persistence.DatePlugin,\n+        lively.persistence.TypedArrayPlugin,\n         lively.persistence.ExprPlugin]\n });\n "

         }

      ]

   },

   {

      "sha": "a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

      "commit": {

         "author": {

            "name": "larswassermann",

            "email": "lars.wassermann@gmail.com",

            "date": "2013-12-24T18:27:49Z"

         },

         "committer": {

            "name": "lively-web",

            "email": "unknown-user@lively-web.org",

            "date": "2014-01-07T22:36:09Z"

         },

         "message": "SourceCodeBrowser:\npatches to alleviate reuse of the BrowserFramework, and to allow for history browsing\n\n- added readme explaining what and why the browser framework does what it does\n- prohibit creating multiple views for one browser object\n- only register SystemBrowser with SourceControl, not all BasicBrowsers created\n- check for 'undefined' in more places\n- set the parent field for subnodes of CompleteFileNodes",

         "tree": {

            "sha": "67e1f6e40cb1c4c15e77944e89904a109e7c8480",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/67e1f6e40cb1c4c15e77944e89904a109e7c8480"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7/comments",

      "author": null,

      "committer": null,

      "parents": [

         {

            "sha": "053574759a9344a50451112a50a3a740906e85c6",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/053574759a9344a50451112a50a3a740906e85c6",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/053574759a9344a50451112a50a3a740906e85c6"

         }

      ],

      "stats": {

         "total": 43,

         "additions": 36,

         "deletions": 7

      },

      "files": [

         {

            "sha": "bdc30524997c1f9c322e5fc3e61f3060e031529b",

            "filename": "core/lively/ide/BrowserFramework.js",

            "status": "modified",

            "additions": 24,

            "deletions": 4,

            "changes": 28,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7/core/lively/ide/BrowserFramework.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7/core/lively/ide/BrowserFramework.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/BrowserFramework.js?ref=a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

            "patch": "@@ -4,7 +4,25 @@ lively.morphic.WindowedApp.subclass('lively.ide.BasicBrowser',\n 'settings', {\n     documentation: 'Abstract widget with three list panes and one text pane. Uses nodes to display and manipulate content.',\n     emptyText: '-----',\n-    connections: ['targetURL', 'sourceString', 'pane1Selection', 'pane2Selection', 'pane3Selection', 'pane4Selection']\n+    connections: ['targetURL', 'sourceString', 'pane1Selection', 'pane2Selection', 'pane3Selection', 'pane4Selection'],\n+    readme: function() {\n+        // scb = new lively.ide.SystemBrowser();\n+        // scb.openIn(lively.morphic.World.current());\n+\n+        // var browser = new lively.ide.BasicBrowser(),\n+        //     rootNode = new lively.ide.BrowserNode();\n+        // browser.rootNode = function() { return rootNode };\n+        // var morph = browser.buildView();\n+        // morph.openInWindow()\n+        \n+        return 'The class BasicBrowser is meant to be subclassed. It basically presents a tree of' +\n+            ' depth five, starting with this.rootNode() (The only function which requires' + \n+            ' implementation to create a view (this.buildView()). Each of the nodes should' + \n+            ' implement the lively.ide.BrowserNode interface, providing children, a string' + \n+            ' for the listItem which represents it, and a sourceString, when it is selected.' + \n+            ' All queries into the tree structure are synchronous. Example code is provided' + \n+            ' in this methods comments.'\n+    },\n },\n 'initializing', {\n \n@@ -109,6 +127,9 @@ lively.morphic.WindowedApp.subclass('lively.ide.BasicBrowser',\n     },\n \n     buildView: function (optExtent) {\n+        if (this.panel) {\n+            throw Error(\"Building more than one panel for a browser will break it. You can access this browsers morph at this.panel.\");\n+        }\n         var extent = optExtent || this.initialViewExtent;\n         var panel = new lively.ide.BrowserPanel(extent);\n         lively.morphic.Panel.makePanedPanel(extent, this.panelSpec, panel);\n@@ -157,11 +178,10 @@ lively.morphic.WindowedApp.subclass('lively.ide.BasicBrowser',\n     },\n     start: function() {\n         this.setPane1Content(this.childsFilteredAndAsListItems(this.rootNode(), this.getRootFilters()));\n-        this.mySourceControl().registerBrowser(this);\n     },\n \n     stop: function() {\n-        this.mySourceControl().unregisterBrowser(this);\n+        // called when the browser is closed\n     },\n     morphMenuItems: function() {\n         var cmds = this.commands()\n@@ -428,7 +448,7 @@ lively.morphic.WindowedApp.subclass('lively.ide.BasicBrowser',\n     paneNameOfNode: function(node) {\n         return this.allPaneNames.detect(function(pane) {\n             // FIXME quality\n-            return this.nodesInPane(pane).any(function(otherNode) { return otherNode.target == node.target })\n+            return this.nodesInPane(pane).any(function(otherNode) { return otherNode && otherNode.target == node.target })\n         }, this);\n     },\n "

         },

         {

            "sha": "3839dd43eb1510aa7591e4144e5c2531fa065fde",

            "filename": "core/lively/ide/SystemBrowserNodes.js",

            "status": "modified",

            "additions": 2,

            "deletions": 1,

            "changes": 3,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7/core/lively/ide/SystemBrowserNodes.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7/core/lively/ide/SystemBrowserNodes.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/SystemBrowserNodes.js?ref=a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

            "patch": "@@ -285,9 +285,10 @@ lively.ide.FileFragmentNode.subclass('lively.ide.CompleteFileFragmentNode', // s\n                 return lively.ide.BuildSpecFragmentNode;\n             return lively.ide.ObjectFragmentNode;\n         }\n+        var self = this;\n         return this.target.subElements(2)\n             .select(function(ea) { return acceptedTypes.include(ea.type) })\n-            .collect(function(ff) { return new (typeToClass(ff.type))(ff, browser) });\n+            .collect(function(ff) { return new (typeToClass(ff.type))(ff, browser, self) });\n     },\n \n     sourceString: function($super) {"

         },

         {

            "sha": "09f6f5da0a5b86b6aba63eea19c4bed2779c9226",

            "filename": "core/lively/ide/SystemCodeBrowser.js",

            "status": "modified",

            "additions": 10,

            "deletions": 2,

            "changes": 12,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7/core/lively/ide/SystemCodeBrowser.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7/core/lively/ide/SystemCodeBrowser.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/SystemCodeBrowser.js?ref=a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

            "patch": "@@ -96,7 +96,15 @@ lively.ide.BasicBrowser.subclass('lively.ide.SystemBrowser',\n                 $world.getUserDir() :\n                 URL.source.getDirectory());\n     },\n-\n+    start: function($super) {\n+        $super();\n+        this.mySourceControl().registerBrowser(this);\n+    },\n+    stop: function($super) {\n+        $super();\n+        this.mySourceControl().unregisterBrowser(this);\n+    },\n+    \n     switchToLivelyCodebase: function() {\n         this.setTargetURL(URL.codeBase.withFilename('lively/'));\n     },\n@@ -125,7 +133,7 @@ lively.ide.BasicBrowser.subclass('lively.ide.SystemBrowser',\n     openIn: function($super, world, position, extent, optTargetURL) {\n         var lastOpened = lively.ide.sourceDB().registeredBrowsers.last();\n         var win = $super(world, position, extent);\n-        var url = optTargetURL || (lastOpened && lastOpened.getTargetURL());\n+        var url = optTargetURL || (lastOpened && lastOpened.getTargetURL && lastOpened.getTargetURL());\n         url && this.setTargetURL(url);\n         return win;\n     },"

         }

      ]

   },

   {

      "sha": "a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1",

      "commit": {

         "author": {

            "name": "lively-web",

            "email": "unknown-user@lively-web.org",

            "date": "2013-12-30T21:06:11Z"

         },

         "committer": {

            "name": "lively-web",

            "email": "unknown-user@lively-web.org",

            "date": "2014-01-07T22:36:09Z"

         },

         "message": "serialization: catch deserialization of null objects",

         "tree": {

            "sha": "14aa99ac82c5384dbf10ab72e162e801af144928",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/14aa99ac82c5384dbf10ab72e162e801af144928"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1/comments",

      "author": null,

      "committer": null,

      "parents": [

         {

            "sha": "8e0091127144fb7ce051d3adcf37b9a45cbef5e5",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/8e0091127144fb7ce051d3adcf37b9a45cbef5e5",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/8e0091127144fb7ce051d3adcf37b9a45cbef5e5"

         }

      ],

      "stats": {

         "total": 8,

         "additions": 8,

         "deletions": 0

      },

      "files": [

         {

            "sha": "3c932d09d1a07a94fc171558a2cdec980b598212",

            "filename": "core/lively/persistence/Serializer.js",

            "status": "modified",

            "additions": 8,

            "deletions": 0,

            "changes": 8,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1/core/lively/persistence/Serializer.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1/core/lively/persistence/Serializer.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/persistence/Serializer.js?ref=a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1",

            "patch": "@@ -195,6 +195,12 @@ Object.subclass('ObjectGraphLinearizer',\n         // take the registered object (which has unresolveed references) and\n         // create a new similiar object with patched references\n         var registeredObj = this.getRegisteredObjectFromId(id);\n+        if (!registeredObj) {\n+            console.error('Error when trying to deserialize object registered\\n'\n+                        + 'with id %s (%s). No object was recorded. The serializer will try to\\n'\n+                        + 'fix things but things might end up to be broken.', id, this.path.last());\n+            return null; // oha\n+        }\n         recreated = this.somePlugin('deserializeObj', [registeredObj]) || {};\n         this.setRecreatedObject(recreated, id); // important to set recreated before patching refs!\n         for (var key in registeredObj) {\n@@ -342,6 +348,8 @@ Object.extend(ObjectGraphLinearizer, {\n     },\n     allRegisteredObjectsDo: function(registryObj, func, context) {\n         for (var id in registryObj) {\n+            if (id === 'isSimplifiedRegistry') continue;\n+            if (!registryObj.hasOwnProperty(id)) continue;\n             var registeredObject = registryObj[id];\n             if (!registryObj.isSimplifiedRegistry)\n                 registeredObject = registeredObject.registeredObject;"

         }

      ]

   },

   {

      "sha": "01ec3cfd77ae62d38ab1e9518710295730b9ed62",

      "commit": {

         "author": {

            "name": "lively-web",

            "email": "unknown-user@lively-web.org",

            "date": "2013-12-30T21:06:14Z"

         },

         "committer": {

            "name": "lively-web",

            "email": "unknown-user@lively-web.org",

            "date": "2014-01-07T22:36:10Z"

         },

         "message": "better error message",

         "tree": {

            "sha": "e3ffdaaff0e6c1dc26d0d5c150621fb07d5c6f7c",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/e3ffdaaff0e6c1dc26d0d5c150621fb07d5c6f7c"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/01ec3cfd77ae62d38ab1e9518710295730b9ed62",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/01ec3cfd77ae62d38ab1e9518710295730b9ed62",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/01ec3cfd77ae62d38ab1e9518710295730b9ed62",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/01ec3cfd77ae62d38ab1e9518710295730b9ed62/comments",

      "author": null,

      "committer": null,

      "parents": [

         {

            "sha": "a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/a91db5a770c4a6fd3bb6da7e03c71d22cdb3f4d1"

         }

      ],

      "stats": {

         "total": 2,

         "additions": 1,

         "deletions": 1

      },

      "files": [

         {

            "sha": "62800a777ad3d10bc9f2ec99da6f5adeef4458ec",

            "filename": "core/lively/morphic/Connectors.js",

            "status": "modified",

            "additions": 1,

            "deletions": 1,

            "changes": 2,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/01ec3cfd77ae62d38ab1e9518710295730b9ed62/core/lively/morphic/Connectors.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/01ec3cfd77ae62d38ab1e9518710295730b9ed62/core/lively/morphic/Connectors.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/morphic/Connectors.js?ref=01ec3cfd77ae62d38ab1e9518710295730b9ed62",

            "patch": "@@ -353,7 +353,7 @@ lively.morphic.Morph.addMethods(\n     },\n \n     createConnectorTo: function(otherMorph, lineStyle, update) {\n-        if (!otherMorph) throw new Error('Cannot to nothing');\n+        if (!otherMorph) throw new Error('Cannot point to nothing');\n \n         var line = new lively.morphic.Path([pt(0,0), pt(0,0)]);\n         if (lineStyle) line.applyStyle(lineStyle);"

         }

      ]

   },

   {

      "sha": "960eed4a2e2347209e098e05f71a033a6ce88499",

      "commit": {

         "author": {

            "name": "larswassermann",

            "email": "lars.wassermann@gmail.com",

            "date": "2013-12-31T06:19:53Z"

         },

         "committer": {

            "name": "lively-web",

            "email": "unknown-user@lively-web.org",

            "date": "2014-01-07T22:36:10Z"

         },

         "message": "History Code Browser Addon:\nrefactoring of the installation to allow later changes to the configuration. This also unifies the two occurences of system wide installation.",

         "tree": {

            "sha": "106d932dbb76c4e83d31a13582e00d29b4172fc8",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/106d932dbb76c4e83d31a13582e00d29b4172fc8"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/960eed4a2e2347209e098e05f71a033a6ce88499",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/960eed4a2e2347209e098e05f71a033a6ce88499",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/960eed4a2e2347209e098e05f71a033a6ce88499",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/960eed4a2e2347209e098e05f71a033a6ce88499/comments",

      "author": null,

      "committer": null,

      "parents": [

         {

            "sha": "01ec3cfd77ae62d38ab1e9518710295730b9ed62",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/01ec3cfd77ae62d38ab1e9518710295730b9ed62",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/01ec3cfd77ae62d38ab1e9518710295730b9ed62"

         }

      ],

      "stats": {

         "total": 51,

         "additions": 36,

         "deletions": 15

      },

      "files": [

         {

            "sha": "5226eca310421c5bf91f28145a642af6fab8ab3e",

            "filename": "core/lively/ide/SystemCodeBrowserAddons.js",

            "status": "modified",

            "additions": 36,

            "deletions": 15,

            "changes": 51,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/960eed4a2e2347209e098e05f71a033a6ce88499/core/lively/ide/SystemCodeBrowserAddons.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/960eed4a2e2347209e098e05f71a033a6ce88499/core/lively/ide/SystemCodeBrowserAddons.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively…de/SystemCodeBrowserAddons.js?ref=960eed4a2e2347209e098e05f71a033a6ce88499",

            "patch": "@@ -1,6 +1,6 @@\n module('lively.ide.SystemCodeBrowserAddons').requires('lively.ide.SystemCodeBrowser').toRun(function() {\n \n-Config.addOption({name: 'historyBrowserMaxLength', value: 15, docString: 'Upper bound for navigating back in a browser with history addon.', group: 'lively.ide.tools', type: 'number'});\n+lively.Config.addOption({name: 'historyBrowserMaxLength', value: 15, docString: 'Upper bound for navigating back in a browser with history addon.', group: 'lively.ide.tools', type: 'number'});\n \n Object.subclass('lively.ide.SCBAddons.History',\n 'settings', {\n@@ -225,20 +225,41 @@ Object.subclass('lively.ide.SCBAddons.History',\n     },\n }); // end of class\n \n-Config.addOption({name: 'useHistoryTracking', value: false, docString: 'When loading lively.ide.SystemCodeBrowserAddons, install history browsing for all future Browsers, or not.', group: 'lively.ide.tools', type: 'boolean'});\n-if(Config.get('useHistoryTracking')) {\n-'setupLocationInput'\n-    var browserPrototype = lively.ide.BasicBrowser.prototype,\n-        setupFn = browserPrototype.setupLocationInput;\n-    if (setupFn.oldSetup) { return; }\n-    browserPrototype.setupLocationInput = function($super) {\n-        var value = $super.apply(this, arguments);\n-        new lively.ide.SCBAddons.History(this);\n-        return value\n-    }.bind(setupFn);\n-    browserPrototype.setupLocationInput.oldSetup = setupFn;\n-    \n-}\n+Object.extend(lively.ide.SCBAddons.History, {\n+    install: function() {\n+        var browserPrototype = lively.ide.BasicBrowser.prototype,\n+            setupFn = browserPrototype.setupLocationInput;\n+        if (setupFn.oldSetup) { return; }\n+        browserPrototype.setupLocationInput = function() {\n+            var value = setupFn.apply(this, arguments);\n+            new lively.ide.SCBAddons.History(this);\n+            return value\n+        };\n+        browserPrototype.setupLocationInput.oldSetup = setupFn;\n+    },\n+    deinstall: function() {\n+        var browserPrototype = lively.ide.BasicBrowser.prototype,\n+            setupFn = browserPrototype.setupLocationInput;\n+        if (!setupFn.oldSetup) { return; }\n+        browserPrototype.setupLocationInput = setupFn.oldSetup\n+    },\n+});\n \n+lively.Config.addOption({\n+    name: 'useHistoryTracking', \n+    value: false, \n+    docString: 'When loading lively.ide.SystemCodeBrowserAddons, install history browsing for all future browsers, or not.', \n+    group: 'lively.ide.tools', \n+    type: 'boolean', \n+    get: function() {\n+        return !!lively.ide.BasicBrowser.prototype.setupLocationInput.oldSetup\n+    }, \n+    set: function(value) {\n+        if(value){\n+            lively.ide.SCBAddons.History.install();\n+        } else {\n+            lively.ide.SCBAddons.History.deinstall();\n+        }\n+    },});\n \n }) // end of module"

         }

      ]

   },

   {

      "sha": "40c742813dd4cf5770e5ebf557ae8b3e26072765",

      "commit": {

         "author": {

            "name": "larswassermann",

            "email": "lars.wassermann@gmail.com",

            "date": "2013-12-31T06:22:07Z"

         },

         "committer": {

            "name": "lively-web",

            "email": "unknown-user@lively-web.org",

            "date": "2014-01-07T22:36:10Z"

         },

         "message": "lively.binding.showConnection:\nrefactoring of the hiding code, to be able to call it from other places as well\nsmaller changes to make the code less brittle",

         "tree": {

            "sha": "f4e5a90adcce771713fc2d33c19dfb65464df47a",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/f4e5a90adcce771713fc2d33c19dfb65464df47a"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/40c742813dd4cf5770e5ebf557ae8b3e26072765",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/40c742813dd4cf5770e5ebf557ae8b3e26072765",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/40c742813dd4cf5770e5ebf557ae8b3e26072765",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/40c742813dd4cf5770e5ebf557ae8b3e26072765/comments",

      "author": null,

      "committer": null,

      "parents": [

         {

            "sha": "960eed4a2e2347209e098e05f71a033a6ce88499",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/960eed4a2e2347209e098e05f71a033a6ce88499",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/960eed4a2e2347209e098e05f71a033a6ce88499"

         }

      ],

      "stats": {

         "total": 27,

         "additions": 16,

         "deletions": 11

      },

      "files": [

         {

            "sha": "4906826be1180d23a97b9ad1b31b01b84d22d12b",

            "filename": "core/lively/morphic/Connectors.js",

            "status": "modified",

            "additions": 16,

            "deletions": 11,

            "changes": 27,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/40c742813dd4cf5770e5ebf557ae8b3e26072765/core/lively/morphic/Connectors.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/40c742813dd4cf5770e5ebf557ae8b3e26072765/core/lively/morphic/Connectors.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/morphic/Connectors.js?ref=40c742813dd4cf5770e5ebf557ae8b3e26072765",

            "patch": "@@ -403,13 +403,15 @@ lively.morphic.Morph.addMethods(\n         var nearestMagnetDist = Infinity,\n             selected = null,\n             magnets = this.getMagnets();\n-        magnets.forEach(function(magnet) {\n-            var dist = magnet.getGlobalPosition().dist(globalPos);\n-            if (dist < nearestMagnetDist) {\n-                nearestMagnetDist = dist;\n-                selected = magnet;\n-            }\n-        });\n+        if(globalPos) {\n+            magnets.forEach(function(magnet) {\n+                var dist = magnet.getGlobalPosition().dist(globalPos);\n+                if (dist < nearestMagnetDist) {\n+                    nearestMagnetDist = dist;\n+                    selected = magnet;\n+                }\n+            });\n+        };\n         return selected || magnets[0];\n \n     },\n@@ -554,6 +556,12 @@ Object.extend(lively.bindings, {\n         con.visualConnector = visualConnector;\n         con.visualConnector.con = con; // FIXME\n         visualConnector.showsMorphMenu = true; // FIX ... MEE !!!!!\n+        \n+        visualConnector.hidePermanently = function() {\n+            this.hide && this.hide();\n+            this.con.autoShowAndHideConnections && this.con.autoShowAndHideConnections.invoke('disconnect');\n+            delete this.con.visualConnector;\n+        };\n \n         visualConnector.addScript(function morphMenuItems() {\n             var visualConnector = this, con = this.con, world = $world;\n@@ -567,10 +575,7 @@ Object.extend(lively.bindings, {\n                     lively.morphic.inspect(con.getSourceValue());\n                 }],\n                 ['Hide', function() {\n-                    visualConnector.disconnectFromMagnets();\n-                    visualConnector.remove();\n-                    visualConnector.hide && visualConnector.hide();\n-                    con.autoShowAndHideConnections && con.autoShowAndHideConnections.invoke('disconnect');\n+                    visualConnector.hidePermanently();\n                 }],\n                 ['Disconnect', function() {\n                     alertOK('Disconnected ' + visualConnector.con);"

         }

      ]

   },

   {

      "sha": "8e0091127144fb7ce051d3adcf37b9a45cbef5e5",

      "commit": {

         "author": {

            "name": "larswassermann",

            "email": "lars.wassermann@gmail.com",

            "date": "2013-12-24T18:32:38Z"

         },

         "committer": {

            "name": "lively-web",

            "email": "unknown-user@lively-web.org",

            "date": "2014-01-07T22:36:09Z"

         },

         "message": "History Browser Addon:\n    When used, allows back and forward navigation in the SystemBrowser. To install either load file during world startup and set the 'useHistoryTracking'-option to true, or use the PartsBin/Tools/HistoryBrowserAddon (which also allows for single window modification).",

         "tree": {

            "sha": "7c2302bfc965de007e7948e942ce08eb2433067b",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/7c2302bfc965de007e7948e942ce08eb2433067b"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/8e0091127144fb7ce051d3adcf37b9a45cbef5e5",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/8e0091127144fb7ce051d3adcf37b9a45cbef5e5",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/8e0091127144fb7ce051d3adcf37b9a45cbef5e5",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/8e0091127144fb7ce051d3adcf37b9a45cbef5e5/comments",

      "author": null,

      "committer": null,

      "parents": [

         {

            "sha": "a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/a24bec1723b0495f9cd9e34a83b3fe43c926cdd7"

         }

      ],

      "stats": {

         "total": 431,

         "additions": 431,

         "deletions": 0

      },

      "files": [

         {

            "sha": "bb2b8e612355eba26fe776b78739af1b9349d987",

            "filename": "core/lively/ide/SystemCodeBrowserAddons.js",

            "status": "added",

            "additions": 244,

            "deletions": 0,

            "changes": 244,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/8e0091127144fb7ce051d3adcf37b9a45cbef5e5/core/lively/ide/SystemCodeBrowserAddons.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/8e0091127144fb7ce051d3adcf37b9a45cbef5e5/core/lively/ide/SystemCodeBrowserAddons.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively…de/SystemCodeBrowserAddons.js?ref=8e0091127144fb7ce051d3adcf37b9a45cbef5e5",

            "patch": "@@ -0,0 +1,244 @@\n+module('lively.ide.SystemCodeBrowserAddons').requires('lively.ide.SystemCodeBrowser').toRun(function() {\n+\n+Config.addOption({name: 'historyBrowserMaxLength', value: 15, docString: 'Upper bound for navigating back in a browser with history addon.', group: 'lively.ide.tools', type: 'number'});\n+\n+Object.subclass('lively.ide.SCBAddons.History',\n+'settings', {\n+    documentation: 'Modification of the SCB to add History Browsing',\n+    isSystemBrowser: true,\n+    readme: function() {\n+        // var scb = new lively.ide.SystemBrowser(),\n+        //     hist = new lively.ide.SCBAddons.History(scb);\n+        // hist.history\n+        // hist.backInTime(1);\n+        \n+        // Issues:\n+        //   - switching url does not switch to a new rootNode in SCB. Therefore, we have \n+        //     to specialize to it, and are not compatible with other BasicBrowser-subclasses.\n+        return 'I am an addon to the Source Code Browser, adding two buttons and allowing history navigation.'\n+    },\n+},\n+'initializing', {\n+    initialize: function($super, browser) {\n+        this.history = [];\n+        if (browser) {\n+            this.latchOnTo(browser);\n+        }\n+    },\n+},\n+'history management', {\n+    paneNSelectionOf: function(switchedTo) {\n+        // The pane are set to unselected (null) frequently.\n+        if(!switchedTo.node  || (this.history.length > 0 && switchedTo.node === this.history[this.history.length - 1].node))\n+            return;\n+        this.history.push(switchedTo)\n+        if( this.history.length > (Config.get('historyBrowserMaxLength') || 15)){\n+            this.history.shift();\n+        };\n+        // Possible Improvement: detect whether switchedTo was a step into the future and only remove that from the future...\n+        this.future = [];\n+    },\n+    backInTime: function(n) {\n+        this.assertLatchedOn();\n+        var steps = n || 1,\n+            switchTo;\n+\n+        if(this.history.length <= steps) {\n+            alert('Not enough history recorded to go back further. You can configure the number of steps by setting \"Config.historyBrowserMaxLength\" to the number of steps.');\n+            return;\n+        }\n+        var history = this.history.slice(0, -steps), // copy the array part that should be kept\n+            future = this.history.slice(-steps).concat(this.future);\n+        if (history.length == 0) alert('something\"s wrong');\n+        switchTo = history[ history.length - 1];\n+        // alertOK('switching to node ' \n+        //                 + String(switchTo.node) + ' in pane ' \n+        //                 + switchTo.pane + '(' + this.history.length + ' left)');\n+\n+        this.switchTo(switchTo.node, switchTo.pane)\n+        this.history = history;\n+        this.future = future;\n+    },\n+    forwardInTime: function(n) {\n+        this.assertLatchedOn();\n+        var steps = n || 1,\n+            switchTo;\n+\n+        if(this.future.length < steps) {\n+            return;\n+        }\n+        var history = this.history.concat(this.future.slice(0, steps)),\n+            future = this.future.slice(steps);\n+        if (history.length == 0) alert('something\"s wrong');\n+        switchTo = history[ history.length - 1];\n+\n+        this.switchTo(switchTo.node, switchTo.pane)\n+        this.history = history;\n+        this.future = future;\n+    },\n+    assertLatchedOn: function() {\n+        if(!this.browser) {\n+            throw(new Error(\"Can not go back in time when there is no browser attached.\"))\n+        }\n+    },\n+},\n+'browser modification',{\n+    switchTo: function(node, paneNr) {\n+        this.assertLatchedOn();\n+        if (paneNr > 1 && this.browser['getPane' + (paneNr - 1) + 'Selection']() != node.parent){\n+            this.switchTo(node.parent, paneNr - 1)\n+        } else {\n+            if (paneNr == 1 && this.browser.rootNode() !== node.parent) {\n+                // this is not supported, because the rootNode is not switched out when switching \n+                // between folders in the SCB\n+                throw new Error(\"this should not happen...\")\n+            };\n+            if (paneNr == 1)\n+                if(node.url) { \n+                    if (!node.url().getDirectory().eq(this.browser.targetURL))\n+                        this.browser.setTargetURL(node.url().getDirectory())\n+                } else if (node.completeURL) {\n+                    this.browser.setTargetURL(node.completeURL());\n+                    return;\n+                } else {\n+                    if (this.browser.constructor === lively.ide.SystemBrowser)\n+                        throw new Error('This case should not arrise in the SCB');\n+                }\n+        }\n+        // At least for javascript, the tree of nodes is not cached, but recreated whenever \n+        // needed for display. As a result, we need to find the newly created node with the \n+        // same name, for reshowing, in case our parent was switched away from in the meantime.\n+        var nodeName = node.asString(),\n+            newNodes = this.browser['getPane' + paneNr + 'Content'](),\n+            replacementNode = newNodes.find(function(listItem) { \n+                return listItem.value === node || listItem.value.asString() == nodeName});\n+        if (!replacementNode) throw new Error('Error finding recreated node.');\n+        this.browser['setPane' + paneNr + 'Selection'](replacementNode.value)\n+    },\n+\n+\n+    latchOnTo: function(browser) {\n+        if(browser.panel.backInHistoryButton || browser.history) {\n+            alert('That browser already can go back.');\n+            return;\n+        }\n+        if(this.browser) {\n+            alert('This object already tracks changes for a browser.')\n+            return;\n+        }\n+        this.browser = browser\n+        connect(browser, 'pane1Selection', this, 'paneNSelectionOf', \n+                {converter: function(newNode) { return {pane: 1, node: newNode}}});\n+        connect(browser, 'pane2Selection', this, 'paneNSelectionOf', \n+                {converter: function(newNode) { return {pane: 2, node: newNode}}});\n+        connect(browser, 'pane3Selection', this, 'paneNSelectionOf', \n+                {converter: function(newNode) { return {pane: 3, node: newNode}}});\n+        connect(browser, 'pane4Selection', this, 'paneNSelectionOf', \n+                {converter: function(newNode) { return {pane: 4, node: newNode}}});\n+        \n+        var forwardButton = this.addForwardButtonTo(browser);\n+        var backButton = this.addBackButtonTo(browser);\n+\n+        browser.history = this;\n+        this.buttons = [backButton, forwardButton];\n+    },\n+    addButtonToSCB: function(browser, label) {\n+        var panel = browser.panel,\n+            buttonExtent = panel.locationPaneMenuButton.getExtent(),\n+            newLocationPaneExtent = panel.locationPane.getExtent().subXY(buttonExtent.x, 0);\n+        panel.locationPane.setExtent(newLocationPaneExtent);\n+\n+        var pos = panel.locationPaneMenuButton.getPosition(),\n+            bounds = new lively.Rectangle(pos.x, pos.y, buttonExtent.x, buttonExtent.y),\n+            button = new lively.morphic.Button(bounds, label);\n+        panel.addMorph(button);\n+        panel.locationPaneMenuButton.setPosition(panel.locationPaneMenuButton.getPosition().subXY(buttonExtent.x, 0));\n+        panel.backInHistoryButton = button;\n+        \n+        button.history = this;\n+        button.applyStyle({\n+          scaleHorizontal: true,\n+          scaleVertical: true\n+        })\n+        \n+        return button\n+    },\n+    addBackButtonTo: function(browser) {\n+        var backButton = this.addButtonToSCB(browser, '<');\n+\n+        connect(backButton, 'fire', this, 'backInTime');\n+        backButton.setName('Step back')\n+\n+        backButton.enableMorphMenu();\n+        backButton.morphMenuItems = function() { return this.history.backMenuItems(); };\n+\n+        return backButton;\n+    },\n+    addForwardButtonTo: function(browser) {\n+        var button = this.addButtonToSCB(browser, '>');\n+\n+        connect(button, 'fire', this, 'forwardInTime');\n+        button.setName('Step forward')\n+\n+        button.enableMorphMenu();\n+        button.morphMenuItems = function() { return this.history.forwardMenuItems(); };\n+\n+        return button;\n+    },\n+},\n+'menus', {\n+    backMenuItems: function() {\n+        var self = this,\n+            historyLength = this.history.length;\n+        return this.history.slice(0, -1).collect(function(record, index) {\n+            return [self.getNameFor(record), function() {self.backInTime(historyLength - 1 - index)}]\n+        }).reverse()\n+    },\n+    forwardMenuItems: function() {\n+        var self = this;\n+        return this.future.collect(function(record, index) {\n+            return [self.getNameFor(record), function() {self.forwardInTime(index + 1)}]\n+        })\n+    },\n+    getNameFor: function(record) {\n+        var descriptor = '',\n+            nodeString;\n+        // parallel iteration over the parent chain and the panel numbers, \n+        // in order to stop when either there is no parent or we reached \n+        // the 0th panel, i.e. the root node.\n+        for(var node = record.node,\n+                max = record.pane; \n+            max >= 1 && node; \n+            max--, node = node.parent){\n+                if ((record.pane > 3 && max == 3) || record.pane > 1 && max == 1) \n+                    continue;\n+                nodeString = max == 1 ? node.asString() : node.getName();\n+                if (record.pane == 3 && max == 2)\n+                    descriptor = nodeString + ' (' + descriptor.slice(0, -3) + ') : '\n+                else if (record.pane == 4 && max == 2)\n+                    descriptor = nodeString + ' >> ' + descriptor;\n+                else\n+                    descriptor = nodeString + ' : ' + descriptor;\n+        };\n+        // remove final delimiter\n+        return descriptor.slice(0, -3);\n+    },\n+}); // end of class\n+\n+Config.addOption({name: 'useHistoryTracking', value: false, docString: 'When loading lively.ide.SystemCodeBrowserAddons, install history browsing for all future Browsers, or not.', group: 'lively.ide.tools', type: 'boolean'});\n+if(Config.get('useHistoryTracking')) {\n+'setupLocationInput'\n+    var browserPrototype = lively.ide.BasicBrowser.prototype,\n+        setupFn = browserPrototype.setupLocationInput;\n+    if (setupFn.oldSetup) { return; }\n+    browserPrototype.setupLocationInput = function($super) {\n+        var value = $super.apply(this, arguments);\n+        new lively.ide.SCBAddons.History(this);\n+        return value\n+    }.bind(setupFn);\n+    browserPrototype.setupLocationInput.oldSetup = setupFn;\n+    \n+}\n+\n+\n+}) // end of module"

         },

         {

            "sha": "2742232a7be4327c46eeee1e9b04e0a876c320ad",

            "filename": "core/lively/ide/tests/BrowserAddonTests.js",

            "status": "added",

            "additions": 187,

            "deletions": 0,

            "changes": 187,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/8e0091127144fb7ce051d3adcf37b9a45cbef5e5/core/lively/ide/tests/BrowserAddonTests.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/8e0091127144fb7ce051d3adcf37b9a45cbef5e5/core/lively/ide/tests/BrowserAddonTests.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively…de/tests/BrowserAddonTests.js?ref=8e0091127144fb7ce051d3adcf37b9a45cbef5e5",

            "patch": "@@ -0,0 +1,187 @@\n+module('lively.ide.tests.BrowserAddonTests').requires('lively.TestFramework', 'lively.ide', 'lively.ide.SystemCodeBrowserAddons').toRun(function() {\n+\n+// Browser related tests\n+AsyncTestCase.subclass('lively.ide.tests.SCBAddons.HistoryTest', \n+'testing', {\n+    setUp: function() {\n+        var browser = this.createBrowser(),\n+            root = this.createMockNode(browser, [\n+                this.createMockNode(browser, [\n+                        this.createMockNode(browser, [\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method1'),\n+                                    this.createMockNode(browser, [], undefined, 'method2'),\n+                                    this.createMockNode(browser, [], undefined, 'method3'),\n+                                ], undefined, '-- all --'),\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method1'),\n+                                    this.createMockNode(browser, [], undefined, 'method2'),\n+                                    this.createMockNode(browser, [], undefined, 'method3'),\n+                                ], undefined, 'default category'),\n+                        ], undefined, 'class1'),\n+                        this.createMockNode(browser, [\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method4'),\n+                                    this.createMockNode(browser, [], undefined, 'method5'),\n+                                ], undefined, '-- all --'),\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method4'),\n+                                    this.createMockNode(browser, [], undefined, 'method5'),\n+                                ], undefined, 'initialization'),\n+                        ], undefined, 'class2'),\n+                    ], undefined, 'file1'),\n+                this.createMockNode(browser, [\n+                        this.createMockNode(browser, [\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method6'),\n+                                ], undefined, '-- all --'),\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method6'),\n+                                ], undefined, 'default category'),\n+                        ], undefined, 'class3'),\n+                    ], undefined, 'file2'),\n+                this.createMockNode(browser, [\n+                        this.createMockNode(browser, [\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method7'),\n+                                    this.createMockNode(browser, [], undefined, 'method8'),\n+                                ], undefined, '-- all --'),\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method7'),\n+                                ], undefined, 'initialization'),\n+                            this.createMockNode(browser, [\n+                                    this.createMockNode(browser, [], undefined, 'method8'),\n+                                ], undefined, 'default category'),\n+                        ], undefined, 'class4'),\n+                        this.createMockNode(browser, [\n+                            this.createMockNode(browser, [], undefined, '-- all --'),\n+                        ], undefined, 'class5'),\n+                    ], undefined, 'file3'),\n+                ], undefined, 'root');\n+        browser.rootNode = function() { return root };\n+        browser.confirm = function(question, callback) { callback.call(this, true) }\n+        browser.buildView()\n+        this.browser = browser;\n+        if(! browser.history){\n+            new lively.ide.SCBAddons.History(browser);\n+        };\n+        this.history = browser.history;\n+    },\n+\n+    createBrowser: function() {\n+        return new lively.ide.BasicBrowser();\n+    },\n+\n+    mockNodeClass: lively.ide.BrowserNode.subclass('lively.ide.tests.SCBTests.MockNode', {\n+        initialize: function($super, target, browser, c) { $super(target, browser); this.children = c || [] },\n+        childNodes: function() { return this.children; },\n+        f: function() { return this.children[0]; },\n+        s: function() { return this.children[1]; },\n+        t: function() { return this.children[2]; },\n+    }),\n+\n+    createMockNode: function(browser, children, target, name) {\n+        var node = new this.mockNodeClass(target, browser, children);\n+        if (name) {\n+            node.asString = function() { return this.name; }\n+            node.toString = function() { return '\"' + this.name + '\"'; };\n+            node.name = name\n+        }\n+        children.forEach(function(ea) { ea.parent = node });\n+        return node;\n+    },\n+\n+    testHistoryRecordingMethods: function() {\n+        var browser = this.browser,\n+            rN = browser.rootNode(),\n+            c1all = rN.f().f().f();\n+        \n+        this.browsePath([rN.f(), rN.f().f(), c1all, \n+                    c1all.f(), c1all.s(), c1all.t(), \n+                    c1all.s(), c1all.f()], this.browser);\n+        this.done();\n+    },\n+    testHistoryRecordingClassSwitch: function() {\n+        var browser = this.browser,\n+            rN = browser.rootNode(),\n+            c22 = rN.f().s().s(),\n+            c12 = rN.f().f().s();\n+        \n+        this.browsePath([rN.f(), rN.f().s(), c22, \n+                    c22.s(), c22.f(), rN.f().f(),\n+                    c12, c12.s()], this.browser);\n+        this.done();\n+    },\n+    testHistoryRecordingFileSwitch: function() {\n+        var browser = this.browser,\n+            rN = browser.rootNode(),\n+            f2 = rN.s(),\n+            f3 = rN.t(),\n+            c3 = f2.f(),\n+            c5 = f3.s();\n+        \n+        this.browsePath([f3, c5, f2, c3, c3.f(), c3.s(), c3.s().f()], this.browser);\n+        this.done();\n+    },\n+    testBackAcrossMethods: function() {\n+        var browser = this.browser,\n+            rN = browser.rootNode(),\n+            c1all = rN.f().f().f(),\n+            m1 = c1all.f(), m2 = c1all.s(), m3 = c1all.t();\n+        \n+        this.browsePath([rN.f(), rN.f().f(), c1all, \n+                    m1, m2, m3, m2, m1], this.browser);\n+        this.backTo([rN.f(), rN.f().f(), c1all, m2], 1); \n+        this.backTo([rN.f(), rN.f().f(), c1all, m3], 1);\n+        this.backTo([rN.f(), rN.f().f(), c1all], 3);\n+        this.done();\n+    },\n+    testBackAcrossFiles: function() {\n+        var browser = this.browser,\n+            rN = browser.rootNode(),\n+            f2 = rN.s(), f3 = rN.t(),\n+            c3 = f2.f(), c5 = f3.s();\n+        \n+        this.browsePath([f3, c5, f2, c3, c3.f(), c3.s(), c3.s().f()], this.browser);\n+        this.backTo([f2, c3, c3.f()], 2);\n+        this.backTo([f2, c3], 1);\n+        this.backTo([f3, c5], 2);\n+        this.done();\n+    },\n+    testSwitchTo: function() {\n+        var browser = this.browser,\n+            rN = browser.rootNode(),\n+            f3 = rN.t(), c5 = f3.s(),\n+            f1 = rN.f(), c1 = f1.f(), m2 = c1.f().s();\n+        \n+        this.history.switchTo(c5, 2);\n+        this.assertEquals(browser.getPane1Selection(), f3, 'parent not switched')\n+        this.assertEquals(browser.getPane2Selection(), c5, 'node not browsed')\n+        this.history.switchTo(m2, 4);\n+        this.assertEquals(browser.getPane1Selection(), f1, 'file not switched')\n+        this.assertEquals(browser.getPane2Selection(), c1, 'class not switched')\n+        this.assertEquals(browser.getPane3Selection(), c1.f(), 'protocol not switched')\n+        this.assertEquals(browser.getPane4Selection(), m2, 'node not browsed')\n+        this.done();\n+    },\n+}, 'testing helper', {\n+    browsePath: function(path, browser) {\n+        var selected = path.map(function(ea) {\n+            return browser.selectNode(ea);\n+            }, this),\n+            recordedHistory = this.history.history.map(function(ea) { return ea.node; })\n+        \n+        // inspect({path: path, hist: recordedHistory, selected: selected, selectedNode: browser.selectedNode()});\n+        this.assertEquals(selected, path, 'the path is not walked correctly');\n+        this.assertEquals(recordedHistory, path, 'the history is not recorded correctly');\n+    },\n+    backTo: function(selectedNodes, n){\n+        this.history.backInTime(n);\n+        this.assert(selectedNodes[0] == this.browser.getPane1Selection(), 'wrong file selected');\n+        this.assert(selectedNodes[1] == this.browser.getPane2Selection(), 'wrong class selected');\n+        this.assert(selectedNodes[2] == this.browser.getPane3Selection(), 'wrong category selected');\n+        this.assert(selectedNodes[3] == this.browser.getPane4Selection(), 'wrong method selected');\n+        this.assertEquals(selectedNodes[selectedNodes.length - 1], this.history.history[this.history.history.length - 1].node)\n+    },\n+});\n+}) // end of module"

         }

      ]

   },

   {

      "sha": "c81336c9206a8ba4e3d98c5162bea940fd8743fe",

      "commit": {

         "author": {

            "name": "Lars Wassermann",

            "email": "lars.wassermann@gmail.com",

            "date": "2014-01-08T00:09:33Z"

         },

         "committer": {

            "name": "Lars Wassermann",

            "email": "lars.wassermann@gmail.com",

            "date": "2014-01-08T00:09:33Z"

         },

         "message": "Changed OMetaWorkspace starting string to avoid future problems when trying to learn OMeta using that workspaces example (using matchAll instead of match)",

         "tree": {

            "sha": "a19641aded4ff9c3f92e91d2cf441a823e07041a",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/a19641aded4ff9c3f92e91d2cf441a823e07041a"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/c81336c9206a8ba4e3d98c5162bea940fd8743fe",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/c81336c9206a8ba4e3d98c5162bea940fd8743fe",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/c81336c9206a8ba4e3d98c5162bea940fd8743fe",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/c81336c9206a8ba4e3d98c5162bea940fd8743fe/comments",

      "author": null,

      "committer": null,

      "parents": [

         {

            "sha": "40c742813dd4cf5770e5ebf557ae8b3e26072765",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/40c742813dd4cf5770e5ebf557ae8b3e26072765",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/40c742813dd4cf5770e5ebf557ae8b3e26072765"

         }

      ],

      "stats": {

         "total": 2,

         "additions": 1,

         "deletions": 1

      },

      "files": [

         {

            "sha": "49e7e10cba2d9c3d87ed4892c517b2d71df7a323",

            "filename": "core/lively/ide/tools/OMetaWorkspace.json",

            "status": "modified",

            "additions": 1,

            "deletions": 1,

            "changes": 2,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/c81336c9206a8ba4e3d98c5162bea940fd8743fe/core/lively/ide/tools/OMetaWorkspace.json",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/c81336c9206a8ba4e3d98c5162bea940fd8743fe/core/lively/ide/tools/OMetaWorkspace.json",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/tools/OMetaWorkspace.json?ref=c81336c9206a8ba4e3d98c5162bea940fd8743fe",

            "patch": "@@ -1 +1 @@\n-{\"id\":0,\"registry\":{\"0\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":1},{\"__isSmartRef__\":true,\"id\":49},{\"__isSmartRef__\":true,\"id\":62},{\"__isSmartRef__\":true,\"id\":65},{\"__isSmartRef__\":true,\"id\":68}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":71},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"6EBBB3E9-3077-42A0-ADEF-92E440D746C6\",\"droppingEnabled\":false,\"halosEnabled\":true,\"draggingEnabled\":true,\"layout\":{\"__isSmartRef__\":true,\"id\":72},\"reframeHandle\":{\"__isSmartRef__\":true,\"id\":62},\"rightReframeHandle\":{\"__isSmartRef__\":true,\"id\":68},\"bottomReframeHandle\":{\"__isSmartRef__\":true,\"id\":65},\"titleBar\":{\"__isSmartRef__\":true,\"id\":1},\"collapsedTransform\":null,\"collapsedExtent\":null,\"expandedTransform\":null,\"expandedExtent\":null,\"ignoreEventsOnExpand\":false,\"_PreviousBorderWidth\":0,\"targetMorph\":{\"__isSmartRef__\":true,\"id\":49},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":73},\"highlighted\":false,\"isBeingDragged\":false,\"__serializedExpressions__\":[\"_Position\",\"contentOffset\",\"prevDragPos\"],\"showsHalos\":false,\"partsBinMetaInfo\":{\"__isSmartRef__\":true,\"id\":74},\"name\":\"OMetaWorkspace\",\"_Scale\":1,\"__LivelyClassName__\":\"lively.morphic.Window\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"withoutLayers\":[\"Global.lively.morphic.GrabbingLayer\"],\"_Position\":\"lively.pt(0.0,0.0)\",\"contentOffset\":\"lively.pt(4.0,22.0)\",\"prevDragPos\":\"lively.pt(618.0,112.0)\"},\"1\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":2},{\"__isSmartRef__\":true,\"id\":8},{\"__isSmartRef__\":true,\"id\":21},{\"__isSmartRef__\":true,\"id\":33}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":46},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"F7751F93-33FC-44A7-B637-C41E80735D5B\",\"droppingEnabled\":false,\"halosEnabled\":true,\"layout\":{\"__isSmartRef__\":true,\"id\":47},\"windowMorph\":{\"__isSmartRef__\":true,\"id\":0},\"label\":{\"__isSmartRef__\":true,\"id\":2},\"closeButton\":{\"__isSmartRef__\":true,\"id\":8},\"menuButton\":{\"__isSmartRef__\":true,\"id\":21},\"collapseButton\":{\"__isSmartRef__\":true,\"id\":33},\"_PreviousBorderWidth\":0,\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":48},\"__serializedExpressions__\":[\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.TitleBar\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(0.0,0.0)\"},\"2\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":3},\"_WhiteSpaceHandling\":\"pre-wrap\",\"textChunks\":[{\"__isSmartRef__\":true,\"id\":4}],\"_ClipMode\":\"hidden\",\"derivationIds\":[],\"id\":\"4A62A58F-5F08-4756-8BFA-0823487175D8\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"fixedWidth\":true,\"_WordBreak\":\"break-all\",\"fixedHeight\":true,\"_InputAllowed\":false,\"_HandStyle\":\"default\",\"allowInput\":false,\"_FontFamily\":\"Helvetica\",\"_FontSize\":10,\"evalEnabled\":false,\"isLabel\":true,\"eventsAreIgnored\":true,\"layout\":{\"__isSmartRef__\":true,\"id\":6},\"owner\":{\"__isSmartRef__\":true,\"id\":1},\"_StyleClassNames\":[\"window-title\"],\"_TextStylingMode\":true,\"eventHandler\":{\"__isSmartRef__\":true,\"id\":7},\"__serializedExpressions__\":[\"_TextColor\",\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.Text\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\",\"_TextColor\":\"Color.rgb(64,64,64)\",\"_Position\":\"lively.pt(20.0,3.0)\"},\"3\":{\"_BorderWidth\":0,\"_Fill\":null,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(570.0,18.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_BorderColor\":\"Color.rgb(0,0,0)\"},\"4\":{\"style\":{\"__isSmartRef__\":true,\"id\":5},\"chunkOwner\":{\"__isSmartRef__\":true,\"id\":2},\"_id\":\"_615\",\"storedString\":\"OMeta Workspace\",\"__LivelyClassName__\":\"lively.morphic.TextChunk\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"5\":{\"textShadow\":\"0px 1px 0 rgba(255,255,255,1)\",\"__LivelyClassName__\":\"lively.morphic.TextEmphasis\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"6\":{\"resizeWidth\":true},\"7\":{\"morph\":{\"__isSmartRef__\":true,\"id\":2},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"8\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":9}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":14},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"38693253-E4EB-4313-AD37-F9EEF7ABC8FA\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"accessibleInInactiveWindow\":true,\"value\":false,\"toggle\":false,\"isActive\":true,\"label\":{\"__isSmartRef__\":true,\"id\":9},\"_PreviousBorderWidth\":0,\"owner\":{\"__isSmartRef__\":true,\"id\":1},\"layout\":{\"__isSmartRef__\":true,\"id\":15},\"_StyleClassNames\":[\"close\"],\"attributeConnections\":[{\"__isSmartRef__\":true,\"id\":16},{\"__isSmartRef__\":true,\"id\":18}],\"doNotSerialize\":[\"$$getHelpText\",\"$$fire\"],\"doNotCopyProperties\":[\"$$getHelpText\",\"$$fire\"],\"eventHandler\":{\"__isSmartRef__\":true,\"id\":20},\"isPressed\":false,\"__serializedExpressions__\":[\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.WindowControl\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(609.0,3.0)\"},\"9\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":10},\"_WhiteSpaceHandling\":\"pre-wrap\",\"textChunks\":[{\"__isSmartRef__\":true,\"id\":11}],\"_ClipMode\":\"hidden\",\"derivationIds\":[],\"id\":\"0F6EF5DD-942B-43FF-AD75-CB64283BFE18\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"fixedWidth\":true,\"_WordBreak\":\"break-all\",\"fixedHeight\":true,\"_InputAllowed\":false,\"_HandStyle\":\"default\",\"allowInput\":false,\"_FontFamily\":\"Helvetica\",\"_FontSize\":8,\"evalEnabled\":false,\"owner\":{\"__isSmartRef__\":true,\"id\":8},\"isLabel\":true,\"eventsAreIgnored\":true,\"_TextStylingMode\":true,\"eventsAreDisabled\":true,\"_PointerEvents\":\"none\",\"eventHandler\":{\"__isSmartRef__\":true,\"id\":13},\"__serializedExpressions__\":[\"_TextColor\",\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.Text\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\",\"_TextColor\":\"Color.rgb(64,64,64)\",\"_Position\":\"lively.pt(0.0,-1.0)\"},\"10\":{\"_BorderWidth\":0,\"_Fill\":null,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(4,2,0,0)\",\"_BorderColor\":\"Color.rgb(0,0,0)\"},\"11\":{\"style\":{\"__isSmartRef__\":true,\"id\":12},\"chunkOwner\":{\"__isSmartRef__\":true,\"id\":9},\"_id\":\"_186\",\"storedString\":\"X\",\"__LivelyClassName__\":\"lively.morphic.TextChunk\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"12\":{\"textShadow\":\"0px 1px 0 rgba(255,255,255,1)\",\"__LivelyClassName__\":\"lively.morphic.TextEmphasis\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"13\":{\"morph\":{\"__isSmartRef__\":true,\"id\":9},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"14\":{\"_BorderWidth\":1,\"_StrokeOpacity\":0,\"_BorderRadius\":5,\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_BorderColor\":\"Color.rgb(189,190,192)\"},\"15\":{\"moveHorizontal\":true},\"16\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":8},\"sourceAttrName\":\"getHelpText\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"getCloseHelp\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":17},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"17\":{\"source\":{\"__isSmartRef__\":true,\"id\":8},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"18\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":8},\"sourceAttrName\":\"fire\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"initiateShutdown\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":19},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"19\":{\"source\":{\"__isSmartRef__\":true,\"id\":8},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"20\":{\"morph\":{\"__isSmartRef__\":true,\"id\":8},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"21\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":22}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":27},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"A6CB5142-3E79-4090-AD76-66EEC5253EF7\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"accessibleInInactiveWindow\":true,\"value\":false,\"toggle\":false,\"isActive\":true,\"label\":{\"__isSmartRef__\":true,\"id\":22},\"_PreviousBorderWidth\":0,\"owner\":{\"__isSmartRef__\":true,\"id\":1},\"attributeConnections\":[{\"__isSmartRef__\":true,\"id\":28},{\"__isSmartRef__\":true,\"id\":30}],\"doNotSerialize\":[\"$$getHelpText\",\"$$fire\"],\"doNotCopyProperties\":[\"$$getHelpText\",\"$$fire\"],\"eventHandler\":{\"__isSmartRef__\":true,\"id\":32},\"isPressed\":false,\"__serializedExpressions__\":[\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.WindowControl\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(3.0,3.0)\"},\"22\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":23},\"_WhiteSpaceHandling\":\"pre-wrap\",\"textChunks\":[{\"__isSmartRef__\":true,\"id\":24}],\"_ClipMode\":\"hidden\",\"derivationIds\":[],\"id\":\"AD2D233A-B8F9-4924-8E42-2B5B340589F6\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"fixedWidth\":true,\"_WordBreak\":\"break-all\",\"fixedHeight\":true,\"_InputAllowed\":false,\"_HandStyle\":\"default\",\"allowInput\":false,\"_FontFamily\":\"Helvetica\",\"_FontSize\":8,\"evalEnabled\":false,\"owner\":{\"__isSmartRef__\":true,\"id\":21},\"isLabel\":true,\"eventsAreIgnored\":true,\"_TextStylingMode\":true,\"eventsAreDisabled\":true,\"_PointerEvents\":\"none\",\"eventHandler\":{\"__isSmartRef__\":true,\"id\":26},\"__serializedExpressions__\":[\"_TextColor\",\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.Text\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\",\"_TextColor\":\"Color.rgb(64,64,64)\",\"_Position\":\"lively.pt(0.0,0.0)\"},\"23\":{\"_BorderWidth\":0,\"_Fill\":null,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(4,2,0,0)\",\"_BorderColor\":\"Color.rgb(0,0,0)\"},\"24\":{\"style\":{\"__isSmartRef__\":true,\"id\":25},\"chunkOwner\":{\"__isSmartRef__\":true,\"id\":22},\"_id\":\"_188\",\"storedString\":\"M\",\"__LivelyClassName__\":\"lively.morphic.TextChunk\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"25\":{\"textShadow\":\"0px 1px 0 rgba(255,255,255,1)\",\"__LivelyClassName__\":\"lively.morphic.TextEmphasis\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"26\":{\"morph\":{\"__isSmartRef__\":true,\"id\":22},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"27\":{\"_BorderWidth\":1,\"_StrokeOpacity\":0,\"_BorderRadius\":5,\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_BorderColor\":\"Color.rgb(189,190,192)\"},\"28\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":21},\"sourceAttrName\":\"getHelpText\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"getMenuHelp\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":29},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"29\":{\"source\":{\"__isSmartRef__\":true,\"id\":21},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"30\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":21},\"sourceAttrName\":\"fire\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"showTargetMorphMenu\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":31},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"31\":{\"source\":{\"__isSmartRef__\":true,\"id\":21},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"32\":{\"morph\":{\"__isSmartRef__\":true,\"id\":21},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"33\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":34}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":39},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"DB7D2361-5622-41E3-8582-163B2966B5D5\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"accessibleInInactiveWindow\":true,\"value\":false,\"toggle\":false,\"isActive\":true,\"label\":{\"__isSmartRef__\":true,\"id\":34},\"_PreviousBorderWidth\":0,\"owner\":{\"__isSmartRef__\":true,\"id\":1},\"layout\":{\"__isSmartRef__\":true,\"id\":40},\"attributeConnections\":[{\"__isSmartRef__\":true,\"id\":41},{\"__isSmartRef__\":true,\"id\":43}],\"doNotSerialize\":[\"$$getHelpText\",\"$$fire\"],\"doNotCopyProperties\":[\"$$getHelpText\",\"$$fire\"],\"eventHandler\":{\"__isSmartRef__\":true,\"id\":45},\"isPressed\":false,\"__serializedExpressions__\":[\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.WindowControl\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(590.0,3.0)\"},\"34\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":35},\"_WhiteSpaceHandling\":\"pre-wrap\",\"textChunks\":[{\"__isSmartRef__\":true,\"id\":36}],\"_ClipMode\":\"hidden\",\"derivationIds\":[],\"id\":\"0D59169F-416F-414E-B5DC-BB3671340AE5\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"fixedWidth\":true,\"_WordBreak\":\"break-all\",\"fixedHeight\":true,\"_InputAllowed\":false,\"_HandStyle\":\"default\",\"allowInput\":false,\"_FontFamily\":\"Helvetica\",\"_FontSize\":8,\"evalEnabled\":false,\"owner\":{\"__isSmartRef__\":true,\"id\":33},\"isLabel\":true,\"eventsAreIgnored\":true,\"_TextStylingMode\":true,\"eventsAreDisabled\":true,\"_PointerEvents\":\"none\",\"eventHandler\":{\"__isSmartRef__\":true,\"id\":38},\"__serializedExpressions__\":[\"_TextColor\",\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.Text\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\",\"_TextColor\":\"Color.rgb(64,64,64)\",\"_Position\":\"lively.pt(0.0,1.0)\"},\"35\":{\"_BorderWidth\":0,\"_Fill\":null,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(4,2,0,0)\",\"_BorderColor\":\"Color.rgb(0,0,0)\"},\"36\":{\"style\":{\"__isSmartRef__\":true,\"id\":37},\"chunkOwner\":{\"__isSmartRef__\":true,\"id\":34},\"_id\":\"_190\",\"storedString\":\"–\",\"__LivelyClassName__\":\"lively.morphic.TextChunk\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"37\":{\"textShadow\":\"0px 1px 0 rgba(255,255,255,1)\",\"__LivelyClassName__\":\"lively.morphic.TextEmphasis\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"38\":{\"morph\":{\"__isSmartRef__\":true,\"id\":34},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"39\":{\"_BorderWidth\":1,\"_StrokeOpacity\":0,\"_BorderRadius\":5,\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_BorderColor\":\"Color.rgb(189,190,192)\"},\"40\":{\"moveHorizontal\":true},\"41\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":33},\"sourceAttrName\":\"getHelpText\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"getCollapseHelp\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":42},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"42\":{\"source\":{\"__isSmartRef__\":true,\"id\":33},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"43\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":33},\"sourceAttrName\":\"fire\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"toggleCollapse\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":44},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"44\":{\"source\":{\"__isSmartRef__\":true,\"id\":33},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"45\":{\"morph\":{\"__isSmartRef__\":true,\"id\":33},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"46\":{\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"_BorderWidth\":0,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(629.0,22.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\"},\"47\":{\"resizeWidth\":true,\"adjustForNewBounds\":true},\"48\":{\"morph\":{\"__isSmartRef__\":true,\"id\":1},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"49\":{\"storedTextString\":\"ometa Factorial {\\n  fact 0 = -> 1,\\n  fact :n = fact(n-1):m -> (n * m)\\n}\\n\\nFactorial.match(10, 'fact')\\n\",\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":50},\"derivationIds\":[],\"id\":\"D9C2653A-F8F7-45B3-917E-BF33061D5887\",\"grabbingEnabled\":false,\"droppingEnabled\":true,\"halosEnabled\":true,\"_FontSize\":12,\"_ShowGutter\":true,\"_TextMode\":\"text\",\"_Theme\":\"chrome\",\"_LineWrapping\":true,\"_ShowInvisibles\":false,\"_ShowPrintMargin\":true,\"_setShowIndents\":true,\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"hasRobertsKeys\":true,\"_StyleClassNames\":[\"Morph\",\"CodeEditor\",\"ace_editor\",\"emacs-mode\",\"ace_nobold\",\"ace-chrome\"],\"eventHandler\":{\"__isSmartRef__\":true,\"id\":51},\"layout\":{\"__isSmartRef__\":true,\"id\":52},\"accessibleInInactiveWindow\":true,\"_isFocused\":false,\"showsHalos\":false,\"prevScroll\":[0,0],\"__serializedExpressions__\":[\"_Position\"],\"__serializedLivelyClosures__\":{\"__isSmartRef__\":true,\"id\":53},\"__LivelyClassName__\":\"lively.morphic.CodeEditor\",\"__SourceModuleName__\":\"Global.lively.ide.CodeEditor\",\"_Position\":\"lively.pt(4.0,22.0)\"},\"50\":{\"_BorderWidth\":1,\"__serializedExpressions__\":[\"_Extent\",\"_BorderColor\",\"extent\"],\"__LivelyClassName__\":\"lively.morphic.CodeEditorShape\",\"__SourceModuleName__\":\"Global.lively.ide.CodeEditor\",\"_Extent\":\"lively.pt(620.0,276.0)\",\"_BorderColor\":\"Color.rgb(95,94,95)\",\"extent\":\"lively.pt(620.0,276.0)\"},\"51\":{\"morph\":{\"__isSmartRef__\":true,\"id\":49},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"52\":{\"resizeWidth\":true,\"resizeHeight\":true},\"53\":{\"boundEval\":{\"__isSmartRef__\":true,\"id\":54}},\"54\":{\"varMapping\":{\"__isSmartRef__\":true,\"id\":55},\"source\":\"function boundEval(str) {\\n    return OMetaSupport.ometaEval(str);\\n}\",\"funcProperties\":{\"__isSmartRef__\":true,\"id\":60},\"__LivelyClassName__\":\"lively.Closure\",\"__SourceModuleName__\":\"Global.lively.lang.Closure\"},\"55\":{\"this\":{\"__isSmartRef__\":true,\"id\":49},\"__serializedLivelyClosures__\":{\"__isSmartRef__\":true,\"id\":56}},\"56\":{\"$super\":{\"__isSmartRef__\":true,\"id\":57}},\"57\":{\"varMapping\":{\"__isSmartRef__\":true,\"id\":58},\"source\":\"function () {\\n                    try {\\n                        return obj.constructor.prototype[name].apply(obj, arguments)\\n                    } catch (e) {\\n                        if ($world)\\n                            $world.logError(e, 'Error in $super call')\\n                        else\\n                            alert('Error in $super call: ' + e + '\\\\n' + e.stack);\\n                        return null;\\n                    }\\n                }\",\"funcProperties\":{\"__isSmartRef__\":true,\"id\":59},\"__LivelyClassName__\":\"lively.Closure\",\"__SourceModuleName__\":\"Global.lively.lang.Closure\"},\"58\":{\"obj\":{\"__isSmartRef__\":true,\"id\":49},\"name\":\"boundEval\"},\"59\":{},\"60\":{\"timestamp\":{\"__isSmartRef__\":true,\"id\":61},\"user\":\"robertkrahn\",\"tags\":[]},\"61\":{\"isSerializedDate\":true,\"string\":\"Thu Apr 25 2013 19:25:15 GMT-0700 (PDT)\"},\"62\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":63},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"E58FA94C-62F9-4250-A642-A85D83088A69\",\"droppingEnabled\":true,\"halosEnabled\":true,\"__serializedExpressions__\":[\"_Position\"],\"type\":\"corner\",\"_StyleClassNames\":[\"reframe-handle corner\"],\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":64},\"dragStartPoint\":null,\"originalTargetExtent\":null,\"__LivelyClassName__\":\"lively.morphic.ReframeHandle\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(615.0,289.0)\"},\"63\":{\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(14.0,14.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\"},\"64\":{\"morph\":{\"__isSmartRef__\":true,\"id\":62},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"65\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":66},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"03FB70CB-F618-4C9F-8317-46771320ABB5\",\"droppingEnabled\":true,\"halosEnabled\":true,\"__serializedExpressions__\":[\"_Position\"],\"type\":\"bottom\",\"_StyleClassNames\":[\"reframe-handle bottom\"],\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":67},\"__LivelyClassName__\":\"lively.morphic.ReframeHandle\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(0.0,299.0)\"},\"66\":{\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(615.0,4.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\"},\"67\":{\"morph\":{\"__isSmartRef__\":true,\"id\":65},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"68\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":69},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"187AD917-E650-45AC-8E51-BA9766AB1F63\",\"droppingEnabled\":true,\"halosEnabled\":true,\"__serializedExpressions__\":[\"_Position\"],\"type\":\"right\",\"_StyleClassNames\":[\"reframe-handle right\"],\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":70},\"__LivelyClassName__\":\"lively.morphic.ReframeHandle\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(625.0,0.0)\"},\"69\":{\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(4.0,289.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\"},\"70\":{\"morph\":{\"__isSmartRef__\":true,\"id\":68},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"71\":{\"_BorderWidth\":0,\"_Fill\":null,\"_StrokeOpacity\":false,\"_BorderRadius\":false,\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"__serializedExpressions__\":[\"_Padding\",\"_Extent\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_Extent\":\"lively.pt(629.0,303.0)\"},\"72\":{\"adjustForNewBounds\":true},\"73\":{\"morph\":{\"__isSmartRef__\":true,\"id\":0},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"74\":{\"partName\":\"OMetaWorkspace\",\"requiredModules\":[\"lively.Ometa\"],\"partsSpaceName\":\"core/lively/ide/tools/\",\"comment\":\"Workspace for evaluating OMeta code.\",\"changes\":[{\"__isSmartRef__\":true,\"id\":75},{\"__isSmartRef__\":true,\"id\":77}],\"migrationLevel\":7,\"lastModifiedDate\":{\"__isSmartRef__\":true,\"id\":79},\"#startLetters\":\"addR\",\"__LivelyClassName__\":\"lively.PartsBin.PartsBinMetaInfo\",\"__SourceModuleName__\":\"Global.lively.PartsBin\"},\"75\":{\"date\":{\"__isSmartRef__\":true,\"id\":76},\"author\":\"robertkrahn\",\"message\":\"initial commit\",\"id\":\"A5A2FB1A-B069-450A-936E-601C0DAE922F\"},\"76\":{\"isSerializedDate\":true,\"string\":\"Thu Apr 25 2013 21:07:09 GMT-0700 (PDT)\"},\"77\":{\"date\":{\"__isSmartRef__\":true,\"id\":78},\"author\":\"robertkrahn\",\"message\":\"addin lively.Ometa as required module\",\"id\":\"07062275-976F-4809-8652-D2E33CF189AC\"},\"78\":{\"isSerializedDate\":true,\"string\":\"Thu Apr 25 2013 21:08:18 GMT-0700 (PDT)\"},\"79\":{\"isSerializedDate\":true,\"string\":\"Thu Apr 25 2013 21:07:09 GMT-0700 (PDT)\"},\"isSimplifiedRegistry\":true}}\n\\ No newline at end of file\n+{\"id\":0,\"registry\":{\"0\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":1},{\"__isSmartRef__\":true,\"id\":49},{\"__isSmartRef__\":true,\"id\":62},{\"__isSmartRef__\":true,\"id\":65},{\"__isSmartRef__\":true,\"id\":68}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":71},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"6EBBB3E9-3077-42A0-ADEF-92E440D746C6\",\"droppingEnabled\":false,\"halosEnabled\":true,\"draggingEnabled\":true,\"layout\":{\"__isSmartRef__\":true,\"id\":72},\"reframeHandle\":{\"__isSmartRef__\":true,\"id\":62},\"rightReframeHandle\":{\"__isSmartRef__\":true,\"id\":68},\"bottomReframeHandle\":{\"__isSmartRef__\":true,\"id\":65},\"titleBar\":{\"__isSmartRef__\":true,\"id\":1},\"collapsedTransform\":null,\"collapsedExtent\":null,\"expandedTransform\":null,\"expandedExtent\":null,\"ignoreEventsOnExpand\":false,\"_PreviousBorderWidth\":0,\"targetMorph\":{\"__isSmartRef__\":true,\"id\":49},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":73},\"highlighted\":false,\"isBeingDragged\":false,\"__serializedExpressions__\":[\"_Position\",\"contentOffset\",\"prevDragPos\"],\"showsHalos\":false,\"partsBinMetaInfo\":{\"__isSmartRef__\":true,\"id\":74},\"name\":\"OMetaWorkspace\",\"_Scale\":1,\"__LivelyClassName__\":\"lively.morphic.Window\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"withoutLayers\":[\"Global.lively.morphic.GrabbingLayer\"],\"_Position\":\"lively.pt(0.0,0.0)\",\"contentOffset\":\"lively.pt(4.0,22.0)\",\"prevDragPos\":\"lively.pt(618.0,112.0)\"},\"1\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":2},{\"__isSmartRef__\":true,\"id\":8},{\"__isSmartRef__\":true,\"id\":21},{\"__isSmartRef__\":true,\"id\":33}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":46},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"F7751F93-33FC-44A7-B637-C41E80735D5B\",\"droppingEnabled\":false,\"halosEnabled\":true,\"layout\":{\"__isSmartRef__\":true,\"id\":47},\"windowMorph\":{\"__isSmartRef__\":true,\"id\":0},\"label\":{\"__isSmartRef__\":true,\"id\":2},\"closeButton\":{\"__isSmartRef__\":true,\"id\":8},\"menuButton\":{\"__isSmartRef__\":true,\"id\":21},\"collapseButton\":{\"__isSmartRef__\":true,\"id\":33},\"_PreviousBorderWidth\":0,\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":48},\"__serializedExpressions__\":[\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.TitleBar\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(0.0,0.0)\"},\"2\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":3},\"_WhiteSpaceHandling\":\"pre-wrap\",\"textChunks\":[{\"__isSmartRef__\":true,\"id\":4}],\"_ClipMode\":\"hidden\",\"derivationIds\":[],\"id\":\"4A62A58F-5F08-4756-8BFA-0823487175D8\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"fixedWidth\":true,\"_WordBreak\":\"break-all\",\"fixedHeight\":true,\"_InputAllowed\":false,\"_HandStyle\":\"default\",\"allowInput\":false,\"_FontFamily\":\"Helvetica\",\"_FontSize\":10,\"evalEnabled\":false,\"isLabel\":true,\"eventsAreIgnored\":true,\"layout\":{\"__isSmartRef__\":true,\"id\":6},\"owner\":{\"__isSmartRef__\":true,\"id\":1},\"_StyleClassNames\":[\"window-title\"],\"_TextStylingMode\":true,\"eventHandler\":{\"__isSmartRef__\":true,\"id\":7},\"__serializedExpressions__\":[\"_TextColor\",\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.Text\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\",\"_TextColor\":\"Color.rgb(64,64,64)\",\"_Position\":\"lively.pt(20.0,3.0)\"},\"3\":{\"_BorderWidth\":0,\"_Fill\":null,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(570.0,18.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_BorderColor\":\"Color.rgb(0,0,0)\"},\"4\":{\"style\":{\"__isSmartRef__\":true,\"id\":5},\"chunkOwner\":{\"__isSmartRef__\":true,\"id\":2},\"_id\":\"_615\",\"storedString\":\"OMeta Workspace\",\"__LivelyClassName__\":\"lively.morphic.TextChunk\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"5\":{\"textShadow\":\"0px 1px 0 rgba(255,255,255,1)\",\"__LivelyClassName__\":\"lively.morphic.TextEmphasis\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"6\":{\"resizeWidth\":true},\"7\":{\"morph\":{\"__isSmartRef__\":true,\"id\":2},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"8\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":9}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":14},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"38693253-E4EB-4313-AD37-F9EEF7ABC8FA\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"accessibleInInactiveWindow\":true,\"value\":false,\"toggle\":false,\"isActive\":true,\"label\":{\"__isSmartRef__\":true,\"id\":9},\"_PreviousBorderWidth\":0,\"owner\":{\"__isSmartRef__\":true,\"id\":1},\"layout\":{\"__isSmartRef__\":true,\"id\":15},\"_StyleClassNames\":[\"close\"],\"attributeConnections\":[{\"__isSmartRef__\":true,\"id\":16},{\"__isSmartRef__\":true,\"id\":18}],\"doNotSerialize\":[\"$$getHelpText\",\"$$fire\"],\"doNotCopyProperties\":[\"$$getHelpText\",\"$$fire\"],\"eventHandler\":{\"__isSmartRef__\":true,\"id\":20},\"isPressed\":false,\"__serializedExpressions__\":[\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.WindowControl\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(609.0,3.0)\"},\"9\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":10},\"_WhiteSpaceHandling\":\"pre-wrap\",\"textChunks\":[{\"__isSmartRef__\":true,\"id\":11}],\"_ClipMode\":\"hidden\",\"derivationIds\":[],\"id\":\"0F6EF5DD-942B-43FF-AD75-CB64283BFE18\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"fixedWidth\":true,\"_WordBreak\":\"break-all\",\"fixedHeight\":true,\"_InputAllowed\":false,\"_HandStyle\":\"default\",\"allowInput\":false,\"_FontFamily\":\"Helvetica\",\"_FontSize\":8,\"evalEnabled\":false,\"owner\":{\"__isSmartRef__\":true,\"id\":8},\"isLabel\":true,\"eventsAreIgnored\":true,\"_TextStylingMode\":true,\"eventsAreDisabled\":true,\"_PointerEvents\":\"none\",\"eventHandler\":{\"__isSmartRef__\":true,\"id\":13},\"__serializedExpressions__\":[\"_TextColor\",\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.Text\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\",\"_TextColor\":\"Color.rgb(64,64,64)\",\"_Position\":\"lively.pt(0.0,-1.0)\"},\"10\":{\"_BorderWidth\":0,\"_Fill\":null,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(4,2,0,0)\",\"_BorderColor\":\"Color.rgb(0,0,0)\"},\"11\":{\"style\":{\"__isSmartRef__\":true,\"id\":12},\"chunkOwner\":{\"__isSmartRef__\":true,\"id\":9},\"_id\":\"_186\",\"storedString\":\"X\",\"__LivelyClassName__\":\"lively.morphic.TextChunk\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"12\":{\"textShadow\":\"0px 1px 0 rgba(255,255,255,1)\",\"__LivelyClassName__\":\"lively.morphic.TextEmphasis\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"13\":{\"morph\":{\"__isSmartRef__\":true,\"id\":9},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"14\":{\"_BorderWidth\":1,\"_StrokeOpacity\":0,\"_BorderRadius\":5,\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_BorderColor\":\"Color.rgb(189,190,192)\"},\"15\":{\"moveHorizontal\":true},\"16\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":8},\"sourceAttrName\":\"getHelpText\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"getCloseHelp\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":17},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"17\":{\"source\":{\"__isSmartRef__\":true,\"id\":8},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"18\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":8},\"sourceAttrName\":\"fire\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"initiateShutdown\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":19},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"19\":{\"source\":{\"__isSmartRef__\":true,\"id\":8},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"20\":{\"morph\":{\"__isSmartRef__\":true,\"id\":8},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"21\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":22}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":27},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"A6CB5142-3E79-4090-AD76-66EEC5253EF7\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"accessibleInInactiveWindow\":true,\"value\":false,\"toggle\":false,\"isActive\":true,\"label\":{\"__isSmartRef__\":true,\"id\":22},\"_PreviousBorderWidth\":0,\"owner\":{\"__isSmartRef__\":true,\"id\":1},\"attributeConnections\":[{\"__isSmartRef__\":true,\"id\":28},{\"__isSmartRef__\":true,\"id\":30}],\"doNotSerialize\":[\"$$getHelpText\",\"$$fire\"],\"doNotCopyProperties\":[\"$$getHelpText\",\"$$fire\"],\"eventHandler\":{\"__isSmartRef__\":true,\"id\":32},\"isPressed\":false,\"__serializedExpressions__\":[\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.WindowControl\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(3.0,3.0)\"},\"22\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":23},\"_WhiteSpaceHandling\":\"pre-wrap\",\"textChunks\":[{\"__isSmartRef__\":true,\"id\":24}],\"_ClipMode\":\"hidden\",\"derivationIds\":[],\"id\":\"AD2D233A-B8F9-4924-8E42-2B5B340589F6\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"fixedWidth\":true,\"_WordBreak\":\"break-all\",\"fixedHeight\":true,\"_InputAllowed\":false,\"_HandStyle\":\"default\",\"allowInput\":false,\"_FontFamily\":\"Helvetica\",\"_FontSize\":8,\"evalEnabled\":false,\"owner\":{\"__isSmartRef__\":true,\"id\":21},\"isLabel\":true,\"eventsAreIgnored\":true,\"_TextStylingMode\":true,\"eventsAreDisabled\":true,\"_PointerEvents\":\"none\",\"eventHandler\":{\"__isSmartRef__\":true,\"id\":26},\"__serializedExpressions__\":[\"_TextColor\",\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.Text\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\",\"_TextColor\":\"Color.rgb(64,64,64)\",\"_Position\":\"lively.pt(0.0,0.0)\"},\"23\":{\"_BorderWidth\":0,\"_Fill\":null,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(4,2,0,0)\",\"_BorderColor\":\"Color.rgb(0,0,0)\"},\"24\":{\"style\":{\"__isSmartRef__\":true,\"id\":25},\"chunkOwner\":{\"__isSmartRef__\":true,\"id\":22},\"_id\":\"_188\",\"storedString\":\"M\",\"__LivelyClassName__\":\"lively.morphic.TextChunk\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"25\":{\"textShadow\":\"0px 1px 0 rgba(255,255,255,1)\",\"__LivelyClassName__\":\"lively.morphic.TextEmphasis\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"26\":{\"morph\":{\"__isSmartRef__\":true,\"id\":22},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"27\":{\"_BorderWidth\":1,\"_StrokeOpacity\":0,\"_BorderRadius\":5,\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_BorderColor\":\"Color.rgb(189,190,192)\"},\"28\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":21},\"sourceAttrName\":\"getHelpText\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"getMenuHelp\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":29},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"29\":{\"source\":{\"__isSmartRef__\":true,\"id\":21},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"30\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":21},\"sourceAttrName\":\"fire\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"showTargetMorphMenu\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":31},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"31\":{\"source\":{\"__isSmartRef__\":true,\"id\":21},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"32\":{\"morph\":{\"__isSmartRef__\":true,\"id\":21},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"33\":{\"submorphs\":[{\"__isSmartRef__\":true,\"id\":34}],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":39},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"DB7D2361-5622-41E3-8582-163B2966B5D5\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"accessibleInInactiveWindow\":true,\"value\":false,\"toggle\":false,\"isActive\":true,\"label\":{\"__isSmartRef__\":true,\"id\":34},\"_PreviousBorderWidth\":0,\"owner\":{\"__isSmartRef__\":true,\"id\":1},\"layout\":{\"__isSmartRef__\":true,\"id\":40},\"attributeConnections\":[{\"__isSmartRef__\":true,\"id\":41},{\"__isSmartRef__\":true,\"id\":43}],\"doNotSerialize\":[\"$$getHelpText\",\"$$fire\"],\"doNotCopyProperties\":[\"$$getHelpText\",\"$$fire\"],\"eventHandler\":{\"__isSmartRef__\":true,\"id\":45},\"isPressed\":false,\"__serializedExpressions__\":[\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.WindowControl\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(590.0,3.0)\"},\"34\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":35},\"_WhiteSpaceHandling\":\"pre-wrap\",\"textChunks\":[{\"__isSmartRef__\":true,\"id\":36}],\"_ClipMode\":\"hidden\",\"derivationIds\":[],\"id\":\"0D59169F-416F-414E-B5DC-BB3671340AE5\",\"grabbingEnabled\":false,\"droppingEnabled\":false,\"halosEnabled\":true,\"fixedWidth\":true,\"_WordBreak\":\"break-all\",\"fixedHeight\":true,\"_InputAllowed\":false,\"_HandStyle\":\"default\",\"allowInput\":false,\"_FontFamily\":\"Helvetica\",\"_FontSize\":8,\"evalEnabled\":false,\"owner\":{\"__isSmartRef__\":true,\"id\":33},\"isLabel\":true,\"eventsAreIgnored\":true,\"_TextStylingMode\":true,\"eventsAreDisabled\":true,\"_PointerEvents\":\"none\",\"eventHandler\":{\"__isSmartRef__\":true,\"id\":38},\"__serializedExpressions__\":[\"_TextColor\",\"_Position\"],\"__LivelyClassName__\":\"lively.morphic.Text\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\",\"_TextColor\":\"Color.rgb(64,64,64)\",\"_Position\":\"lively.pt(0.0,1.0)\"},\"35\":{\"_BorderWidth\":0,\"_Fill\":null,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(4,2,0,0)\",\"_BorderColor\":\"Color.rgb(0,0,0)\"},\"36\":{\"style\":{\"__isSmartRef__\":true,\"id\":37},\"chunkOwner\":{\"__isSmartRef__\":true,\"id\":34},\"_id\":\"_190\",\"storedString\":\"–\",\"__LivelyClassName__\":\"lively.morphic.TextChunk\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"37\":{\"textShadow\":\"0px 1px 0 rgba(255,255,255,1)\",\"__LivelyClassName__\":\"lively.morphic.TextEmphasis\",\"__SourceModuleName__\":\"Global.lively.morphic.TextCore\"},\"38\":{\"morph\":{\"__isSmartRef__\":true,\"id\":34},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"39\":{\"_BorderWidth\":1,\"_StrokeOpacity\":0,\"_BorderRadius\":5,\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\",\"_BorderColor\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(17.0,17.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_BorderColor\":\"Color.rgb(189,190,192)\"},\"40\":{\"moveHorizontal\":true},\"41\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":33},\"sourceAttrName\":\"getHelpText\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"getCollapseHelp\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":42},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"42\":{\"source\":{\"__isSmartRef__\":true,\"id\":33},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"43\":{\"sourceObj\":{\"__isSmartRef__\":true,\"id\":33},\"sourceAttrName\":\"fire\",\"targetObj\":{\"__isSmartRef__\":true,\"id\":0},\"targetMethodName\":\"toggleCollapse\",\"varMapping\":{\"__isSmartRef__\":true,\"id\":44},\"__LivelyClassName__\":\"AttributeConnection\",\"__SourceModuleName__\":\"Global.lively.bindings.Core\"},\"44\":{\"source\":{\"__isSmartRef__\":true,\"id\":33},\"target\":{\"__isSmartRef__\":true,\"id\":0}},\"45\":{\"morph\":{\"__isSmartRef__\":true,\"id\":33},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"46\":{\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"_BorderWidth\":0,\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(629.0,22.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\"},\"47\":{\"resizeWidth\":true,\"adjustForNewBounds\":true},\"48\":{\"morph\":{\"__isSmartRef__\":true,\"id\":1},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"49\":{\"storedTextString\":\"ometa Factorial {\\n  fact 0 = -> 1,\\n  fact :n = fact(n-1):m -> (n * m)\\n}\\n\\nFactorial.matchAll([10], 'fact')\\nFactorial.match(10, 'fact')\\n\",\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":50},\"derivationIds\":[],\"id\":\"D9C2653A-F8F7-45B3-917E-BF33061D5887\",\"grabbingEnabled\":false,\"droppingEnabled\":true,\"halosEnabled\":true,\"_FontSize\":12,\"_ShowGutter\":true,\"_TextMode\":\"text\",\"_Theme\":\"chrome\",\"_LineWrapping\":true,\"_ShowInvisibles\":false,\"_ShowPrintMargin\":true,\"_setShowIndents\":true,\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"hasRobertsKeys\":true,\"_StyleClassNames\":[\"Morph\",\"CodeEditor\",\"ace_editor\",\"emacs-mode\",\"ace_nobold\",\"ace-chrome\"],\"eventHandler\":{\"__isSmartRef__\":true,\"id\":51},\"layout\":{\"__isSmartRef__\":true,\"id\":52},\"accessibleInInactiveWindow\":true,\"_isFocused\":false,\"showsHalos\":false,\"prevScroll\":[0,0],\"__serializedExpressions__\":[\"_Position\"],\"__serializedLivelyClosures__\":{\"__isSmartRef__\":true,\"id\":53},\"__LivelyClassName__\":\"lively.morphic.CodeEditor\",\"__SourceModuleName__\":\"Global.lively.ide.CodeEditor\",\"_Position\":\"lively.pt(4.0,22.0)\"},\"50\":{\"_BorderWidth\":1,\"__serializedExpressions__\":[\"_Extent\",\"_BorderColor\",\"extent\"],\"__LivelyClassName__\":\"lively.morphic.CodeEditorShape\",\"__SourceModuleName__\":\"Global.lively.ide.CodeEditor\",\"_Extent\":\"lively.pt(620.0,276.0)\",\"_BorderColor\":\"Color.rgb(95,94,95)\",\"extent\":\"lively.pt(620.0,276.0)\"},\"51\":{\"morph\":{\"__isSmartRef__\":true,\"id\":49},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"52\":{\"resizeWidth\":true,\"resizeHeight\":true},\"53\":{\"boundEval\":{\"__isSmartRef__\":true,\"id\":54}},\"54\":{\"varMapping\":{\"__isSmartRef__\":true,\"id\":55},\"source\":\"function boundEval(str) {\\n    return OMetaSupport.ometaEval(str);\\n}\",\"funcProperties\":{\"__isSmartRef__\":true,\"id\":60},\"__LivelyClassName__\":\"lively.Closure\",\"__SourceModuleName__\":\"Global.lively.lang.Closure\"},\"55\":{\"this\":{\"__isSmartRef__\":true,\"id\":49},\"__serializedLivelyClosures__\":{\"__isSmartRef__\":true,\"id\":56}},\"56\":{\"$super\":{\"__isSmartRef__\":true,\"id\":57}},\"57\":{\"varMapping\":{\"__isSmartRef__\":true,\"id\":58},\"source\":\"function () {\\n                    try {\\n                        return obj.constructor.prototype[name].apply(obj, arguments)\\n                    } catch (e) {\\n                        if ($world)\\n                            $world.logError(e, 'Error in $super call')\\n                        else\\n                            alert('Error in $super call: ' + e + '\\\\n' + e.stack);\\n                        return null;\\n                    }\\n                }\",\"funcProperties\":{\"__isSmartRef__\":true,\"id\":59},\"__LivelyClassName__\":\"lively.Closure\",\"__SourceModuleName__\":\"Global.lively.lang.Closure\"},\"58\":{\"obj\":{\"__isSmartRef__\":true,\"id\":49},\"name\":\"boundEval\"},\"59\":{},\"60\":{\"timestamp\":{\"__isSmartRef__\":true,\"id\":61},\"user\":\"robertkrahn\",\"tags\":[]},\"61\":{\"isSerializedDate\":true,\"string\":\"Thu Apr 25 2013 19:25:15 GMT-0700 (PDT)\"},\"62\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":63},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"E58FA94C-62F9-4250-A642-A85D83088A69\",\"droppingEnabled\":true,\"halosEnabled\":true,\"__serializedExpressions__\":[\"_Position\"],\"type\":\"corner\",\"_StyleClassNames\":[\"reframe-handle corner\"],\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":64},\"dragStartPoint\":null,\"originalTargetExtent\":null,\"__LivelyClassName__\":\"lively.morphic.ReframeHandle\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(615.0,289.0)\"},\"63\":{\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(14.0,14.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\"},\"64\":{\"morph\":{\"__isSmartRef__\":true,\"id\":62},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"65\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":66},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"03FB70CB-F618-4C9F-8317-46771320ABB5\",\"droppingEnabled\":true,\"halosEnabled\":true,\"__serializedExpressions__\":[\"_Position\"],\"type\":\"bottom\",\"_StyleClassNames\":[\"reframe-handle bottom\"],\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":67},\"__LivelyClassName__\":\"lively.morphic.ReframeHandle\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(0.0,299.0)\"},\"66\":{\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(615.0,4.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\"},\"67\":{\"morph\":{\"__isSmartRef__\":true,\"id\":65},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"68\":{\"submorphs\":[],\"scripts\":[],\"shape\":{\"__isSmartRef__\":true,\"id\":69},\"_ClipMode\":\"visible\",\"derivationIds\":[],\"id\":\"187AD917-E650-45AC-8E51-BA9766AB1F63\",\"droppingEnabled\":true,\"halosEnabled\":true,\"__serializedExpressions__\":[\"_Position\"],\"type\":\"right\",\"_StyleClassNames\":[\"reframe-handle right\"],\"owner\":{\"__isSmartRef__\":true,\"id\":0},\"eventHandler\":{\"__isSmartRef__\":true,\"id\":70},\"__LivelyClassName__\":\"lively.morphic.ReframeHandle\",\"__SourceModuleName__\":\"Global.lively.morphic.Widgets\",\"_Position\":\"lively.pt(625.0,0.0)\"},\"69\":{\"__serializedExpressions__\":[\"_Position\",\"_Extent\",\"_Padding\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Position\":\"lively.pt(0.0,0.0)\",\"_Extent\":\"lively.pt(4.0,289.0)\",\"_Padding\":\"lively.rect(0,0,0,0)\"},\"70\":{\"morph\":{\"__isSmartRef__\":true,\"id\":68},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"71\":{\"_BorderWidth\":0,\"_Fill\":null,\"_StrokeOpacity\":false,\"_BorderRadius\":false,\"_AppearanceStylingMode\":true,\"_BorderStylingMode\":true,\"__serializedExpressions__\":[\"_Padding\",\"_Extent\"],\"__LivelyClassName__\":\"lively.morphic.Shapes.Rectangle\",\"__SourceModuleName__\":\"Global.lively.morphic.Shapes\",\"_Padding\":\"lively.rect(0,0,0,0)\",\"_Extent\":\"lively.pt(629.0,303.0)\"},\"72\":{\"adjustForNewBounds\":true},\"73\":{\"morph\":{\"__isSmartRef__\":true,\"id\":0},\"__LivelyClassName__\":\"lively.morphic.EventHandler\",\"__SourceModuleName__\":\"Global.lively.morphic.Events\"},\"74\":{\"partName\":\"OMetaWorkspace\",\"requiredModules\":[\"lively.Ometa\"],\"partsSpaceName\":\"core/lively/ide/tools/\",\"comment\":\"Workspace for evaluating OMeta code.\",\"changes\":[{\"__isSmartRef__\":true,\"id\":75},{\"__isSmartRef__\":true,\"id\":77}],\"migrationLevel\":7,\"lastModifiedDate\":{\"__isSmartRef__\":true,\"id\":79},\"#startLetters\":\"addR\",\"__LivelyClassName__\":\"lively.PartsBin.PartsBinMetaInfo\",\"__SourceModuleName__\":\"Global.lively.PartsBin\"},\"75\":{\"date\":{\"__isSmartRef__\":true,\"id\":76},\"author\":\"robertkrahn\",\"message\":\"initial commit\",\"id\":\"A5A2FB1A-B069-450A-936E-601C0DAE922F\"},\"76\":{\"isSerializedDate\":true,\"string\":\"Thu Apr 25 2013 21:07:09 GMT-0700 (PDT)\"},\"77\":{\"date\":{\"__isSmartRef__\":true,\"id\":78},\"author\":\"robertkrahn\",\"message\":\"addin lively.Ometa as required module\",\"id\":\"07062275-976F-4809-8652-D2E33CF189AC\"},\"78\":{\"isSerializedDate\":true,\"string\":\"Thu Apr 25 2013 21:08:18 GMT-0700 (PDT)\"},\"79\":{\"isSerializedDate\":true,\"string\":\"Thu Apr 25 2013 21:07:09 GMT-0700 (PDT)\"},\"isSimplifiedRegistry\":true}}"

         }

      ]

   },

   {

      "sha": "c265bed5733e07a3a1087d4a6cd7aa18621e99c6",

      "commit": {

         "author": {

            "name": "Bert Freudenberg",

            "email": "bert@freudenbergs.de",

            "date": "2014-01-08T09:46:08Z"

         },

         "committer": {

            "name": "Bert Freudenberg",

            "email": "bert@freudenbergs.de",

            "date": "2014-01-08T09:46:13Z"

         },

         "message": "persistence: clean up typed arrays after deserializing",

         "tree": {

            "sha": "c62d5a0db499e2bc091783b5143447c7792d7107",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/c62d5a0db499e2bc091783b5143447c7792d7107"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/c265bed5733e07a3a1087d4a6cd7aa18621e99c6",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/c265bed5733e07a3a1087d4a6cd7aa18621e99c6",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/c265bed5733e07a3a1087d4a6cd7aa18621e99c6",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/c265bed5733e07a3a1087d4a6cd7aa18621e99c6/comments",

      "author": {

         "login": "bertfreudenberg",

         "id": 733388,

         "avatar_url": "https://gravatar.com/avatar/2cf3dd6bc0a56573bd8e0c041bc86846?d=https%3A%2F%2Fidenticons.github.com%2F873909d1878f7099c4471c357edd1b0b.png&r=x",

         "gravatar_id": "2cf3dd6bc0a56573bd8e0c041bc86846",

         "url": "https://api.github.com/users/bertfreudenberg",

         "html_url": "https://github.com/bertfreudenberg",

         "followers_url": "https://api.github.com/users/bertfreudenberg/followers",

         "following_url": "https://api.github.com/users/bertfreudenberg/following{/other_user}",

         "gists_url": "https://api.github.com/users/bertfreudenberg/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/bertfreudenberg/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/bertfreudenberg/subscriptions",

         "organizations_url": "https://api.github.com/users/bertfreudenberg/orgs",

         "repos_url": "https://api.github.com/users/bertfreudenberg/repos",

         "events_url": "https://api.github.com/users/bertfreudenberg/events{/privacy}",

         "received_events_url": "https://api.github.com/users/bertfreudenberg/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "bertfreudenberg",

         "id": 733388,

         "avatar_url": "https://gravatar.com/avatar/2cf3dd6bc0a56573bd8e0c041bc86846?d=https%3A%2F%2Fidenticons.github.com%2F873909d1878f7099c4471c357edd1b0b.png&r=x",

         "gravatar_id": "2cf3dd6bc0a56573bd8e0c041bc86846",

         "url": "https://api.github.com/users/bertfreudenberg",

         "html_url": "https://github.com/bertfreudenberg",

         "followers_url": "https://api.github.com/users/bertfreudenberg/followers",

         "following_url": "https://api.github.com/users/bertfreudenberg/following{/other_user}",

         "gists_url": "https://api.github.com/users/bertfreudenberg/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/bertfreudenberg/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/bertfreudenberg/subscriptions",

         "organizations_url": "https://api.github.com/users/bertfreudenberg/orgs",

         "repos_url": "https://api.github.com/users/bertfreudenberg/repos",

         "events_url": "https://api.github.com/users/bertfreudenberg/events{/privacy}",

         "received_events_url": "https://api.github.com/users/bertfreudenberg/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "c81336c9206a8ba4e3d98c5162bea940fd8743fe",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/c81336c9206a8ba4e3d98c5162bea940fd8743fe",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/c81336c9206a8ba4e3d98c5162bea940fd8743fe"

         }

      ],

      "stats": {

         "total": 11,

         "additions": 9,

         "deletions": 2

      },

      "files": [

         {

            "sha": "ce8632d4aaa819096df6e0579703f5750749d968",

            "filename": "core/lively/persistence/Serializer.js",

            "status": "modified",

            "additions": 9,

            "deletions": 2,

            "changes": 11,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/c265bed5733e07a3a1087d4a6cd7aa18621e99c6/core/lively/persistence/Serializer.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/c265bed5733e07a3a1087d4a6cd7aa18621e99c6/core/lively/persistence/Serializer.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/persistence/Serializer.js?ref=c265bed5733e07a3a1087d4a6cd7aa18621e99c6",

            "patch": "@@ -1148,10 +1148,17 @@ ObjectLinearizerPlugin.subclass('lively.persistence.TypedArrayPlugin',\n 'interface', {\n     serializeObj: function(obj) {\n         return obj && obj.buffer && obj.buffer instanceof ArrayBuffer && obj.constructor.name.match(/Array$/) ?\n-            {isTypedArray: true, arrayClass: obj.constructor.name, array: Array.from(obj)} : null;\n+            {__TypedArrayClass__: obj.constructor.name, __TypedArrayData__: Array.from(obj)} : null;\n     },\n     deserializeObj: function(copy) {\n-        return copy && copy.isTypedArray ? new window[copy.arrayClass](copy.array) : null;\n+        return (copy && copy.__TypedArrayClass__) ?\n+            new window[copy.__TypedArrayClass__](copy.__TypedArrayData__) : null;\n+    },\n+    afterDeserializeObj: function(obj) {\n+        if (obj.__TypedArrayClass__)\n+            delete obj.__TypedArrayClass__;\n+        if (obj.__TypedArrayData__)\n+            delete obj.__TypedArrayData__;\n     },\n });\n "

         }

      ]

   },

   {

      "sha": "cc6abfae1d8bba6fc62b290322250f29009a074e",

      "commit": {

         "author": {

            "name": "Florin Mateoc",

            "email": "fmateoc@gmail.com",

            "date": "2013-12-30T01:05:51Z"

         },

         "committer": {

            "name": "Florin Mateoc",

            "email": "fmateoc@gmail.com",

            "date": "2014-01-09T06:01:12Z"

         },

         "message": "preserve debug information at least when saving the whole file",

         "tree": {

            "sha": "c659fb3b71e6b2e10cde24692c54ba7c9658abf7",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/c659fb3b71e6b2e10cde24692c54ba7c9658abf7"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/cc6abfae1d8bba6fc62b290322250f29009a074e",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/cc6abfae1d8bba6fc62b290322250f29009a074e",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/cc6abfae1d8bba6fc62b290322250f29009a074e",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/cc6abfae1d8bba6fc62b290322250f29009a074e/comments",

      "author": {

         "login": "fmateoc",

         "id": 5225593,

         "avatar_url": "https://gravatar.com/avatar/70f07f681011977ffa4c4214367ecf31?d=https%3A%2F%2Fidenticons.github.com%2Fe9870591565e57b4878e8670f5ce46fe.png&r=x",

         "gravatar_id": "70f07f681011977ffa4c4214367ecf31",

         "url": "https://api.github.com/users/fmateoc",

         "html_url": "https://github.com/fmateoc",

         "followers_url": "https://api.github.com/users/fmateoc/followers",

         "following_url": "https://api.github.com/users/fmateoc/following{/other_user}",

         "gists_url": "https://api.github.com/users/fmateoc/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/fmateoc/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/fmateoc/subscriptions",

         "organizations_url": "https://api.github.com/users/fmateoc/orgs",

         "repos_url": "https://api.github.com/users/fmateoc/repos",

         "events_url": "https://api.github.com/users/fmateoc/events{/privacy}",

         "received_events_url": "https://api.github.com/users/fmateoc/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "fmateoc",

         "id": 5225593,

         "avatar_url": "https://gravatar.com/avatar/70f07f681011977ffa4c4214367ecf31?d=https%3A%2F%2Fidenticons.github.com%2Fe9870591565e57b4878e8670f5ce46fe.png&r=x",

         "gravatar_id": "70f07f681011977ffa4c4214367ecf31",

         "url": "https://api.github.com/users/fmateoc",

         "html_url": "https://github.com/fmateoc",

         "followers_url": "https://api.github.com/users/fmateoc/followers",

         "following_url": "https://api.github.com/users/fmateoc/following{/other_user}",

         "gists_url": "https://api.github.com/users/fmateoc/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/fmateoc/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/fmateoc/subscriptions",

         "organizations_url": "https://api.github.com/users/fmateoc/orgs",

         "repos_url": "https://api.github.com/users/fmateoc/repos",

         "events_url": "https://api.github.com/users/fmateoc/events{/privacy}",

         "received_events_url": "https://api.github.com/users/fmateoc/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "c265bed5733e07a3a1087d4a6cd7aa18621e99c6",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/c265bed5733e07a3a1087d4a6cd7aa18621e99c6",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/c265bed5733e07a3a1087d4a6cd7aa18621e99c6"

         }

      ],

      "stats": {

         "total": 3,

         "additions": 2,

         "deletions": 1

      },

      "files": [

         {

            "sha": "c13e120940df0ab2e1bd8786ad83d21d7fbf1331",

            "filename": "core/lively/ide/SystemBrowserNodes.js",

            "status": "modified",

            "additions": 2,

            "deletions": 1,

            "changes": 3,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/cc6abfae1d8bba6fc62b290322250f29009a074e/core/lively/ide/SystemBrowserNodes.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/cc6abfae1d8bba6fc62b290322250f29009a074e/core/lively/ide/SystemBrowserNodes.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/SystemBrowserNodes.js?ref=cc6abfae1d8bba6fc62b290322250f29009a074e",

            "patch": "@@ -408,9 +408,10 @@ lively.ide.FileFragmentNode.subclass('lively.ide.CompleteFileFragmentNode', // s\n 'evaluation', {\n     evalSource: function(newSource) {\n         if (!this.browser.evaluate) return false;\n+        var url = this.url().toString();\n         this.browser.withCurrentModuleActiveDo(function() {\n             try {\n-                Global.eval(newSource);\n+                eval.call(Global, newSource + \"\\n//# sourceURL=\" + url);\n             } catch (er) {\n                 console.log(\"error evaluating module:\" + er);\n                 throw(er);"

         }

      ]

   },

   {

      "sha": "6b9876b6e9c2d87e167a4d548eeb1b545c853d6b",

      "commit": {

         "author": {

            "name": "Florin Mateoc",

            "email": "fmateoc@gmail.com",

            "date": "2013-12-30T02:05:15Z"

         },

         "committer": {

            "name": "Florin Mateoc",

            "email": "fmateoc@gmail.com",

            "date": "2014-01-09T06:01:12Z"

         },

         "message": "merge, some fixes, use namespaced names",

         "tree": {

            "sha": "5d9e910b5985454db9cfca9b5eec06fb57a0da6b",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/trees/5d9e910b5985454db9cfca9b5eec06fb57a0da6b"

         },

         "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/git/commits/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b",

         "comment_count": 0

      },

      "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b",

      "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b",

      "comments_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b/comments",

      "author": {

         "login": "fmateoc",

         "id": 5225593,

         "avatar_url": "https://gravatar.com/avatar/70f07f681011977ffa4c4214367ecf31?d=https%3A%2F%2Fidenticons.github.com%2Fe9870591565e57b4878e8670f5ce46fe.png&r=x",

         "gravatar_id": "70f07f681011977ffa4c4214367ecf31",

         "url": "https://api.github.com/users/fmateoc",

         "html_url": "https://github.com/fmateoc",

         "followers_url": "https://api.github.com/users/fmateoc/followers",

         "following_url": "https://api.github.com/users/fmateoc/following{/other_user}",

         "gists_url": "https://api.github.com/users/fmateoc/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/fmateoc/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/fmateoc/subscriptions",

         "organizations_url": "https://api.github.com/users/fmateoc/orgs",

         "repos_url": "https://api.github.com/users/fmateoc/repos",

         "events_url": "https://api.github.com/users/fmateoc/events{/privacy}",

         "received_events_url": "https://api.github.com/users/fmateoc/received_events",

         "type": "User",

         "site_admin": false

      },

      "committer": {

         "login": "fmateoc",

         "id": 5225593,

         "avatar_url": "https://gravatar.com/avatar/70f07f681011977ffa4c4214367ecf31?d=https%3A%2F%2Fidenticons.github.com%2Fe9870591565e57b4878e8670f5ce46fe.png&r=x",

         "gravatar_id": "70f07f681011977ffa4c4214367ecf31",

         "url": "https://api.github.com/users/fmateoc",

         "html_url": "https://github.com/fmateoc",

         "followers_url": "https://api.github.com/users/fmateoc/followers",

         "following_url": "https://api.github.com/users/fmateoc/following{/other_user}",

         "gists_url": "https://api.github.com/users/fmateoc/gists{/gist_id}",

         "starred_url": "https://api.github.com/users/fmateoc/starred{/owner}{/repo}",

         "subscriptions_url": "https://api.github.com/users/fmateoc/subscriptions",

         "organizations_url": "https://api.github.com/users/fmateoc/orgs",

         "repos_url": "https://api.github.com/users/fmateoc/repos",

         "events_url": "https://api.github.com/users/fmateoc/events{/privacy}",

         "received_events_url": "https://api.github.com/users/fmateoc/received_events",

         "type": "User",

         "site_admin": false

      },

      "parents": [

         {

            "sha": "cc6abfae1d8bba6fc62b290322250f29009a074e",

            "url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/commits/cc6abfae1d8bba6fc62b290322250f29009a074e",

            "html_url": "https://github.com/LivelyKernel/LivelyKernel/commit/cc6abfae1d8bba6fc62b290322250f29009a074e"

         }

      ],

      "stats": {

         "total": 570,

         "additions": 267,

         "deletions": 303

      },

      "files": [

         {

            "sha": "1d9c0b40295fb437b6cab24e8e23776eab91c56a",

            "filename": "core/lively/ChangeSets.js",

            "status": "modified",

            "additions": 263,

            "deletions": 301,

            "changes": 564,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b/core/lively/ChangeSets.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b/core/lively/ChangeSets.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ChangeSets.js?ref=6b9876b6e9c2d87e167a4d548eeb1b545c853d6b",

            "patch": "@@ -1,4 +1,4 @@\n-module('lively.ChangeSets').requires('lively.Traits', 'lively.persistence.BuildSpec', 'lively.morphic.MorphAddons'/*for lively.morphic.Panel*/).requiresLib({url: Config.codeBase + 'lib/jsdiff/jsdiff.js', loadTest: function() { return typeof JsDiff !== 'undefined'; }}).toRun(function() {\n+module('lively.ChangeSets').requires('lively.Traits', 'lively.persistence.BuildSpec', 'lively.morphic.MorphAddons').requiresLib({url: Config.codeBase + 'lib/jsdiff/jsdiff.js', loadTest: function() { return typeof JsDiff !== 'undefined'; }}).toRun(function() {\n \n Object.extend(Global, {\n \n@@ -213,10 +213,7 @@ Object.extend(Global, {\n         });\n })();\n \n-Object.subclass('lively.ChangeSet');\n-var ChangeSet = lively.ChangeSet;\n-\n-ChangeSet.addMethods(\n+Object.subclass('lively.ChangeSet',\n 'initialize-release', {\n \n \treinitialize: function() {\n@@ -229,7 +226,7 @@ ChangeSet.addMethods(\n \n     initialize: function(aName, optDoNotStoreName) {\n         if(!aName) {\n-            aName = ChangeSet.defaultName();\n+\t\t    throw new Error('All changeSets must be named and registered');\n         }\n         this.name = aName;\n         this.changeRecords = [];\n@@ -240,70 +237,31 @@ ChangeSet.addMethods(\n \t        this.storeName(aName);\n     },\n \n-\n-\n \tclear: function() {\n \n \t\tthis.changeRecords = [];\n         this.timestamps = [];\n \t},\n \n-\n-\n-\tisMoribond: function() {\n-\n-\t\treturn !this.name;\n-\n-\t},\n-\n-\twither: function() {\n-\n-\t\tthis.clear();\n-\t\tthis.name = null;\n-\n-\t},\n     copy: function() {\n-        return new ChangeSet(this.name, true);\n+        return new lively.ChangeSet(this.name, true);\n     }\n \n });\n \n \n-Object.extend(ChangeSet, {\n-\n-\n-    \n-\tassureChangeSetNamed: function(aName) {\n-\t    var existing = this.named(aName);\n-\t    if(existing)\n-\t        return existing;\n-\t    return this.basicNewChangeSet(aName);\n-\t},\n+Object.extend(lively.ChangeSet, {\n \n-\tbasicNewChangeSet: function(aName) {\n-\t    if(!aName)\n-\t        return null;\n-\t    var existing = this.named(aName);\n-\t    if(existing) {\n-\t        alert('Sorry, that name is already in use');\n-\t        return null;\n-\t    }\n-\t    return new ChangeSet(aName);\n-\t},\n \texistingOrNewChangeSetNamed: function(aName) {\n \t    var existing = this.named(aName);\n-\t    if(existing) {\n+\t    if(existing)\n \t        return existing;\n-\t    }\n-\t    return new ChangeSet(aName);\n+\t    return new lively.ChangeSet(aName);\n \t},\n \n-\n-\n-\t\n \tcurrent: function() {\n-\t    if(!this.CurrentChangeSet || this.CurrentChangeSet.isMoribond())\n-\t        this.newChanges(this.assureChangeSetNamed(this.defaultName()));\n+\t    if(!this.CurrentChangeSet)\n+\t        this.newChanges(new this(this.defaultName()));\n \t\treturn this.CurrentChangeSet;\n \t},\n \n@@ -317,11 +275,14 @@ Object.extend(ChangeSet, {\n         })\n     },\n \n-\n-\n     newChanges: function(aChangeSet) {\n         this.CurrentChangeSet = aChangeSet;\n         localStorage.setItem(this.userStorageRoot + \":defaultChangeSet\", aChangeSet.name)\n+        var changesetNames = this.changeSetNames();\n+        if(!changesetNames.include(aChangeSet.name)) {\n+            changesetNames.push(aChangeSet.name);\n+            localStorage.setItem(this.userStorageRoot + \":changesetNames\", JSON.stringify(changesetNames));\n+        }\n     },\n     \n     uniqueNameLike: function(aString) {\n@@ -335,31 +296,31 @@ Object.extend(ChangeSet, {\n         \n     },\n     \n-\n-    \n     CurrentChangeSet: null\n \n });\n \n-Object.extend(ChangeSet, {\n+Object.extend(lively.ChangeSet, {\n+\n \tloadAndcheckVsSystem: function() {\n+\t    \n+\t    var changeSet = this.CurrentChangeSet;\n+\t    if(!changeSet)\t        return;\n+        if(!changeSet.hasErrors())\n+            changeSet.applyChanges();\n+        if(changeSet.hasErrors())\n+            alert(\"Some of the changes in your current changeset could not be applied.\\nOpen the changes browser for details\");\n+\t},\n+    initialize: function() {\n \n \t\tthis.userStorageRoot = \"LivelyChanges:\" + location.pathname + \":author:\" + $world.getUserName();\n \t\tvar storedNameForDefaultChangeSet = this.defaultChangeSetName();\n \t\tif(!storedNameForDefaultChangeSet)\n \t\t    return;\n-        var changeSet = new ChangeSet(storedNameForDefaultChangeSet, true);\n+        var changeSet = new lively.ChangeSet(storedNameForDefaultChangeSet, true);\n         this.newChanges(changeSet);\n-        var changesetNames = this.changeSetNames();\n-        if(!changesetNames.include(storedNameForDefaultChangeSet)) {\n-            changesetNames.push(storedNameForDefaultChangeSet);\n-            localStorage.setItem(this.userStorageRoot + \":changesetNames\", JSON.stringify(changesetNames));\n-        }\n-        if(!changeSet.hasErrors() && Config.automaticChangesReplay)\n-            changeSet.applyChanges();\n-        if(changeSet.hasErrors())\n-            $world.openInspectorFor(changeSet);\n-\t},\n+    },\n+\n     changeSetNames: function() {\n         var namesString = localStorage.getItem(this.userStorageRoot + \":changesetNames\");\n         if(namesString)\n@@ -391,13 +352,8 @@ Object.extend(ChangeSet, {\n         this.storeArray(storageArray, this.nextTimestamp());\n     },\n \n-\n-    \n-    \n-\n-\n     logChange: function(sourceOrNil, contextPath, propertyName, categoryOrNil, previousChangeStamp) {\n-\n+debugger;\n         return this.current().logChange(sourceOrNil, contextPath, propertyName, categoryOrNil, previousChangeStamp);\n     },\n \n@@ -410,12 +366,12 @@ Object.extend(ChangeSet, {\n         this.current().logFirstRemoval(source, contextPath, propertyName, categoryOrNil);\n     },\n \n-\n     logRemoval: function(contextPath, propertyName, categoryOrNil, previousChangeStamp) {\n  \n         this.current().logRemoval(contextPath, propertyName, categoryOrNil, previousChangeStamp);\n     },\n-    removeAllFromPersistentStorage: function() {// ChangeSet.removeAllFromPersistentStorage()\n+\n+    removeAllFromPersistentStorage: function() {// lively.ChangeSet.removeAllFromPersistentStorage()\n     \n \t\tvar storageRoot = \"LivelyChanges:\" + location.pathname + \":author:\" + $world.getUserName();\n \n@@ -442,6 +398,7 @@ Object.extend(ChangeSet, {\n             localStorage.removeItem(storageRoot + \":timestamps\");\n         }\n     },\n+\n     storeArray: function(array, timestamp) {\n \n         //Step 1: store the actual change\n@@ -456,10 +413,6 @@ Object.extend(ChangeSet, {\n         localStorage.setItem(this.userStorageRoot + \":timestamps\", allTimestampsString);\n \n     },\n-    installFlap: function() {\n-        // enter comment here\n-    },\n-\n \n     nextTimestamp: function() {\n         var current = performance.now();\n@@ -476,18 +429,19 @@ Object.extend(ChangeSet, {\n                 return;\n             }\n             if(changeRecord.originalPropertyName && !originalContext[changeRecord.originalPropertyName]) {\n-                changeRecord.errors.push(\"Failed to apply change. The original context \"+changeRecord.originalContextPath+\"\\n does not have the original property named '\"+changeRecord.originalPropertyName+\"' anymore\");\n+                changeRecord.errors.push(\"Failed to apply; \"+changeRecord.originalContextPath+\" does not have the  property '\"+changeRecord.originalPropertyName+\"' anymore\");\n                 return;\n             }\n             if(changeRecord.originalPropertyName && changeRecord.originalSource != originalContext[changeRecord.originalPropertyName].toString()) {\n-                changeRecord.errors.push(\"Failed to apply change. \"+changeRecord.originalContextPath+\".\"+changeRecord.originalPropertyName+\"\\n does not have the original source anymore\");\n+                changeRecord.errors.push(\"Failed to apply; \"+changeRecord.originalContextPath+\".\"+changeRecord.originalPropertyName+\" does not have the original source anymore\");\n                 return;\n             }\n             if(changeRecord.originalCategory) {\n                 var originalContainer = originalContext.lvCategoriesContainer();\n                 if(changeRecord.originalCategory != originalContainer.lvCategoryForMethod(changeRecord.originalPropertyName))\n {\n-                    changeRecord.errors.push(\"Failed to apply change. \"+changeRecord.originalContextPath+\".\"+changeRecord.originalPropertyName+\"\\n does not have the original category \"+changeRecord.originalCategory+\" anymore\");\n+    debugger;\n+                    changeRecord.errors.push(\"Failed to apply; \"+changeRecord.originalContextPath+\".\"+changeRecord.originalPropertyName+\" does not have the category '\"+changeRecord.originalCategory+\"' anymore\");\n                     return;\n                 }\n             }\n@@ -512,7 +466,7 @@ Object.extend(ChangeSet, {\n         var kindOfChange, \n             timestamp,\n             oldFunc = context[changeRecord.propertyName];\n-        switch(changeRecord.type.valueOf()) {\n+        switch(changeRecord.type) {\n             case \"removed\":\n                 delete context[changeRecord.propertyName];\n                 if(!existingTimestamp)\n@@ -525,7 +479,7 @@ Object.extend(ChangeSet, {\n             case \"added\":\n                 if(oldFunc) {\n                     if(oldFunc.toString() != changeRecord.source)\n-                        changeRecord.errors.push(\"Failed to add property. The context \"+changeRecord.contextPath+\"\\n already has the property named \"+changeRecord.propertyName+\" and it is different from what we are trying to add\");\n+                        changeRecord.errors.push(\"Failed to add property. \"+changeRecord.contextPath+\" already has the property '\"+changeRecord.propertyName+\"' and it is different from what we are trying to add\");\n                     return;\n                 }\n                 if(!existingTimestamp)\n@@ -535,7 +489,7 @@ Object.extend(ChangeSet, {\n             case \"moved\":\n                 if(oldFunc) {\n                     if(oldFunc.toString() != changeRecord.source)\n-                        changeRecord.errors.push(\"Failed to move property. The target context \"+changeRecord.contextPath+\"\\n already has the property named \"+changeRecord.propertyName+\" and it is different from what we are trying to move there\");\n+                        changeRecord.errors.push(\"Failed to move property. \"+changeRecord.contextPath+\" already has the property '\"+changeRecord.propertyName+\"' and it is different from what we are trying to move there\");\n                     return;\n                 }\n                 kindOfChange = \"moved from \"+changeRecord.originalContextPath;\n@@ -553,7 +507,7 @@ Object.extend(ChangeSet, {\n             case \"renamed\":\n                 if(oldFunc) {\n                     if(oldFunc.toString() != changeRecord.source)\n-                        changeRecord.errors.push(\"Failed to rename property. The context \"+changeRecord.contextPath+\"\\n already has the target property named \"+changeRecord.propertyName+\" and it is different from what we are trying to set there\");\n+                        changeRecord.errors.push(\"Failed to rename property. \"+changeRecord.contextPath+\" already has the target property '\"+changeRecord.propertyName+\"' and it is different from what we are trying to set\");\n                     return;\n                 }\n                 kindOfChange = \"renamed from \"+changeRecord.originalPropertyName;\n@@ -570,7 +524,7 @@ Object.extend(ChangeSet, {\n                 break;\n             case \"changed source\":\n                 if(!oldFunc) {\n-                    changeRecord.errors.push(\"Failed to change source. The context \"+changeRecord.contextPath+\"\\n does not have the property named \"+changeRecord.propertyName);\n+                    changeRecord.errors.push(\"Failed to change source. \"+changeRecord.contextPath+\" does not have the property '\"+changeRecord.propertyName+\"'\");\n                     return;\n                 }\n                 kindOfChange = \"changed source\";\n@@ -584,7 +538,7 @@ Object.extend(ChangeSet, {\n                 break;\n             case \"changed category\":\n                 if(!oldFunc) {\n-                    changeRecord.errors.push(\"Failed to change category. The context \"+changeRecord.contextPath+\"\\n does not have the property named \"+changeRecord.propertyName);\n+                    changeRecord.errors.push(\"Failed to change category. \"+changeRecord.contextPath+\" does not have the property '\"+changeRecord.propertyName+\"'\");\n                     return;\n                 }\n                 kindOfChange = \"changed category from \"+changeRecord.originalCategory+\" to \"+changeRecord.category;\n@@ -597,6 +551,7 @@ Object.extend(ChangeSet, {\n                         timestamp = this.logFirstChange(changeRecord.source, changeRecord.contextPath, changeRecord.propertyName, changeRecord.category, changeRecord.originalCategory, null, null, null);\n                 break;\n             default:\n+            debugger;\n                 throw new Error(\"Applying \"+changeRecord.type+ \" not implemented yet\");\n             }\n             if(!oldFunc || changeRecord.source != oldFunc.toString())\n@@ -636,14 +591,22 @@ Object.extend(ChangeSet, {\n         if(firstChangeStamp) {\n             //this is not a first change\n             var firstChangeRecord = this.getChangeRecord(firstChangeStamp);\n-\t\t\tif(firstChangeRecord.type == \"added\")\n-                if(changeRecord.type == \"removed\")\n-                    //added then removed, not a \"real\" change\n-                    return null;\n-                else {\n-                    changeRecord.type = \"added\";    //this may also include added to category\n+            if(firstChangeRecord.type == \"added\") {\n+                if(changeRecord.type == \"removed\" || changeRecord.type == \"added\")\n                     return changeRecord;\n-                }\n+                if(firstChangeRecord.contextPath !== changeRecord.contextPath)\n+                    changeRecord.type = \"moved\";    //this may also include renamed, changed category and changed source\n+                else if(firstChangeRecord.propertyName !== changeRecord.propertyName)\n+                    changeRecord.type = \"renamed\";  //this may also include changed category and changed source\n+                else if(firstChangeRecord.source !== changeRecord.source)\n+                    changeRecord.type = \"changed source\";  //this may also include changed category\n+                else if(firstChangeRecord.category !== changeRecord.category &&\n+                    (firstChangeRecord.category || changeRecord.category)) {\n+                        changeRecord.type = \"changed category\";\n+                } else\n+                    changeRecord.type = \"added\";\n+                return changeRecord;\n+            }\n             changeRecord.originalContextPath = firstChangeRecord.originalContextPath;\n             changeRecord.originalPropertyName = firstChangeRecord.originalPropertyName;\n             changeRecord.originalCategory = firstChangeRecord.originalCategory;\n@@ -652,27 +615,20 @@ Object.extend(ChangeSet, {\n                 \n         if(changeRecord.type == \"removed\" || changeRecord.type == \"added\")\n             return changeRecord;\n-        if(changeRecord.originalContextPath !== changeRecord.contextPath) {\n+        if(changeRecord.originalContextPath !== changeRecord.contextPath)\n             changeRecord.type = \"moved\";    //this may also include renamed, changed category and changed source\n-            return changeRecord;\n-        }\n-        if(changeRecord.originalPropertyName !== changeRecord.propertyName) {\n+        else if(changeRecord.originalPropertyName !== changeRecord.propertyName)\n             changeRecord.type = \"renamed\";  //this may also include changed category and changed source\n-            return changeRecord;\n-        }\n-        if(changeRecord.originalSource !== changeRecord.source) {\n+        else if(changeRecord.originalSource !== changeRecord.source)\n             changeRecord.type = \"changed source\";  //this may also include changed category\n-            return changeRecord;\n-        }\n-        if(changeRecord.originalCategory !== changeRecord.category) {\n-            changeRecord.type = \"changed category\";\n-        }\n+        else if(changeRecord.originalCategory !== changeRecord.category &&\n+            (changeRecord.originalCategory || changeRecord.category))\n+                changeRecord.type = \"changed category\";\n+        else\n+            throw new Error(\"invalid change\");\n         return changeRecord;\n     },\n \n-\n-\n-\n     changeDataFromStorage: function(array) {\n // There are four main formats for the array. The first 4 elements in each of them, when present, represent the same aspect:\n //\n@@ -702,7 +658,7 @@ Object.extend(ChangeSet, {\n \t\t\tentry.propertyName = propertyName;\n \t\t\tif(!entry.source)\n                 entry.type = \"removed\";\n-\t\t\tentry.category = array[3];\n+\t\t\tentry.category = array[3] === 'default category' ? null : array[3];\n \t\t\tvar previous = array[4];\n \t\t\tif(previous && typeof previous.valueOf() == \"number\") {\n \t\t\t\t//not a first change\n@@ -714,7 +670,7 @@ Object.extend(ChangeSet, {\n \t\t\t\tentry.type = \"added\";\n \t\t\t\treturn entry;\n \t\t\t}\n-\t\t\tentry.originalCategory = previous;\n+\t\t\tentry.originalCategory = previous === 'default category' ? null: previous;\n \t\t\tentry.originalSource = array[5] || entry.source;\n \t\t\tentry.originalContextPath = array[6] || array[1] || \"Global\";\n \t\t\tentry.originalPropertyName = array[7] || propertyName;\n@@ -724,6 +680,7 @@ Object.extend(ChangeSet, {\n \t\t}\n \t\treturn entry;\n     },\n+\n     getChangeRecord: function(t) {\n         var dataString = localStorage.getItem(this.userStorageRoot + \":allChanges:\" + t);\n         if(!dataString)\n@@ -731,22 +688,21 @@ Object.extend(ChangeSet, {\n         return this.changeDataFromStorage(JSON.parse(dataString));\n     },\n \n-\n-\n     logAddition: function(source, contextPath, propertyName, optCategory) {\n \n         return this.current().logAddition(source, contextPath, propertyName, optCategory);\n     }\n \n-    \n });\n     \n-ChangeSet.addMethods(\n+lively.ChangeSet.addMethods(\n     \"actions\", {\n \n     applyChanges: function() {\n-        if(this.timestamps.length != this.changeRecords.length)\n+        if(this.timestamps.length != this.changeRecords.length) {\n             alert(\"inconsistent changeset state\");\n+            return;\n+        }\n         if(this.changeRecords.length == 0) {\n             alertOK(\"No changes to apply\");\n             return;\n@@ -754,87 +710,106 @@ ChangeSet.addMethods(\n             \n         for (var i=0; i<this.timestamps.length; i++) {\n             try {\n-                ChangeSet.applyChange(this.changeRecords[i], this.timestamps[i]);\n+                lively.ChangeSet.applyChange(this.changeRecords[i], this.timestamps[i]);\n             } catch(e) {\n                 this.changeRecords[i].errors.push(\"Unexpected error \" + e.name + \": \" + e.message);\n             }\n         }\n         if(!this.hasErrors())\n             alertOK(\"Changes succesfully applied\");\n-        else\n-            alert(\"Some of the changes failed to apply, please check your changes browser for details\");\n-        \n+\n     },\n \n     hasErrors: function() {\n-        return this.changeRecords.detect(function(e){e.errors.length > 0})\n+        return this.changeRecords.detect(function(e){ return e.errors.length > 0})\n     },\n+    \n     addChange: function(t) {\n         this.timestamps.push(t);\n-        this.changeRecords.push(ChangeSet.hydrateChange(t));\n+        this.changeRecords.push(lively.ChangeSet.hydrateChange(t));\n     },\n \n-\n-\n-\n     logAddition: function(source, contextPath, propertyName, optCategory) {\n \n-\n         //make sure this is really a new addition (within the current changeset)\n         var replacedRemoval;\n-        this.timestamps.each(function(t){\n-            var changeRecord = ChangeSet.getChangeRecord(t);\n-            if(changeRecord.contextPath == contextPath) {\n-                if(changeRecord.propertyName == propertyName) {\n-                    if(changeRecord.type != \"removed\")\n-                        throw new Error(\"should not happen\");\n+        this.timestamps.slice().reverse().each(function(t){\n+            var changeRecord = lively.ChangeSet.getChangeRecord(t);\n+            if( changeRecord.contextPath == contextPath &&\n+                changeRecord.propertyName == propertyName &&\n+                changeRecord.type === \"removed\") {\n                     //it is not really a new add\n                     this.removeTimestamp(t);\n-                    var firstChangeRecord = ChangeSet.getChangeRecord(changeRecord.firstChangeStamp);\n-                    replacedRemoval = this.logFirstChange(source, contextPath, propertyName, optCategory,\n-                        firstChangeRecord.originalCategory, firstChangeRecord.originalSource, firstChangeRecord.originalContextPath, firstChangeRecord.originalPropertyName);\n+                    if(changeRecord.firstChangeStamp) {\n+                        replacedRemoval = this.logChange(source, contextPath, propertyName, optCategory, changeRecord.previousChangeStamp);\n+                    } else\n+                        replacedRemoval = this.logFirstChange(source, contextPath, propertyName, optCategory,\n+                        changeRecord.originalCategory, changeRecord.originalSource, changeRecord.originalContextPath, changeRecord.originalPropertyName);\n                     return;\n-                }\n             }\n         })\n         if(replacedRemoval)\n             return replacedRemoval;\n-        var timestamp = ChangeSet.nextTimestamp();\n+        var timestamp = lively.ChangeSet.nextTimestamp();\n         var array = [source, contextPath, propertyName];\n         if(optCategory)\n-            array.push(optCategory);\n+            array.push(optCategory);[]\n         this.storeArray(array, timestamp);\n         return timestamp\n     },\n+\n     removeTimestamp: function(t) {\n \n         this.timestamps.remove(t);\n-        localStorage.setItem(ChangeSet.userStorageRoot + \":changesetTimestamps:\" + this.name, JSON.stringify(this.timestamps));\n+        localStorage.setItem(lively.ChangeSet.userStorageRoot + \":changesetTimestamps:\" + this.name, JSON.stringify(this.timestamps));\n     },\n \n     logChange: function(sourceOrNil, contextPath, propertyName, categoryOrNil, previousChangeStamp) {\n \n         //Get the previous change\n-        var previousChangeRecord = ChangeSet.getChangeRecord(previousChangeStamp);\n+        var previousChangeRecord = lively.ChangeSet.hydrateChange(previousChangeStamp);\n         var firstTimestamp = previousChangeRecord.firstChangeStamp || previousChangeStamp;\n-        var timestamp = ChangeSet.nextTimestamp();\n+        var timestamp = lively.ChangeSet.nextTimestamp();\n         this.storeArray([sourceOrNil, contextPath, propertyName, categoryOrNil, firstTimestamp, previousChangeStamp], timestamp);\n-        this.removeTimestamp(previousChangeStamp);\n+        if(previousChangeRecord.type === \"changed source\" || previousChangeRecord.type === \"changed category\")\n+            this.removeTimestamp(previousChangeStamp);\n \n         if( previousChangeRecord.originalSource == sourceOrNil &&\n             previousChangeRecord.originalContextPath == contextPath &&\n             previousChangeRecord.originalPropertyName == propertyName &&\n-            previousChangeRecord.originalCategory == categoryOrNil) {\n+            (previousChangeRecord.originalCategory == categoryOrNil || !previousChangeRecord.originalCategory && !categoryOrNil)) {\n                 //this is not really a change, we are reverting to the original\n-                this.removeTimestamp(timestamp);\n+                this.timestamps = this.timestamps.reject(function(t){\n+                    var changeRecord = lively.ChangeSet.getChangeRecord(t);\n+                    return changeRecord.contextPath == contextPath &&\n+                        changeRecord.propertyName == propertyName})\n+                localStorage.setItem(lively.ChangeSet.userStorageRoot + \":changesetTimestamps:\" + this.name, JSON.stringify(this.timestamps));\n                 return null;\n-            }\n+        } else if(!previousChangeRecord.originalSource) {\n+            //first record is an addition\n+            var firstChangeRecord = lively.ChangeSet.getChangeRecord(firstTimestamp);\n+            if(firstChangeRecord.type !== \"added\")\n+                throw new Error(\"Should not happen\");\n+            if( firstChangeRecord.source == sourceOrNil &&\n+                firstChangeRecord.contextPath == contextPath &&\n+                firstChangeRecord.propertyName == propertyName &&\n+                (firstChangeRecord.category == categoryOrNil || !firstChangeRecord.category && !categoryOrNil)) {\n+                    //this is not really a change, we are reverting to the initial\n+                    this.timestamps = this.timestamps.reject(function(t){\n+                        var changeRecord = lively.ChangeSet.getChangeRecord(t);\n+                        return changeRecord.contextPath == contextPath &&\n+                            changeRecord.propertyName == propertyName &&\n+                            t !== firstTimestamp})\n+                    localStorage.setItem(lively.ChangeSet.userStorageRoot + \":changesetTimestamps:\" + this.name, JSON.stringify(this.timestamps));\n+                    return null;\n+            }            \n+        }\n         return timestamp\n     },\n \n     logFirstChange: function(sourceOrNil, contextPath, propertyName, categoryOrNil, previousCategoryOrNil, previousSourceOrNilIfSame, previousContextPathOrNilIfSame, previousPropertyNameOrNilIfSame) {\n  \n-        var timestamp = ChangeSet.nextTimestamp();\n+        var timestamp = lively.ChangeSet.nextTimestamp();\n         var array = [sourceOrNil, contextPath, propertyName, categoryOrNil, previousCategoryOrNil];\n         if(previousSourceOrNilIfSame && sourceOrNil != previousSourceOrNilIfSame) {\n             array.push(previousSourceOrNilIfSame);\n@@ -856,23 +831,23 @@ ChangeSet.addMethods(\n         this.storeArray(array, timestamp);\n         return timestamp\n     },\n+\n     logFirstRemoval: function(source, contextPath, propertyName, categoryOrNil) {\n  \n-        this.storeArray([null, contextPath, propertyName, categoryOrNil, null, source], ChangeSet.nextTimestamp());\n+        this.storeArray([null, contextPath, propertyName, categoryOrNil, null, source], lively.ChangeSet.nextTimestamp());\n     },\n \n-\n     logRemoval: function(contextPath, propertyName, categoryOrNil, previousChangeStamp) {\n  \n         //Get the previous change\n-        var previousChangeRecord = ChangeSet.getChangeRecord(previousChangeStamp);\n+        var previousChangeRecord = lively.ChangeSet.getChangeRecord(previousChangeStamp);\n         var firstTimestamp = previousChangeRecord.firstChangeStamp || previousChangeStamp;\n-        var timestamp = ChangeSet.nextTimestamp();\n+        var timestamp = lively.ChangeSet.nextTimestamp();\n         this.storeArray([null, contextPath, propertyName, categoryOrNil, firstTimestamp, previousChangeStamp], timestamp);\n         this.removeTimestamp(previousChangeStamp);\n \n-        var firstChangeRecord = firstTimestamp === previousChangeStamp ? previousChangeRecord : ChangeSet.getChangeRecord(firstTimestamp);\n-        if(firstChangeRecord.type == \"added\")\n+        var firstChangeRecord = firstTimestamp === previousChangeStamp ? previousChangeRecord : lively.ChangeSet.getChangeRecord(firstTimestamp);\n+        if(firstChangeRecord.type == \"added\" && this.timestamps.indexOf(timestamp) > -1)\n             //this is not really a removal, we are only removing something temporarily added\n             this.removeTimestamp(timestamp);\n     },\n@@ -880,13 +855,14 @@ ChangeSet.addMethods(\n \n     storeArray: function(array, timestamp) {\n \n-        ChangeSet.storeArray(array, timestamp);\n+        lively.ChangeSet.storeArray(array, timestamp);\n \n         this.addTimestamp(timestamp);\n     },\n+\n     storeName: function() {\n         \n-        if(!ChangeSet.userStorageRoot) {\n+        if(!lively.ChangeSet.userStorageRoot) {\n             var username = $world.getUserName();\n             var storageRoot = \"LivelyChanges:\" + location.pathname;\n             var authorsString = localStorage.getItem(storageRoot + \":authors\");\n@@ -897,32 +873,30 @@ ChangeSet.addMethods(\n                 authorsString = JSON.stringify(authors.push(username))\n                 localStorage.setItem(storageRoot + \":authors\", authorsString);\n             }\n-    \t\tChangeSet.userStorageRoot = storageRoot + \":author:\" + username;\n+    \t\tlively.ChangeSet.userStorageRoot = storageRoot + \":author:\" + username;\n         }\n-        var changesetNames = ChangeSet.changeSetNames();\n+        var changesetNames = lively.ChangeSet.changeSetNames();\n         if(changesetNames.include(this.name))\n             throw new Error(\"Changeset name \"+ this.name+\" already stored\");\n         changesetNames.push(this.name);\n-        localStorage.setItem(ChangeSet.userStorageRoot + \":changesetNames\", JSON.stringify(changesetNames));\n+        localStorage.setItem(lively.ChangeSet.userStorageRoot + \":changesetNames\", JSON.stringify(changesetNames));\n     },\n+\n     reorderTimestamp: function(index, newIndex) {\n \n         var ts = this.timestamps.splice(index, 1)[0];\n         this.timestamps.splice(newIndex, 0, ts);\n-        localStorage.setItem(ChangeSet.userStorageRoot + \":changesetTimestamps:\" + this.name, JSON.stringify(this.timestamps));\n+        localStorage.setItem(lively.ChangeSet.userStorageRoot + \":changesetTimestamps:\" + this.name, JSON.stringify(this.timestamps));\n     },\n \n     addTimestamp: function(t) {\n \n         this.timestamps.push(t);\n-        localStorage.setItem(ChangeSet.userStorageRoot + \":changesetTimestamps:\" + this.name, JSON.stringify(this.timestamps));\n+        localStorage.setItem(lively.ChangeSet.userStorageRoot + \":changesetTimestamps:\" + this.name, JSON.stringify(this.timestamps));\n     },\n \n-\n-\n-\t\n     hydrate: function() {\n-        var storageRoot = ChangeSet.userStorageRoot;\n+        var storageRoot = lively.ChangeSet.userStorageRoot;\n         var changesetTimestampsString = localStorage.getItem(storageRoot + \":changesetTimestamps:\" + this.name);\n         if(!changesetTimestampsString)\n             //empty changeset\n@@ -930,18 +904,15 @@ ChangeSet.addMethods(\n         this.timestamps = JSON.parse(changesetTimestampsString);\n         var self = this;\n         this.timestamps.each(function(t){\n-            self.changeRecords.push(ChangeSet.hydrateChange(t));\n+            self.changeRecords.push(lively.ChangeSet.hydrateChange(t));\n         });\n     }\n \n });\n \n-lively.morphic.Panel.subclass('lively.ide.ChangesBrowser');\n-var ChangesBrowser = lively.ide.ChangesBrowser;\n-\n-ChangesBrowser.addMethods(\n+lively.morphic.Panel.subclass('lively.ide.ChangesBrowser',\n \n-// new ChangesBrowser(pt(1024, 384)).openIn($world, 'Changes Browser')\n+// new lively.ide.ChangesBrowser(pt(1024, 384)).openIn($world, 'Changes Browser')\n \n 'default category', {\n     buildView: function buildView() {  // this.buildView()\n@@ -1001,7 +972,7 @@ ChangesBrowser.addMethods(\n         \t    var record = self.changeSet.changeRecords[index];\n         \t    if(record.type != \"doIt\")\n         \t        prop = \" '\" + record.propertyName + \"'\";\n-        \t    return new Date(e).toUTCString() + ' ' + record.type + \n+        \t    return record.errors.length > 0 ? '!!! ' + record.errors[0] : new Date(e).toUTCString() + ' ' + record.type + \n         \t                    prop +\" in \" + record.contextPath;\n     \t    } else \n     \t        return new Date(e).toUTCString();\n@@ -1017,7 +988,7 @@ ChangesBrowser.addMethods(\n         connect(this.systemVsChangeButton, \"fire\", this, \"nextSystemVsChange\", {});\n         connect(this.changeVsOriginalButton, \"fire\", this, \"nextChangeVsOriginal\", {});\n     \n-    \tthis.changeSetPane.setSelection(ChangeSet.defaultChangeSetName());\n+    \tthis.changeSetPane.setSelection(lively.ChangeSet.defaultChangeSetName());\n     },\n     nextChangeVsOriginal: function() {\n         if(this.nextOriginalVsSystemImpl) {\n@@ -1035,7 +1006,7 @@ ChangesBrowser.addMethods(\n                 [this.changeCategory, this.originalCategory],\n                 [this.changeName, this.originalName]\n                 ];\n-            this.nextChangeVsOriginalImpl = new Differator(this.changeCodePane, this.originalCodePane, style, style, extra);\n+            this.nextChangeVsOriginalImpl = new lively.ide.Differator(this.changeCodePane, this.originalCodePane, style, style, extra);\n         }\n         this.nextChangeVsOriginalImpl.next();\n     },\n@@ -1055,7 +1026,7 @@ ChangesBrowser.addMethods(\n                 [this.originalCategory, this.systemCategory],\n                 [this.originalName, this.systemName]\n                 ];\n-            this.nextOriginalVsSystemImpl = new Differator(this.originalCodePane, this.systemCodePane, style, style, extra);\n+            this.nextOriginalVsSystemImpl = new lively.ide.Differator(this.originalCodePane, this.systemCodePane, style, style, extra);\n         }\n         this.nextOriginalVsSystemImpl.next();\n     },\n@@ -1075,7 +1046,7 @@ ChangesBrowser.addMethods(\n                 [this.systemCategory, this.changeCategory],\n                 [this.systemName, this.changeName]\n                 ];\n-            this.nextSystemVsChangeImpl = new Differator(this.systemCodePane, this.changeCodePane, style, style, extra);\n+            this.nextSystemVsChangeImpl = new lively.ide.Differator(this.systemCodePane, this.changeCodePane, style, style, extra);\n         }\n         this.nextSystemVsChangeImpl.next();\n     },\n@@ -1090,13 +1061,16 @@ ChangesBrowser.addMethods(\n         var selected = this.changeSetPane.selection;\n         if(!selected)\n             return items;\n-        items.push(['refresh', function() {self.setChangeSet(selected)}]);\n+        items.push(['refresh', function() {\n+            if(self.changeSet)\n+                self.changeSet.clear();\n+            self.setChangeSet(selected)}]);\n         if(this.changeSet)\n             items.push(['publish', function() {self.publish()}]);\n         return items;\n     },\n     publish: function() {\n-        var browser = new SharedChangeSetBrowser(pt(1024, 384));\n+        var browser = new lively.ide.SharedChangeSetBrowser(pt(1024, 384));\n         var title = this.changeSet.name + '_' + $world.getUserName();\n         var window = browser.openIn($world, title);\n         browser.setChangeSetContents(this.changeSet.name);\n@@ -1122,9 +1096,6 @@ ChangesBrowser.addMethods(\n         this.changePane.setList(this.changeSet.timestamps.concat([]));\n     },\n \n-\n-\n-\n     setChange: function(t) {\n         delete this.nextOriginalVsSystemImpl;\n         delete this.nextSystemVsChangeImpl;\n@@ -1148,7 +1119,7 @@ ChangesBrowser.addMethods(\n             return;\n         }\n         \n-        var changeRecord = ChangeSet.hydrateChange(t);\n+        var changeRecord = lively.ChangeSet.hydrateChange(t);\n         if(changeRecord.type != \"doIt\") {\n             this.originalCodePane.setTextString(changeRecord.originalSource);\n             this.originalContext.setTextString(changeRecord.originalContextPath);\n@@ -1159,11 +1130,13 @@ ChangesBrowser.addMethods(\n                 contextPath = changeRecord.contextPath;\n             system = lively.lookup(contextPath);\n             if(!system) {\n-                contextPath = changeRecord.originalContextPath;\n-                system = lively.lookup(contextPath);\n+                if(changeRecord.originalContextPath) {\n+                    contextPath = changeRecord.originalContextPath;\n+                    system = lively.lookup(changeRecord.originalContextPath);\n+                }\n             }\n             if(!system) {\n-                this.systemCodePane.setTextString(\"//Neither the current context: \"+ changeRecord.contextPath + \"\\n//nor the original one: \"+ changeRecord.originalContextPath+\"//seem to be loaded\");\n+                this.systemCodePane.setTextString(\"//Neither the current context: \"+ changeRecord.contextPath + \"\\n//nor the original one: \"+ changeRecord.originalContextPath+\"\\n//seem to be loaded\");\n                 this.systemContext.setTextString('');\n                 this.systemCategory.setTextString('');\n                 this.systemName.setTextString('');\n@@ -1209,10 +1182,12 @@ ChangesBrowser.addMethods(\n     },\n \n     setChangeSet: function(name) {\n-        var storageRoot = ChangeSet.userStorageRoot;\n     \tthis.setActive(this.originalVsSystemButton, false);\n     \tthis.setActive(this.systemVsChangeButton, false);\n     \tthis.setActive(this.changeVsOriginalButton, false);\n+    \tif(!name)\n+    \t    return;\n+        var storageRoot = lively.ChangeSet.userStorageRoot;\n         if(name == \"-- ALL CHANGES --\") {\n             this.changeSet = null;\n             var allTimestampsString = localStorage.getItem(storageRoot + \":timestamps\");\n@@ -1223,7 +1198,10 @@ ChangesBrowser.addMethods(\n             }\n             this.changePane.setList(JSON.parse(\"[\"+ allTimestampsString +\"]\"));\n         } else {\n-            this.changeSet = new ChangeSet(name, true);\n+            if(name === lively.ChangeSet.current().name)\n+                this.changeSet = lively.ChangeSet.current();\n+            if(this.changeSet.name !== name || this.changeSet.timestamps.length === 0)\n+                this.changeSet = new lively.ChangeSet(name, true);\n             var oldTimestamp = this.changePane.selection;\n             this.changePane.setList(this.changeSet.timestamps.concat([]));\n             if(oldTimestamp && this.changePane.selection == oldTimestamp)\n@@ -1231,17 +1209,12 @@ ChangesBrowser.addMethods(\n         }\n     },\n \n-\n-\n-\n-\n-\n     getChangeMenu: function() {\n         var selected = this.changePane.selection;\n         var items = [];\n         if(!this.changeSet) {\n             if(selected) {\n-                var changeSet = new ChangeSet(ChangeSet.defaultChangeSetName(), true);\n+                var changeSet = new lively.ChangeSet(lively.ChangeSet.defaultChangeSetName(), true);\n                 if(changeSet.timestamps.include(selected))\n                     return items;\n                 else\n@@ -1259,7 +1232,7 @@ ChangesBrowser.addMethods(\n             items.push(\n                 ['apply all', function() {\n                     self.changePane.getList().each(function(e){\n-                        ChangeSet.applyChange(changeRecords[timestamps.indexOf(e)], e);\n+                        lively.ChangeSet.applyChange(changeRecords[timestamps.indexOf(e)], e);\n                     })\n                     if(selected)\n                         self.setChange(selected);\n@@ -1268,7 +1241,7 @@ ChangesBrowser.addMethods(\n             return items;\n         items.push(\n             ['apply selected', function() {\n-                ChangeSet.applyChange(changeRecords[timestamps.indexOf(selected)], selected);\n+                lively.ChangeSet.applyChange(changeRecords[timestamps.indexOf(selected)], selected);\n                 self.setChange(selected)}]);\n         if(timestamps.indexOf(selected) < timestamps.length - 1)\n             items.push(\n@@ -1285,48 +1258,31 @@ ChangesBrowser.addMethods(\n         return items;\n     },\n \n-\n     removeFromChangeSet: function(t) {\n         this.changeSet.changeRecords.removeAt(this.changeSet.timestamps.indexOf(t));\n         this.changeSet.removeTimestamp(t);\n         this.changePane.setList(this.changeSet.timestamps.concat([]));\n     },\n \n-\n-\n-\n     removeAllChanges: function() {\n         var self = this;\n         $world.confirm('Are you sure you want to permanently remove all changes?', function(answer){\n             if(answer) {\n-                ChangeSet.removeAllFromPersistentStorage();\n+                lively.ChangeSet.removeAllFromPersistentStorage();\n                 self.changeSetPane.setList([\"-- ALL CHANGES --\"]);\n             \tself.setChangeSet(\"-- ALL CHANGES --\");\n             }\n         });        \n     },\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     changeSetPaneContents: function() {\n-        return [\"-- ALL CHANGES --\"].concat(ChangeSet.changeSetNames());\n+        return [\"-- ALL CHANGES --\"].concat(lively.ChangeSet.changeSetNames());\n     },\n \n \n });\n \n-lively.morphic.Panel.subclass('lively.ide.SharedChangeSetBrowser');\n-var SharedChangeSetBrowser = lively.ide.SharedChangeSetBrowser;\n-\n-SharedChangeSetBrowser.addMethods(\n+lively.morphic.Panel.subclass('lively.ide.SharedChangeSetBrowser',\n 'default category', {\n     buildView: function buildView() {  // this.buildView()\n         this.withAllSubmorphsDo(function(m) {disconnectAll(m)});\n@@ -1386,7 +1342,7 @@ SharedChangeSetBrowser.addMethods(\n         if(!selected)\n             return items;\n         items.push(['apply selected', function() {\n-                        ChangeSet.applyChange(selected);\n+                        lively.ChangeSet.applyChange(selected);\n                         self.setChange(selected)}]);\n         return items;\n     },\n@@ -1394,7 +1350,7 @@ SharedChangeSetBrowser.addMethods(\n     applyAllChanges: function() {\n         var self = this;\n         this.changePane.getList().each(function(e){\n-            ChangeSet.applyChange(e);\n+            lively.ChangeSet.applyChange(e);\n         })\n     },\n \n@@ -1410,11 +1366,13 @@ SharedChangeSetBrowser.addMethods(\n                 contextPath = changeRecord.contextPath;\n             system = lively.lookup(contextPath);\n             if(!system) {\n-                contextPath = changeRecord.originalContextPath;\n-                system = lively.lookup(contextPath);\n+                if(changeRecord.originalContextPath) {\n+                    contextPath = changeRecord.originalContextPath;\n+                    system = lively.lookup(changeRecord.originalContextPath);\n+                }\n             }\n             if(!system) {\n-                this.systemCodePane.setTextString(\"//Neither the current context: \"+ changeRecord.contextPath + \"\\n//nor the original one: \"+ changeRecord.originalContextPath+\"//seem to be loaded\");\n+                this.systemCodePane.setTextString(\"//Neither the current context: \"+ changeRecord.contextPath + \"\\n//nor the original one: \"+ changeRecord.originalContextPath+\"\\n//seem to be loaded\");\n                 this.systemContext.setTextString('');\n                 this.systemCategory.setTextString('');\n                 this.systemName.setTextString('');\n@@ -1434,7 +1392,7 @@ SharedChangeSetBrowser.addMethods(\n                     category = systemContainer.lvCategoryForMethod(name);\n                 this.systemCategory.setTextString(category);\n             }\n-            this.changeCategory.setTextString(changeRecord.category);\n+            this.changeCategory.setTextString(changeRecord.category || null);\n             this.changeName.setTextString(changeRecord.propertyName);\n         } else {\n             this.originalCodePane.setTextString('');\n@@ -1453,7 +1411,7 @@ SharedChangeSetBrowser.addMethods(\n     },\n \n     setChangeSetContents: function(name) {\n-        this.changePane.setList(new ChangeSet(name, true).changeRecords);\n+        this.changePane.setList(new lively.ChangeSet(name, true).changeRecords);\n     },\n     onLoad: function() {\n     \tthis.changePane.renderFunction = function(e) {\n@@ -1477,10 +1435,6 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n             return null;\n         var category = this.selectedFunctionKind && \n                 this.selectedFunctionKind.substring(0, this.selectedFunctionKind.indexOf(' - '));\n-                \n-        var categoriesContainer = this.codePane.doitContext.lvCategoriesContainer();\n-        if(categoriesContainer && categoriesContainer.categories[category])\n-            return category;\n         return category == 'default category' ? null : category;\n     },\n },\n@@ -1651,11 +1605,22 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n                     var func = lively.lookup(superclassName).subclass(className, 'default category', {initialize: Functions.Empty});\n                     var shortName = lively.Class.unqualifiedNameFor(className);\n \n-                    func.timestamp = ChangeSet.logAddition(superclassName + \".subclass('\" + className + \"', 'default category', {initialize: \" + Functions.Empty + \"})\", contextPath, shortName);\n-                    ChangeSet.logAddition(Functions.Empty.toString(), contextPath + \".\" + shortName + \".prototype\", \"initialize\");\n+                    func.timestamp = lively.ChangeSet.logAddition(superclassName + \".subclass('\" + className + \"', 'default category', {initialize: \" + Functions.Empty + \"})\", contextPath, shortName);\n                     func.kindOfChange = \"added\";\n                     func.user = $world.getUserName();\n-        \n+\n+                    contextPath = contextPath === \"Global\" ? shortName : contextPath + \".\" + shortName;\n+                    \n+                    var toString = func.toString;\n+                    toString.timestamp = lively.ChangeSet.logAddition(toString.toString(), contextPath, \"toString\");\n+                    toString.user = func.user;\n+                    toString.kindOfChange = \"added\";\n+\n+                    var initialize = func.prototype.initialize;\n+                    initialize.timestamp = lively.ChangeSet.logAddition(initialize.toString(), contextPath + \".prototype\", \"initialize\");\n+                    initialize.user = func.user;\n+                    initialize.kindOfChange = \"added\";\n+\n                     panel.setFunctionContainerKind(panel.selectedContainerKind);\n                     classesPane.setSelectionMatching(shortName);\n                 });\n@@ -1671,13 +1636,13 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n     },\n \n     browseVersions: function(timestamp) {\n-        var current = ChangeSet.getChangeRecord(timestamp);\n+        var current = lively.ChangeSet.getChangeRecord(timestamp);\n         var propertyName = current.propertyName;\n         current.string = new Date(timestamp).toUTCString() + ' (current)';\n         var versions = [current];\n         var firstChangeStamp = current.firstChangeStamp;\n         if(firstChangeStamp) {\n-            var firstChangeRecord = ChangeSet.getChangeRecord(firstChangeStamp);\n+            var firstChangeRecord = lively.ChangeSet.getChangeRecord(firstChangeStamp);\n             if(firstChangeRecord.type != \"added\") {\n                 var previouslyInTheSystem = {string: 'previously in the system'};\n                 previouslyInTheSystem.contextPath = firstChangeRecord.originalContextPath;\n@@ -1689,7 +1654,7 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n         var t = current.previousChangeStamp;\n         var changeRecord = current;\n         while(t) {\n-            changeRecord = ChangeSet.getChangeRecord(t);\n+            changeRecord = lively.ChangeSet.getChangeRecord(t);\n             changeRecord.string = new Date(t).toUTCString();\n             versions.push(changeRecord);\n             t = changeRecord.previousChangeStamp;\n@@ -1697,14 +1662,14 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n         if(previouslyInTheSystem)\n             versions.push(previouslyInTheSystem);\n \n-        var browser = new VersionsBrowser(pt(640, 384));\n+        var browser = new lively.ide.VersionsBrowser(pt(640, 384));\n         var window = browser.openIn($world, propertyName + ' versions ');\n         browser.setContents(versions);\n         browser.codeBrowser = this;\n     },\n     browseDifferences: function() {\n         var selections = this.functionPane.getSelectedItems();\n-        var browser = new FunctionComparer(pt(1024, 384));\n+        var browser = new lively.ide.FunctionComparer(pt(1024, 384));\n         browser.openIn($world, 'Browse differences');\n         var context = this.codePane.doitContext;\n         browser.setContents(selections.collect(function(e){\n@@ -1718,11 +1683,6 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n         this.functionContainerKindPane.setList([])\n     },\n \n-\n-\n-\n-\n-\n     onLoad: function onLoad() {  // this.onLoad()\n         this.codePane.doSave = this.codePaneDoSave;\n         this.functionContainerKindPane.setList(this.functionContainerKindPaneStaticContents());\n@@ -1748,10 +1708,10 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n                     var category = panel.selectedCategory();\n                     if(oldFunc.user && oldFunc.timestamp)\n                         //already modified\n-                        func.timestamp = ChangeSet.logChange(text, contextPath, functionName, category, oldFunc.timestamp);\n+                        func.timestamp = lively.ChangeSet.logChange(text, contextPath, functionName, category, oldFunc.timestamp);\n                     else\n                         //first change\n-                        func.timestamp =  ChangeSet.logFirstChange(text, contextPath, functionName, category, null, oldFunc.toString(), null, null);\n+                        func.timestamp =  lively.ChangeSet.logFirstChange(text, contextPath, functionName, category, null, oldFunc.toString(), null, null);\n                     if(func.timestamp) {\n                         func.user = $world.getUserName();\n                         func.kindOfChange = \"changed source\";\n@@ -1850,9 +1810,6 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n         ]\n     },\n \n-\n-\n-\n     getFunctionContainerMenu: function getFunctionContainerMenu() {\n         if(this.selectedContainerKind.string != \"classes\")\n             return [];\n@@ -1953,13 +1910,15 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n                         newContainer.lvAddMethodToExistingCategory(func, functionName, category);\n                     }\n                 }\n-                \n+                else\n+                    selectedContainer.lvRemoveMethodFromExistingCategory(functionName, 'default category');\n+               \n                 if(func.user && func.timestamp)\n                     //already modified\n-                    func.timestamp = ChangeSet.logChange(func.toString(), newContextPath, functionName, category, func.timestamp);\n+                    func.timestamp = lively.ChangeSet.logChange(func.toString(), newContextPath, functionName, category, func.timestamp);\n                 else\n                     //first change\n-                    func.timestamp =  ChangeSet.logFirstChange(func.toString(), newContextPath, functionName, category, category, null, contextPath);\n+                    func.timestamp =  lively.ChangeSet.logFirstChange(func.toString(), newContextPath, functionName, category, category, null, contextPath);\n                 if(func.timestamp) {\n                     func.user = $world.getUserName();\n                     func.kindOfChange = \"moved\";\n@@ -2021,7 +1980,7 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n                 if (category)\n                     selectedContainer.lvAddMethodToExistingCategory(func, functionName, category);\n                 \n-                func.timestamp = ChangeSet.logAddition(\"function(){}\", contextPath, functionName, category);\n+                func.timestamp = lively.ChangeSet.logAddition(\"function(){}\", contextPath, functionName, category);\n                 func.kindOfChange = \"added\";\n                 func.user = $world.getUserName();\n                 func.sourceModule = currentModule;\n@@ -2068,13 +2027,15 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n                     selectedContainer.lvRemoveMethodFromExistingCategory(oldFunctionName, category);\n                     selectedContainer.lvAddMethodToExistingCategory(func, functionName, category);\n                 }\n+                else\n+                    selectedContainer.lvRemoveMethodFromExistingCategory(functionName, 'default category');\n                 \n                 if(func.user && func.timestamp)\n                     //already modified\n-                    func.timestamp = ChangeSet.logChange(func.toString(), contextPath, functionName, category, func.timestamp);\n+                    func.timestamp = lively.ChangeSet.logChange(func.toString(), contextPath, functionName, category, func.timestamp);\n                 else\n                     //first change\n-                    func.timestamp =  ChangeSet.logFirstChange(func.toString(), contextPath, functionName, category, category, null, null, oldFunctionName);\n+                    func.timestamp =  lively.ChangeSet.logFirstChange(func.toString(), contextPath, functionName, category, category, null, null, oldFunctionName);\n                 if(func.timestamp) {\n                     func.user = $world.getUserName();\n                     func.kindOfChange = \"renamed\";\n@@ -2099,6 +2060,7 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n             var categories = functionKindPane.getList().collect(function(e){return e.string.substring(0, e.string.indexOf(' - '))});\n \n             categories.remove(category);\n+            categories.remove('');\n             categories.remove('default category');  //one for static\n             categories.remove('default category');  //one for proto\n             categories.unshift('<new category>');\n@@ -2109,14 +2071,16 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n                     throw new Error(\"Should not happen\");\n                 if(category)\n                     container.lvRemoveMethodFromExistingCategory(functionName, category);\n+                else\n+                    container.lvRemoveMethodFromExistingCategory(functionName, 'default category');\n                 container.lvAddMethodToExistingCategory(func, functionName, otherCategory);\n     \n                 if(func.user && func.timestamp)\n                     //already modified\n-                    func.timestamp = ChangeSet.logChange(func.toString(), contextPath, functionName, otherCategory, func.timestamp);\n+                    func.timestamp = lively.ChangeSet.logChange(func.toString(), contextPath, functionName, otherCategory, func.timestamp);\n                 else {\n                     //first change\n-                    func.timestamp = ChangeSet.logFirstChange(func.toString(), contextPath, functionName, otherCategory, category, null, null, null);\n+                    func.timestamp = lively.ChangeSet.logFirstChange(func.toString(), contextPath, functionName, otherCategory, category, null, null, null);\n                     if(func.timestamp)\n                         func.user = $world.getUserName();\n                 }\n@@ -2162,12 +2126,14 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n             var category = panel.selectedCategory();\n             if (category)\n                 selectedContainer.lvRemoveMethodFromExistingCategory(functionName, category);\n+            else\n+                selectedContainer.lvRemoveMethodFromExistingCategory(functionName, 'default category');\n             \n             if(func.user && func.timestamp)\n                 //modified\n-                ChangeSet.logRemoval(contextPath, functionName, category, func.timestamp);\n+                lively.ChangeSet.logRemoval(contextPath, functionName, category, func.timestamp);\n             else\n-                ChangeSet.logFirstRemoval(func.toString(), contextPath, functionName, category);\n+                lively.ChangeSet.logFirstRemoval(func.toString(), contextPath, functionName, category);\n     \n             panel.setFunctionContainer(selectedContainer);          //recompute the categories' contents\n             panel.functionKindPane.setSelectionMatching(panel.selectedFunctionKind);                //reselect current category\n@@ -2176,10 +2142,7 @@ lively.morphic.Panel.subclass('lively.ide.SimpleCodeBrowser',\n }\n );\n \n-lively.morphic.Panel.subclass('lively.ide.VersionsBrowser');\n-var VersionsBrowser = lively.ide.VersionsBrowser;\n-\n-VersionsBrowser.addMethods(\n+lively.morphic.Panel.subclass('lively.ide.VersionsBrowser',\n 'default category', {\n     buildView: function buildView() {  // this.buildView()\n         this.withAllSubmorphsDo(function(m) {disconnectAll(m)});\n@@ -2239,15 +2202,12 @@ VersionsBrowser.addMethods(\n                 holders.push({func: e.source, string: e.propertyName + \" \" + e.string});\n             });\n \n-        var browser = new FunctionComparer(pt(1024, 384));\n+        var browser = new lively.ide.FunctionComparer(pt(1024, 384));\n         browser.openIn($world, 'Browse differences');\n         browser.setContents(holders);\n         browser.codeBrowser = this;\n     },\n \n-\n-\n-\n     revertCurrentSourceToSelected: function() {\n         var changes = this.changePane.getList();\n         var selected = this.changePane.selection;\n@@ -2264,9 +2224,9 @@ VersionsBrowser.addMethods(\n             return;\n         }\n         var func = lively.lookup(current.contextPath + '.' + current.propertyName);\n-        func.timestamp = ChangeSet.logChange(selected.source, current.contextPath, current.propertyName, current.category, oldFunc.timestamp);\n+        func.timestamp = lively.ChangeSet.logChange(selected.source, current.contextPath, current.propertyName, current.category, oldFunc.timestamp);\n         if(func.timestamp) {\n-            var newChange = ChangeSet.getChangeRecord(func.timestamp);\n+            var newChange = lively.ChangeSet.getChangeRecord(func.timestamp);\n             newChange.string = new Date(func.timestamp).toUTCString() + ' (current)';\n             func.user = $world.getUserName();\n             func.kindOfChange = \"changed source\";\n@@ -2285,10 +2245,7 @@ VersionsBrowser.addMethods(\n     },\n });\n \n-Object.subclass('lively.ide.Differator');\n-var Differator = lively.ide.Differator;\n-\n-Differator.addMethods(\n+Object.subclass('lively.ide.Differator',\n 'default category', {\n \n     initialize: function(text1, text2, styleSpec1, styleSpec2, optExtraTexts) {\n@@ -2403,15 +2360,10 @@ Differator.addMethods(\n         this.cursor = -1;\n     }\n \n-\n-\n }\n );\n     \n-lively.morphic.Panel.subclass('lively.ide.FunctionComparer');\n-var FunctionComparer = lively.ide.FunctionComparer;\n-\n-FunctionComparer.addMethods(\n+lively.morphic.Panel.subclass('lively.ide.FunctionComparer',\n 'default category', {\n     buildView: function buildView() {  // this.buildView()\n         this.withAllSubmorphsDo(function(m) {disconnectAll(m)});\n@@ -2434,7 +2386,7 @@ FunctionComparer.addMethods(\n     nextDifference: function() {\n         if(!this.nextDiffImpl) {\n             var style = {fontWeight: 'bold', color: Color.red};\n-            this.nextDiffImpl = new Differator(this.codePane1, this.codePane2, style, style);\n+            this.nextDiffImpl = new lively.ide.Differator(this.codePane1, this.codePane2, style, style);\n         }\n         this.nextDiffImpl.next();\n     },\n@@ -2514,10 +2466,7 @@ lively.persistence.SpecObject.addMethods(\"iterating\", {\n     },\n });\n \n-lively.morphic.Panel.subclass('lively.ide.FunctionListBrowser');\n-var FunctionListBrowser = lively.ide.FunctionListBrowser;\n-\n-FunctionListBrowser.addMethods(\n+lively.morphic.Panel.subclass('lively.ide.FunctionListBrowser',\n 'default category', {\n     buildView: function buildView() {  // this.buildView()\n         this.withAllSubmorphsDo(function(m) {disconnectAll(m)});\n@@ -2601,13 +2550,13 @@ FunctionListBrowser.addMethods(\n     cycle: function() {\n         if(!this.cycleImpl) {\n             var style = {fontWeight: 'bold', color: Color.red};\n-            this.cycleImpl = new ReferencesCycler(this.codePane, this.owner.getTitle().split(/\\s/).last(), style);\n+            this.cycleImpl = new lively.ide.ReferencesCycler(this.codePane, this.owner.getTitle().split(/\\s/).last(), style);\n         }\n         this.cycleImpl.next();\n     },\n \n     browseDifferences: function() {\n-        var browser = new FunctionComparer(pt(1024, 384));\n+        var browser = new lively.ide.FunctionComparer(pt(1024, 384));\n         browser.openIn($world, 'Browse differences');\n         browser.setContents(this.functionPane.getSelectedItems().collect(function(e){\n             return {context: e.context, string: e.name}\n@@ -2621,10 +2570,7 @@ FunctionListBrowser.addMethods(\n     },\n });\n \n-Object.subclass('lively.ide.ReferencesCycler');\n-var ReferencesCycler = lively.ide.ReferencesCycler;\n-\n-ReferencesCycler.addMethods(\n+Object.subclass('lively.ide.ReferencesCycler',\n 'default category', {\n \n     initialize: function(text, reference) {\n@@ -2674,8 +2620,6 @@ ReferencesCycler.addMethods(\n         this.cursor = -1;\n     }\n \n-\n-\n }\n );\n \n@@ -2963,7 +2907,7 @@ Object.extend(Global, {\n         return containers\n     },\n     openFunctionList: function(kind, searchString, cycleThroughResults) {\n-        var browser = new FunctionListBrowser(pt(640, 480), cycleThroughResults);\n+        var browser = new lively.ide.FunctionListBrowser(pt(640, 480), cycleThroughResults);\n         browser.openIn($world, kind + ' of ' + searchString);\n         var searchResults = Global[kind](searchString);\n         var sortList = [];\n@@ -3248,14 +3192,26 @@ alignSubmorphs: function alignSubmorphs() {\n     expand: function expand() {\n     var self = this;\n     var items = [];\n+    var world = $world;\n     var y;\n-    if(!localStorage.getItem(\"LivelyChangesets:\" + location.pathname)) {\n+    if(localStorage.getItem(\"LivelyChangesets:\" +  $world.getUserName() + \":\" + location.pathname) === \"off\" || !world.getUserName()) {\n         items.push(\n             ['Turn changesets on', function(){\n-                if(!$world.getUserName()) \n-                    $world.askForUserName();\n-                if($world.getUserName()) \n-                    localStorage.setItem(\"LivelyChangesets:\" + location.pathname, \"on\");\n+                if(world.getUserName()) {\n+                    localStorage.setItem(\"LivelyChangesets:\" +  $world.getUserName() + \":\" + location.pathname, \"on\");\n+                    lively.ChangeSet.initialize();\n+                } else\n+                    world.prompt(\"Please enter your username\", function(name) {\n+                        if (name && name.length > 0) {\n+                            world.setCurrentUser(name);\n+                            localStorage.setItem(\"LivelyChangesets:\" +  name + \":\" + location.pathname, \"on\");\n+                            lively.ChangeSet.initialize();\n+                            alertOK(\"set username to: \" + name);\n+                        } else {\n+                            alertOK(\"removing username\")\n+                            world.setCurrentUser(undefined);\n+                        }\n+                    }, world.getUserName(true));\n                 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n                 self.collapse();\n                 }]\n@@ -3264,17 +3220,17 @@ alignSubmorphs: function alignSubmorphs() {\n     } else {\n         items.push(\n             ['Turn changesets off', function(){\n-                localStorage.removeItem(\"LivelyChangesets:\" + location.pathname);\n+                localStorage.setItem(\"LivelyChangesets:\" +  $world.getUserName() + \":\" + location.pathname, \"off\");\n                 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n                 self.collapse();\n                 }],\n             [\"Open changes browser\", function(){\n-                new lively.ide.ChangesBrowser(pt(1024, 384)).openIn($world, 'Changes Browser');\n+                new lively.ide.ChangesBrowser(pt(1024, 384)).openIn(world, 'Changes Browser');\n                 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n                 self.collapse();\n                 }],\n             [\"Open simple code browser\", function(){\n-                new lively.ide.SimpleCodeBrowser(pt(640, 480)).openIn($world, 'Simple Code Browser');\n+                new lively.ide.SimpleCodeBrowser(pt(640, 480)).openIn(world, 'Simple Code Browser');\n                 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n                 self.collapse();\n                 }]\n@@ -3332,15 +3288,21 @@ alignSubmorphs: function alignSubmorphs() {\n }\n });\n \n-(function loadChangeSets() {\n-    if (!lively.Config.get(\"changesetsExperiment\")\n-     || !lively.LocalStorage.isAvailable()) return;\n-    var hasChangeSet = Global.localStorage.getItem(\"LivelyChangesets:\" + Global.location.pathname);\n-    if (hasChangeSet) ChangeSet.loadAndcheckVsSystem();\n+(function openChangesetsFlap() {\n     lively.whenLoaded(function(world) {\n         if (Config.changesetsExperiment)\n             lively.BuildSpec('ChangesetsFlap').createMorph().openInWorld();\n     });\n-}).delay((Global.location && location.hostname === \"localhost\") ? 3 : 14);\n+})();\n+\n+\n+(function loadChangeSets() {\n+    if (Config.changesetsExperiment && $world.getUserName() && \n+        localStorage.getItem(\"LivelyChangesets:\" +  $world.getUserName() + \":\" + location.pathname) !== \"off\") {\n+            lively.ChangeSet.initialize();\n+            if(Config.automaticChangesReplay)\n+                lively.ChangeSet.loadAndcheckVsSystem();\n+        }\n+}).delay(location.hostname === 'localhost' ? 3 : 13);\n \n }) // end of module"

         },

         {

            "sha": "1e53d8b46b3d3512718c5cc16fe75c1448a29e36",

            "filename": "core/lively/ide/CodeEditor.js",

            "status": "modified",

            "additions": 2,

            "deletions": 1,

            "changes": 3,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b/core/lively/ide/CodeEditor.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b/core/lively/ide/CodeEditor.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/ide/CodeEditor.js?ref=6b9876b6e9c2d87e167a4d548eeb1b545c853d6b",

            "patch": "@@ -680,7 +680,8 @@ lively.morphic.Morph.subclass('lively.morphic.CodeEditor',\n                 };\n         try {\n             var result = interactiveEval.call(ctx);\n-            if (Config.changesetsExperiment && localStorage.getItem(\"LivelyChangesets:\" + location.pathname))\n+            if (Config.changesetsExperiment && $world.getUserName() && \n+        localStorage.getItem(\"LivelyChangesets:\" +  $world.getUserName() + \":\" + location.pathname) !== \"off\")\n                 lively.ChangeSet.logDoit(str, ctx.lvContextPath());\n             return result;\n         } catch(e) {throw e}"

         },

         {

            "sha": "55dc448bb15de06c61d608f035e0d900fc1d131c",

            "filename": "core/lively/morphic/TextCore.js",

            "status": "modified",

            "additions": 2,

            "deletions": 1,

            "changes": 3,

            "blob_url": "https://github.com/LivelyKernel/LivelyKernel/blob/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b/core/lively/morphic/TextCore.js",

            "raw_url": "https://github.com/LivelyKernel/LivelyKernel/raw/6b9876b6e9c2d87e167a4d548eeb1b545c853d6b/core/lively/morphic/TextCore.js",

            "contents_url": "https://api.github.com/repos/LivelyKernel/LivelyKernel/contents/core/lively/morphic/TextCore.js?ref=6b9876b6e9c2d87e167a4d548eeb1b545c853d6b",

            "patch": "@@ -1733,7 +1733,8 @@ lively.morphic.Morph.subclass('lively.morphic.Text', Trait('TextChunkOwner'),\n                 };\n         try {\n             var result = interactiveEval.call(ctx);\n-            if (Config.changesetsExperiment && localStorage.getItem(\"LivelyChangesets:\" + location.pathname))\n+            if (Config.changesetsExperiment && $world.getUserName() && \n+        localStorage.getItem(\"LivelyChangesets:\" +  $world.getUserName() + \":\" + location.pathname) !== \"off\")\n                 lively.ChangeSet.logDoit(str, ctx.lvContextPath());\n             return result;\n         } catch(e) {throw e}"

         }

      ]

   }

]